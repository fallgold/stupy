Terminals unused in grammar

   T_CHARACTER
   T_BAD_CHARACTER
   "comment (T_COMMENT)"
   "doc comment (T_DOC_COMMENT)"
   "open tag (T_OPEN_TAG)"
   "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
   "close tag (T_CLOSE_TAG)"
   "whitespace (T_WHITESPACE)"
   "tpl left delim with echo (T_START_TPL_WITH_ECHO)"


State 252 conflicts: 1 shift/reduce
State 821 conflicts: 2 shift/reduce


Grammar

    0 $accept: start "end of file"

    1 start: top_statement_list

    2 $@1: /* empty */

    3 top_statement_list: top_statement_list $@1 top_statement
    4                   | /* empty */

    5 namespace_name: "identifier (T_STRING)"
    6               | namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"

    7 top_statement: statement
    8              | function_declaration_statement
    9              | class_declaration_statement
   10              | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'
   11              | "namespace (T_NAMESPACE)" namespace_name ';'

   12 $@2: /* empty */

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 top_statement_list '}'

   14 $@3: /* empty */

   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 top_statement_list '}'
   16              | "use (T_USE)" use_declarations ';'
   17              | "use (T_USE)" "function (T_FUNCTION)" use_function_declarations ';'
   18              | "use (T_USE)" "const (T_CONST)" use_const_declarations ';'
   19              | constant_declaration ';'
   20              | tpl_statement

   21 use_declarations: use_declarations ',' use_declaration
   22                 | use_declaration

   23 use_declaration: namespace_name
   24                | namespace_name "as (T_AS)" "identifier (T_STRING)"
   25                | "\\ (T_NS_SEPARATOR)" namespace_name
   26                | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   27 use_function_declarations: use_function_declarations ',' use_function_declaration
   28                          | use_function_declaration

   29 use_function_declaration: namespace_name
   30                         | namespace_name "as (T_AS)" "identifier (T_STRING)"
   31                         | "\\ (T_NS_SEPARATOR)" namespace_name
   32                         | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   33 use_const_declarations: use_const_declarations ',' use_const_declaration
   34                       | use_const_declaration

   35 use_const_declaration: namespace_name
   36                      | namespace_name "as (T_AS)" "identifier (T_STRING)"
   37                      | "\\ (T_NS_SEPARATOR)" namespace_name
   38                      | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   39 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
   40                     | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

   41 $@4: /* empty */

   42 inner_statement_list: inner_statement_list $@4 inner_statement
   43                     | /* empty */

   44 inner_statement: statement
   45                | tpl_statement
   46                | function_declaration_statement
   47                | class_declaration_statement
   48                | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'

   49 statement: unticked_statement
   50          | "identifier (T_STRING)" ':'

   51 unticked_statement: '{' inner_statement_list '}'

   52 $@5: /* empty */

   53 $@6: /* empty */

   54 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 elseif_list else_single

   55 $@7: /* empty */

   56 $@8: /* empty */

   57 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

   58 $@9: /* empty */

   59 @10: /* empty */

   60 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr @10 while_statement

   61 $@11: /* empty */

   62 $@12: /* empty */

   63 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 parenthesis_expr ';'

   64 $@13: /* empty */

   65 $@14: /* empty */

   66 $@15: /* empty */

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

   68 $@16: /* empty */

   69 unticked_statement: "switch (T_SWITCH)" parenthesis_expr $@16 switch_case_list
   70                   | "break (T_BREAK)" ';'
   71                   | "break (T_BREAK)" expr ';'
   72                   | "continue (T_CONTINUE)" ';'
   73                   | "continue (T_CONTINUE)" expr ';'
   74                   | "return (T_RETURN)" ';'
   75                   | "return (T_RETURN)" expr_without_variable ';'
   76                   | "return (T_RETURN)" variable ';'
   77                   | yield_expr ';'
   78                   | "global (T_GLOBAL)" global_var_list ';'
   79                   | "static (T_STATIC)" static_var_list ';'
   80                   | "echo (T_ECHO)" echo_expr_list ';'
   81                   | T_INLINE_HTML
   82                   | expr ';'
   83                   | "unset (T_UNSET)" '(' unset_variables ')' ';'

   84 $@17: /* empty */

   85 $@18: /* empty */

   86 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement

   87 $@19: /* empty */

   88 $@20: /* empty */

   89 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

   90 $@21: /* empty */

   91 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list ')' declare_statement
   92                   | ';'

   93 $@22: /* empty */

   94 $@23: /* empty */

   95 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement $@23 finally_statement
   96                   | "throw (T_THROW)" expr ';'
   97                   | "goto (T_GOTO)" "identifier (T_STRING)" ';'

   98 tpl_block: tpl_block tpl_statement
   99          | tpl_block T_INLINE_HTML
  100          | /* empty */

  101 tpl_modifier_list: r_variable
  102                  | r_variable ';'

  103 $@24: /* empty */

  104 tpl_modifier_list: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '|' "identifier (T_STRING)" $@24 tpl_modifier_param_list

  105 $@25: /* empty */

  106 tpl_modifier_list: tpl_modifier_list '|' "identifier (T_STRING)" $@25 tpl_modifier_param_list

  107 tpl_modifier_param_list: /* empty */

  108 $@26: /* empty */

  109 tpl_modifier_param_list: tpl_modifier_param_list ':' $@26 expr

  110 tpl_inner_tpl_attr_name: "identifier (T_STRING)"
  111                        | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"

  112 tpl_inner_tpl_attr_anony: tpl_base_variable
  113                         | common_scalar
  114                         | "array (T_ARRAY)" '(' array_pair_list ')'

  115 $@27: /* empty */

  116 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_name '=' $@27 expr

  117 $@28: /* empty */

  118 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_list tpl_inner_tpl_attr_name '=' $@28 expr
  119                        | tpl_inner_tpl_attr_anony
  120                        | tpl_inner_tpl_attr_list tpl_inner_tpl_attr_anony

  121 tpl_encaps_list: "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
  122                | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  123                | encaps_list

  124 tpl_statement: "tpl left delim (T_START_TPL)" tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" expr_without_variable ';' "tpl right delim (T_END_TPL)"
  127              | "tpl left delim with script (T_START_TPL_WITH_SCRIPT)" inner_statement_list "tpl right delim (T_END_TPL)"
  128              | "{include (T_TPL_INCLUDE)" expr "tpl right delim (T_END_TPL)"
  129              | "{include (T_TPL_INCLUDE)" "attr file (T_ATTR_FILE)" '=' expr "tpl right delim (T_END_TPL)"
  130              | "{t (T_START_TPL_TRANSLATE)" tpl_encaps_list "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"

  132 @29: /* empty */

  133 $@30: /* empty */

  134 $@31: /* empty */

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

  136 @32: /* empty */

  137 $@33: /* empty */

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

  139 $@34: /* empty */

  140 $@35: /* empty */

  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif

  142 $@36: /* empty */

  143 $@37: /* empty */

  144 $@38: /* empty */

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

  146 $@39: /* empty */

  147 $@40: /* empty */

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

  149 $@41: /* empty */

  150 $@42: /* empty */

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

  152 catch_statement: /* empty */

  153 $@43: /* empty */

  154 $@44: /* empty */

  155 $@45: /* empty */

  156 $@46: /* empty */

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list '}' $@46 additional_catches

  158 finally_statement: /* empty */

  159 $@47: /* empty */

  160 finally_statement: "finally (T_FINALLY)" $@47 '{' inner_statement_list '}'

  161 additional_catches: non_empty_additional_catches
  162                   | /* empty */

  163 non_empty_additional_catches: additional_catch
  164                             | non_empty_additional_catches additional_catch

  165 @48: /* empty */

  166 $@49: /* empty */

  167 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @48 "variable (T_VARIABLE)" ')' $@49 '{' inner_statement_list '}'

  168 unset_variables: unset_variable
  169                | unset_variables ',' unset_variable

  170 unset_variable: variable

  171 function_declaration_statement: unticked_function_declaration_statement

  172 class_declaration_statement: unticked_class_declaration_statement

  173 is_reference: /* empty */
  174             | '&'

  175 is_variadic: /* empty */
  176            | "... (T_ELLIPSIS)"

  177 $@50: /* empty */

  178 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@50 '(' parameter_list ')' '{' inner_statement_list '}'

  179 $@51: /* empty */

  180 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@51 implements_list '{' class_statement_list '}'

  181 $@52: /* empty */

  182 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@52 interface_extends_list '{' class_statement_list '}'

  183 class_entry_type: "class (T_CLASS)"
  184                 | "abstract (T_ABSTRACT)" "class (T_CLASS)"
  185                 | "trait (T_TRAIT)"
  186                 | "final (T_FINAL)" "class (T_CLASS)"

  187 extends_from: /* empty */
  188             | "extends (T_EXTENDS)" fully_qualified_class_name

  189 interface_entry: "interface (T_INTERFACE)"

  190 interface_extends_list: /* empty */
  191                       | "extends (T_EXTENDS)" interface_list

  192 implements_list: /* empty */
  193                | "implements (T_IMPLEMENTS)" interface_list

  194 interface_list: fully_qualified_class_name
  195               | interface_list ',' fully_qualified_class_name

  196 foreach_optional_arg: /* empty */
  197                     | "=> (T_DOUBLE_ARROW)" foreach_variable

  198 foreach_variable: variable
  199                 | '&' variable

  200 for_statement: statement
  201              | ':' inner_statement_list "endfor (T_ENDFOR)" ';'

  202 foreach_statement: statement
  203                  | ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';'

  204 declare_statement: statement
  205                  | ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

  206 declare_list: "identifier (T_STRING)" '=' static_scalar
  207             | declare_list ',' "identifier (T_STRING)" '=' static_scalar

  208 switch_case_list: '{' case_list '}'
  209                 | '{' ';' case_list '}'
  210                 | ':' case_list "endswitch (T_ENDSWITCH)" ';'
  211                 | ':' ';' case_list "endswitch (T_ENDSWITCH)" ';'

  212 case_list: /* empty */

  213 $@53: /* empty */

  214 case_list: case_list "case (T_CASE)" expr case_separator $@53 inner_statement_list

  215 $@54: /* empty */

  216 case_list: case_list "default (T_DEFAULT)" case_separator $@54 inner_statement_list

  217 case_separator: ':'
  218               | ';'

  219 while_statement: statement
  220                | ':' inner_statement_list "endwhile (T_ENDWHILE)" ';'

  221 elseif_list: /* empty */

  222 $@55: /* empty */

  223 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr $@55 statement

  224 tpl_elseif_list: /* empty */

  225 $@56: /* empty */

  226 tpl_elseif_list: tpl_elseif_list "elseif (T_ELSEIF)" expr "tpl right delim (T_END_TPL)" $@56 tpl_block "tpl left delim (T_START_TPL)"

  227 $@57: /* empty */

  228 tpl_elseif_list: tpl_elseif_list "else (T_ELSE)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@57 tpl_block "tpl left delim (T_START_TPL)"

  229 new_elseif_list: /* empty */

  230 $@58: /* empty */

  231 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' $@58 inner_statement_list

  232 else_single: /* empty */
  233            | "else (T_ELSE)" statement

  234 tpl_else_single: /* empty */
  235                | "else (T_ELSE)" "tpl right delim (T_END_TPL)" tpl_block "tpl left delim (T_START_TPL)"

  236 tpl_endif: '/' "if (T_IF)" "tpl right delim (T_END_TPL)"

  237 new_else_single: /* empty */
  238                | "else (T_ELSE)" ':' inner_statement_list

  239 tpl_loopelse: /* empty */
  240             | "else (T_ELSE)" "tpl right delim (T_END_TPL)" tpl_block "tpl left delim (T_START_TPL)"

  241 parameter_list: non_empty_parameter_list
  242               | /* empty */

  243 non_empty_parameter_list: parameter
  244                         | non_empty_parameter_list ',' parameter

  245 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)"
  246          | optional_class_type is_reference is_variadic "variable (T_VARIABLE)" '=' static_scalar

  247 optional_class_type: /* empty */
  248                    | "array (T_ARRAY)"
  249                    | "callable (T_CALLABLE)"
  250                    | fully_qualified_class_name

  251 function_call_parameter_list: '(' ')'
  252                             | '(' non_empty_function_call_parameter_list ')'
  253                             | '(' yield_expr ')'

  254 non_empty_function_call_parameter_list: function_call_parameter
  255                                       | non_empty_function_call_parameter_list ',' function_call_parameter

  256 function_call_parameter: expr_without_variable
  257                        | variable
  258                        | '&' w_variable
  259                        | "... (T_ELLIPSIS)" expr

  260 global_var_list: global_var_list ',' global_var
  261                | global_var

  262 global_var: "variable (T_VARIABLE)"
  263           | '$' r_variable
  264           | '$' '{' expr '}'

  265 static_var_list: static_var_list ',' "variable (T_VARIABLE)"
  266                | static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar
  267                | "variable (T_VARIABLE)"
  268                | "variable (T_VARIABLE)" '=' static_scalar

  269 class_statement_list: class_statement_list class_statement
  270                     | /* empty */

  271 $@59: /* empty */

  272 class_statement: variable_modifiers $@59 class_variable_declaration ';'
  273                | class_constant_declaration ';'
  274                | trait_use_statement

  275 $@60: /* empty */

  276 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@60 '(' parameter_list ')' method_body

  277 trait_use_statement: "use (T_USE)" trait_list trait_adaptations

  278 trait_list: fully_qualified_class_name
  279           | trait_list ',' fully_qualified_class_name

  280 trait_adaptations: ';'
  281                  | '{' trait_adaptation_list '}'

  282 trait_adaptation_list: /* empty */
  283                      | non_empty_trait_adaptation_list

  284 non_empty_trait_adaptation_list: trait_adaptation_statement
  285                                | non_empty_trait_adaptation_list trait_adaptation_statement

  286 trait_adaptation_statement: trait_precedence ';'
  287                           | trait_alias ';'

  288 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list

  289 trait_reference_list: fully_qualified_class_name
  290                     | trait_reference_list ',' fully_qualified_class_name

  291 trait_method_reference: "identifier (T_STRING)"
  292                       | trait_method_reference_fully_qualified

  293 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  294 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  295            | trait_method_reference "as (T_AS)" member_modifier

  296 trait_modifiers: /* empty */
  297                | member_modifier

  298 method_body: ';'
  299            | '{' inner_statement_list '}'

  300 variable_modifiers: non_empty_member_modifiers
  301                   | "var (T_VAR)"

  302 method_modifiers: /* empty */
  303                 | non_empty_member_modifiers

  304 non_empty_member_modifiers: member_modifier
  305                           | non_empty_member_modifiers member_modifier

  306 member_modifier: "public (T_PUBLIC)"
  307                | "protected (T_PROTECTED)"
  308                | "private (T_PRIVATE)"
  309                | "static (T_STATIC)"
  310                | "abstract (T_ABSTRACT)"
  311                | "final (T_FINAL)"

  312 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)"
  313                           | class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar
  314                           | "variable (T_VARIABLE)"
  315                           | "variable (T_VARIABLE)" '=' static_scalar

  316 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
  317                           | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

  318 echo_expr_list: echo_expr_list ',' expr
  319               | expr

  320 for_expr: /* empty */
  321         | non_empty_for_expr

  322 $@61: /* empty */

  323 non_empty_for_expr: non_empty_for_expr ',' $@61 expr
  324                   | expr

  325 chaining_method_or_property: chaining_method_or_property variable_property
  326                            | variable_property

  327 chaining_dereference: chaining_dereference '[' dim_offset ']'
  328                     | '[' dim_offset ']'

  329 $@62: /* empty */

  330 chaining_instance_call: chaining_dereference $@62 chaining_method_or_property
  331                       | chaining_dereference
  332                       | chaining_method_or_property

  333 instance_call: /* empty */

  334 $@63: /* empty */

  335 instance_call: $@63 chaining_instance_call

  336 $@64: /* empty */

  337 new_expr: "new (T_NEW)" class_name_reference $@64 ctor_arguments

  338 $@65: /* empty */

  339 expr_without_variable: "list (T_LIST)" '(' $@65 assignment_list ')' '=' expr
  340                      | variable '=' expr
  341                      | variable '=' '&' variable

  342 $@66: /* empty */

  343 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  344                      | "clone (T_CLONE)" expr
  345                      | variable "+= (T_PLUS_EQUAL)" expr
  346                      | variable "-= (T_MINUS_EQUAL)" expr
  347                      | variable "*= (T_MUL_EQUAL)" expr
  348                      | variable "**= (T_POW_EQUAL)" expr
  349                      | variable "/= (T_DIV_EQUAL)" expr
  350                      | variable ".= (T_CONCAT_EQUAL)" expr
  351                      | variable "%= (T_MOD_EQUAL)" expr
  352                      | variable "&= (T_AND_EQUAL)" expr
  353                      | variable "|= (T_OR_EQUAL)" expr
  354                      | variable "^= (T_XOR_EQUAL)" expr
  355                      | variable "<<= (T_SL_EQUAL)" expr
  356                      | variable ">>= (T_SR_EQUAL)" expr
  357                      | rw_variable "++ (T_INC)"
  358                      | "++ (T_INC)" rw_variable
  359                      | rw_variable "-- (T_DEC)"
  360                      | "-- (T_DEC)" rw_variable

  361 $@67: /* empty */

  362 expr_without_variable: expr "|| (T_BOOLEAN_OR)" $@67 expr

  363 $@68: /* empty */

  364 expr_without_variable: expr "&& (T_BOOLEAN_AND)" $@68 expr

  365 $@69: /* empty */

  366 expr_without_variable: expr "or (T_LOGICAL_OR)" $@69 expr

  367 $@70: /* empty */

  368 expr_without_variable: expr "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr "xor (T_LOGICAL_XOR)" expr
  370                      | expr '&' expr
  371                      | expr '^' expr
  372                      | expr '.' expr
  373                      | expr '+' expr
  374                      | expr '-' expr
  375                      | expr '*' expr
  376                      | expr "** (T_POW)" expr
  377                      | expr '/' expr
  378                      | expr '%' expr
  379                      | expr "<< (T_SL)" expr
  380                      | expr ">> (T_SR)" expr
  381                      | '+' expr
  382                      | '-' expr
  383                      | '!' expr
  384                      | '~' expr
  385                      | expr "=== (T_IS_IDENTICAL)" expr
  386                      | expr "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr "== (T_IS_EQUAL)" expr
  388                      | expr "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr '<' expr
  390                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr '>' expr
  392                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr "instanceof (T_INSTANCEOF)" class_name_reference
  394                      | parenthesis_expr
  395                      | new_expr

  396 @71: /* empty */

  397 expr_without_variable: '(' new_expr ')' @71 instance_call

  398 $@72: /* empty */

  399 $@73: /* empty */

  400 expr_without_variable: expr '?' $@72 expr ':' $@73 expr

  401 $@74: /* empty */

  402 expr_without_variable: expr '?' ':' $@74 expr
  403                      | internal_functions_in_yacc
  404                      | "(int) (T_INT_CAST)" expr
  405                      | "(double) (T_DOUBLE_CAST)" expr
  406                      | "(string) (T_STRING_CAST)" expr
  407                      | "(array) (T_ARRAY_CAST)" expr
  408                      | "(object) (T_OBJECT_CAST)" expr
  409                      | "(bool) (T_BOOL_CAST)" expr
  410                      | "(unset) (T_UNSET_CAST)" expr
  411                      | "exit (T_EXIT)" exit_expr

  412 $@75: /* empty */

  413 expr_without_variable: '@' $@75 expr
  414                      | scalar
  415                      | combined_scalar_offset
  416                      | combined_scalar
  417                      | '`' backticks_expr '`'
  418                      | "print (T_PRINT)" expr
  419                      | "yield (T_YIELD)"

  420 @76: /* empty */

  421 expr_without_variable: function is_reference @76 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

  422 @77: /* empty */

  423 expr_without_variable: "static (T_STATIC)" function is_reference @77 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

  424 yield_expr: "yield (T_YIELD)" expr_without_variable
  425           | "yield (T_YIELD)" variable
  426           | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr_without_variable
  427           | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" variable

  428 combined_scalar_offset: combined_scalar '[' dim_offset ']'
  429                       | combined_scalar_offset '[' dim_offset ']'
  430                       | "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' dim_offset ']'
  431                       | general_constant '[' dim_offset ']'

  432 combined_scalar: "array (T_ARRAY)" '(' array_pair_list ')'
  433                | '[' array_pair_list ']'

  434 function: "function (T_FUNCTION)"

  435 lexical_vars: /* empty */
  436             | "use (T_USE)" '(' lexical_var_list ')'

  437 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)"
  438                 | lexical_var_list ',' '&' "variable (T_VARIABLE)"
  439                 | "variable (T_VARIABLE)"
  440                 | '&' "variable (T_VARIABLE)"

  441 @78: /* empty */

  442 function_call: namespace_name @78 function_call_parameter_list

  443 @79: /* empty */

  444 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name @79 function_call_parameter_list

  445 @80: /* empty */

  446 function_call: "\\ (T_NS_SEPARATOR)" namespace_name @80 function_call_parameter_list

  447 @81: /* empty */

  448 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @81 function_call_parameter_list

  449 $@82: /* empty */

  450 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@82 function_call_parameter_list

  451 $@83: /* empty */

  452 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@83 function_call_parameter_list

  453 $@84: /* empty */

  454 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@84 function_call_parameter_list

  455 $@85: /* empty */

  456 function_call: variable_without_objects $@85 function_call_parameter_list

  457 class_name: "static (T_STATIC)"
  458           | namespace_name
  459           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  460           | "\\ (T_NS_SEPARATOR)" namespace_name

  461 fully_qualified_class_name: namespace_name
  462                           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  463                           | "\\ (T_NS_SEPARATOR)" namespace_name

  464 class_name_reference: class_name
  465                     | dynamic_class_name_reference

  466 $@86: /* empty */

  467 $@87: /* empty */

  468 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@86 object_property $@87 dynamic_class_name_variable_properties
  469                             | base_variable

  470 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property
  471                                       | /* empty */

  472 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property

  473 exit_expr: /* empty */
  474          | '(' ')'
  475          | parenthesis_expr

  476 backticks_expr: /* empty */
  477               | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  478               | encaps_list

  479 ctor_arguments: /* empty */
  480               | function_call_parameter_list

  481 common_scalar: "integer number (T_LNUMBER)"
  482              | "floating-point number (T_DNUMBER)"
  483              | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
  484              | "__LINE__ (T_LINE)"
  485              | "__FILE__ (T_FILE)"
  486              | "__DIR__ (T_DIR)"
  487              | "__TRAIT__ (T_TRAIT_C)"
  488              | "__METHOD__ (T_METHOD_C)"
  489              | "__FUNCTION__ (T_FUNC_C)"
  490              | "__NAMESPACE__ (T_NS_C)"
  491              | "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  492              | "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)"

  493 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  494 static_scalar: static_scalar_value

  495 static_scalar_value: common_scalar
  496                    | static_class_name_scalar
  497                    | namespace_name
  498                    | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  499                    | "\\ (T_NS_SEPARATOR)" namespace_name
  500                    | "array (T_ARRAY)" '(' static_array_pair_list ')'
  501                    | '[' static_array_pair_list ']'
  502                    | static_class_constant
  503                    | "__CLASS__ (T_CLASS_C)"
  504                    | static_operation

  505 static_operation: static_scalar_value '[' static_scalar_value ']'
  506                 | static_scalar_value '+' static_scalar_value
  507                 | static_scalar_value '-' static_scalar_value
  508                 | static_scalar_value '*' static_scalar_value
  509                 | static_scalar_value "** (T_POW)" static_scalar_value
  510                 | static_scalar_value '/' static_scalar_value
  511                 | static_scalar_value '%' static_scalar_value
  512                 | '!' static_scalar_value
  513                 | '~' static_scalar_value
  514                 | static_scalar_value '|' static_scalar_value
  515                 | static_scalar_value '&' static_scalar_value
  516                 | static_scalar_value '^' static_scalar_value
  517                 | static_scalar_value "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value '.' static_scalar_value
  520                 | static_scalar_value "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value '<' static_scalar_value
  530                 | static_scalar_value '>' static_scalar_value
  531                 | static_scalar_value "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value '?' ':' static_scalar_value
  534                 | static_scalar_value '?' static_scalar_value ':' static_scalar_value
  535                 | '+' static_scalar_value
  536                 | '-' static_scalar_value
  537                 | '(' static_scalar_value ')'

  538 general_constant: class_constant
  539                 | namespace_name
  540                 | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  541                 | "\\ (T_NS_SEPARATOR)" namespace_name

  542 scalar: "variable name (T_STRING_VARNAME)"
  543       | general_constant
  544       | class_name_scalar
  545       | common_scalar
  546       | '"' encaps_list '"'
  547       | "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)"
  548       | "__CLASS__ (T_CLASS_C)"

  549 static_array_pair_list: /* empty */
  550                       | non_empty_static_array_pair_list possible_comma

  551 possible_comma: /* empty */
  552               | ','

  553 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value
  554                                 | non_empty_static_array_pair_list ',' static_scalar_value
  555                                 | static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value
  556                                 | static_scalar_value

  557 expr: r_variable
  558     | expr_without_variable

  559 parenthesis_expr: '(' expr ')'
  560                 | '(' yield_expr ')'

  561 r_variable: variable

  562 w_variable: variable

  563 rw_variable: variable

  564 $@88: /* empty */

  565 $@89: /* empty */

  566 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@88 object_property $@89 method_or_not variable_properties
  567         | base_variable_with_function_calls

  568 variable_properties: variable_properties variable_property
  569                    | /* empty */

  570 $@90: /* empty */

  571 variable_property: "-> (T_OBJECT_OPERATOR)" object_property $@90 method_or_not

  572 array_method_dereference: array_method_dereference '[' dim_offset ']'
  573                         | method '[' dim_offset ']'

  574 @91: /* empty */

  575 method: @91 function_call_parameter_list

  576 method_or_not: method
  577              | array_method_dereference
  578              | /* empty */

  579 variable_without_objects: reference_variable
  580                         | simple_indirect_reference reference_variable

  581 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  582              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

  583 variable_class_name: reference_variable

  584 array_function_dereference: array_function_dereference '[' dim_offset ']'

  585 $@92: /* empty */

  586 array_function_dereference: function_call $@92 '[' dim_offset ']'

  587 base_variable_with_function_calls: base_variable
  588                                  | array_function_dereference
  589                                  | function_call

  590 base_variable: reference_variable
  591              | simple_indirect_reference reference_variable
  592              | static_member

  593 tpl_base_variable: reference_variable
  594                  | simple_indirect_reference reference_variable

  595 reference_variable: reference_variable '[' dim_offset ']'
  596                   | reference_variable '{' expr '}'
  597                   | compound_variable

  598 compound_variable: "variable (T_VARIABLE)"
  599                  | '$' '{' expr '}'

  600 dim_offset: /* empty */
  601           | expr

  602 object_property: object_dim_list

  603 $@93: /* empty */

  604 object_property: variable_without_objects $@93

  605 object_dim_list: object_dim_list '[' dim_offset ']'
  606                | object_dim_list '{' expr '}'
  607                | variable_name

  608 variable_name: "identifier (T_STRING)"
  609              | '{' expr '}'

  610 simple_indirect_reference: '$'
  611                          | simple_indirect_reference '$'

  612 assignment_list: assignment_list ',' assignment_list_element
  613                | assignment_list_element

  614 assignment_list_element: variable

  615 $@94: /* empty */

  616 assignment_list_element: "list (T_LIST)" '(' $@94 assignment_list ')'
  617                        | /* empty */

  618 array_pair_list: /* empty */
  619                | non_empty_array_pair_list possible_comma

  620 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr
  621                          | non_empty_array_pair_list ',' expr
  622                          | expr "=> (T_DOUBLE_ARROW)" expr
  623                          | expr
  624                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  625                          | non_empty_array_pair_list ',' '&' w_variable
  626                          | expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  627                          | '&' w_variable

  628 encaps_list: encaps_list encaps_var
  629            | encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  630            | encaps_var
  631            | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var

  632 encaps_var: "variable (T_VARIABLE)"

  633 $@95: /* empty */

  634 encaps_var: "variable (T_VARIABLE)" '[' $@95 encaps_var_offset ']'
  635           | "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"
  636           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}'
  637           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}'
  638           | "{$ (T_CURLY_OPEN)" variable '}'

  639 encaps_var_offset: "identifier (T_STRING)"
  640                  | "number (T_NUM_STRING)"
  641                  | "variable (T_VARIABLE)"

  642 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')'
  643                           | "empty (T_EMPTY)" '(' variable ')'
  644                           | "empty (T_EMPTY)" '(' expr_without_variable ')'
  645                           | "include (T_INCLUDE)" expr
  646                           | "include_once (T_INCLUDE_ONCE)" expr
  647                           | "eval (T_EVAL)" '(' expr ')'
  648                           | "require (T_REQUIRE)" expr
  649                           | "require_once (T_REQUIRE_ONCE)" expr

  650 isset_variables: isset_variable

  651 $@96: /* empty */

  652 isset_variables: isset_variables ',' $@96 isset_variable

  653 isset_variable: variable
  654               | expr_without_variable

  655 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  656               | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  657 static_class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"

  658 class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"


Terminals, with rules where they appear

"end of file" (0) 0
'!' (33) 383 512
'"' (34) 546
'$' (36) 263 264 599 610 611
'%' (37) 378 511
'&' (38) 174 199 258 341 343 370 438 440 515 624 625 626 627
'(' (40) 10 48 67 83 86 89 91 114 135 145 148 157 167 178 251 252 253
    276 339 397 421 423 432 436 474 500 537 559 560 616 642 643 644
    647
')' (41) 10 48 67 83 86 89 91 114 135 145 148 157 167 178 251 252 253
    276 339 397 421 423 432 436 474 500 537 559 560 616 642 643 644
    647
'*' (42) 375 508
'+' (43) 373 381 506 535
',' (44) 21 27 33 39 169 195 207 244 255 260 265 266 279 290 312 313
    316 318 323 437 438 552 553 554 612 620 621 624 625 652
'-' (45) 374 382 507 536
'.' (46) 372 519
'/' (47) 135 138 145 148 151 236 377 510
':' (58) 50 57 109 201 203 205 210 211 217 220 231 238 400 402 533
    534
';' (59) 10 11 16 17 18 19 48 57 63 67 70 71 72 73 74 75 76 77 78 79
    80 82 83 92 96 97 102 126 145 201 203 205 209 210 211 218 220 272
    273 280 286 287 298
'<' (60) 389 529
'=' (61) 39 40 116 118 129 206 207 246 266 268 313 315 316 317 339
    340 341 343
'>' (62) 391 530
'?' (63) 400 402 533 534
'@' (64) 413
'[' (91) 327 328 428 429 430 431 433 501 505 572 573 584 586 595 605
    634 637
']' (93) 327 328 428 429 430 431 433 501 505 572 573 584 586 595 605
    634 637
'^' (94) 371 516
'`' (96) 417
'{' (123) 13 15 51 95 157 160 167 178 180 182 208 209 264 281 299 421
    423 596 599 606 609
'|' (124) 104 106 514
'}' (125) 13 15 51 95 157 160 167 178 180 182 208 209 264 281 299 421
    423 596 599 606 609 636 637 638
'~' (126) 384 513
error (256)
"require_once (T_REQUIRE_ONCE)" (258) 649
"require (T_REQUIRE)" (259) 648
"eval (T_EVAL)" (260) 647
"include_once (T_INCLUDE_ONCE)" (261) 646
"include (T_INCLUDE)" (262) 645
"or (T_LOGICAL_OR)" (263) 366 522
"xor (T_LOGICAL_XOR)" (264) 369 520
"and (T_LOGICAL_AND)" (265) 368 521
"print (T_PRINT)" (266) 418
"yield (T_YIELD)" (267) 419 424 425 426 427
"**= (T_POW_EQUAL)" (268) 348
">>= (T_SR_EQUAL)" (269) 356
"<<= (T_SL_EQUAL)" (270) 355
"^= (T_XOR_EQUAL)" (271) 354
"|= (T_OR_EQUAL)" (272) 353
"&= (T_AND_EQUAL)" (273) 352
"%= (T_MOD_EQUAL)" (274) 351
".= (T_CONCAT_EQUAL)" (275) 350
"/= (T_DIV_EQUAL)" (276) 349
"*= (T_MUL_EQUAL)" (277) 347
"-= (T_MINUS_EQUAL)" (278) 346
"+= (T_PLUS_EQUAL)" (279) 345
"|| (T_BOOLEAN_OR)" (280) 362 524
"&& (T_BOOLEAN_AND)" (281) 364 523
"!== (T_IS_NOT_IDENTICAL)" (282) 386 526
"=== (T_IS_IDENTICAL)" (283) 385 525
"!= (T_IS_NOT_EQUAL)" (284) 388 528
"== (T_IS_EQUAL)" (285) 387 527
">= (T_IS_GREATER_OR_EQUAL)" (286) 392 532
"<= (T_IS_SMALLER_OR_EQUAL)" (287) 390 531
">> (T_SR)" (288) 380 518
"<< (T_SL)" (289) 379 517
"instanceof (T_INSTANCEOF)" (290) 393
"(unset) (T_UNSET_CAST)" (291) 410
"(bool) (T_BOOL_CAST)" (292) 409
"(object) (T_OBJECT_CAST)" (293) 408
"(array) (T_ARRAY_CAST)" (294) 407
"(string) (T_STRING_CAST)" (295) 406
"(double) (T_DOUBLE_CAST)" (296) 405
"(int) (T_INT_CAST)" (297) 404
"-- (T_DEC)" (298) 359 360
"++ (T_INC)" (299) 357 358
"** (T_POW)" (300) 376 509
"clone (T_CLONE)" (301) 344
"new (T_NEW)" (302) 337 343
"exit (T_EXIT)" (303) 411
"if (T_IF)" (304) 54 57 141 228 236
"elseif (T_ELSEIF)" (305) 223 226 231
"else (T_ELSE)" (306) 228 233 235 238 240
"endif (T_ENDIF)" (307) 57
"integer number (T_LNUMBER)" (308) 481
"floating-point number (T_DNUMBER)" (309) 482
"identifier (T_STRING)" (310) 5 6 24 26 30 32 36 38 39 40 50 97 104
    106 110 131 178 180 182 206 207 276 291 293 294 316 317 493 608
    635 639 655 656
"variable name (T_STRING_VARNAME)" (311) 542 637
"variable (T_VARIABLE)" (312) 157 167 245 246 262 265 266 267 268 312
    313 314 315 437 438 439 440 598 632 634 635 641
"number (T_NUM_STRING)" (313) 640
T_INLINE_HTML (314) 81 99
T_CHARACTER (315)
T_BAD_CHARACTER (316)
"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" (317) 122
    477 491 629 631
"quoted-string (T_CONSTANT_ENCAPSED_STRING)" (318) 104 111 121 430
    483
"echo (T_ECHO)" (319) 80
"do (T_DO)" (320) 63
"while (T_WHILE)" (321) 60 63
"endwhile (T_ENDWHILE)" (322) 220
"for (T_FOR)" (323) 67 145 148 151
"endfor (T_ENDFOR)" (324) 201
"foreach (T_FOREACH)" (325) 86 89 135 138
"endforeach (T_ENDFOREACH)" (326) 203
"declare (T_DECLARE)" (327) 91
"enddeclare (T_ENDDECLARE)" (328) 205
"as (T_AS)" (329) 24 26 30 32 36 38 86 89 135 138 294 295
"switch (T_SWITCH)" (330) 69
"endswitch (T_ENDSWITCH)" (331) 210 211
"case (T_CASE)" (332) 214
"default (T_DEFAULT)" (333) 216
"break (T_BREAK)" (334) 70 71
"continue (T_CONTINUE)" (335) 72 73
"goto (T_GOTO)" (336) 97
"function (T_FUNCTION)" (337) 17 434
"const (T_CONST)" (338) 18 40 317
"return (T_RETURN)" (339) 74 75 76
"try (T_TRY)" (340) 95
"catch (T_CATCH)" (341) 157 167
"finally (T_FINALLY)" (342) 160
"throw (T_THROW)" (343) 96
"use (T_USE)" (344) 16 17 18 277 436
"insteadof (T_INSTEADOF)" (345) 288
"global (T_GLOBAL)" (346) 78
"public (T_PUBLIC)" (347) 306
"protected (T_PROTECTED)" (348) 307
"private (T_PRIVATE)" (349) 308
"final (T_FINAL)" (350) 186 311
"abstract (T_ABSTRACT)" (351) 184 310
"static (T_STATIC)" (352) 79 309 423 457
"var (T_VAR)" (353) 301
"unset (T_UNSET)" (354) 83
"isset (T_ISSET)" (355) 642
"empty (T_EMPTY)" (356) 643 644
"__halt_compiler (T_HALT_COMPILER)" (357) 10 48
"class (T_CLASS)" (358) 183 184 186 657 658
"trait (T_TRAIT)" (359) 185
"interface (T_INTERFACE)" (360) 189
"extends (T_EXTENDS)" (361) 188 191
"implements (T_IMPLEMENTS)" (362) 193
"-> (T_OBJECT_OPERATOR)" (363) 468 472 566 571 635
"=> (T_DOUBLE_ARROW)" (364) 197 426 427 553 555 620 622 624 626
"list (T_LIST)" (365) 339 616
"array (T_ARRAY)" (366) 114 248 432 500
"callable (T_CALLABLE)" (367) 249
"__CLASS__ (T_CLASS_C)" (368) 503 548
"__TRAIT__ (T_TRAIT_C)" (369) 487
"__METHOD__ (T_METHOD_C)" (370) 488
"__FUNCTION__ (T_FUNC_C)" (371) 489
"__LINE__ (T_LINE)" (372) 484
"__FILE__ (T_FILE)" (373) 485
"comment (T_COMMENT)" (374)
"doc comment (T_DOC_COMMENT)" (375)
"open tag (T_OPEN_TAG)" (376)
"open tag with echo (T_OPEN_TAG_WITH_ECHO)" (377)
"close tag (T_CLOSE_TAG)" (378)
"whitespace (T_WHITESPACE)" (379)
"heredoc start (T_START_HEREDOC)" (380) 491 492 547
"heredoc end (T_END_HEREDOC)" (381) 491 492 547
"${ (T_DOLLAR_OPEN_CURLY_BRACES)" (382) 636 637
"{$ (T_CURLY_OPEN)" (383) 638
":: (T_PAAMAYIM_NEKUDOTAYIM)" (384) 293 448 450 452 454 493 581 582
    655 656 657 658
"namespace (T_NAMESPACE)" (385) 11 13 15 444 459 462 498 540
"__NAMESPACE__ (T_NS_C)" (386) 490
"__DIR__ (T_DIR)" (387) 486
"\\ (T_NS_SEPARATOR)" (388) 6 25 26 31 32 37 38 444 446 459 460 462
    463 498 499 540 541
"tpl left delim (T_START_TPL)" (389) 124 125 126 131 135 138 141 145
    148 151 226 228 235 240
"tpl left delim with echo (T_START_TPL_WITH_ECHO)" (390)
"tpl left delim with script (T_START_TPL_WITH_SCRIPT)" (391) 127
"tpl right delim (T_END_TPL)" (392) 124 125 126 127 128 129 130 131
    135 138 141 145 148 151 226 228 235 236 240
"attr file (T_ATTR_FILE)" (393) 129
"in (T_IN)" (394) 148 151
"{t (T_START_TPL_TRANSLATE)" (395) 130
"{include (T_TPL_INCLUDE)" (396) 128 129
"... (T_ELLIPSIS)" (397) 176 259


Nonterminals, with rules where they appear

$accept (171)
    on left: 0
start (172)
    on left: 1, on right: 0
top_statement_list (173)
    on left: 3 4, on right: 1 3 13 15
$@1 (174)
    on left: 2, on right: 3
namespace_name (175)
    on left: 5 6, on right: 6 11 13 23 24 25 26 29 30 31 32 35 36 37
    38 442 444 446 458 459 460 461 462 463 497 498 499 539 540 541
top_statement (176)
    on left: 7 8 9 10 11 13 15 16 17 18 19 20, on right: 3
$@2 (177)
    on left: 12, on right: 13
$@3 (178)
    on left: 14, on right: 15
use_declarations (179)
    on left: 21 22, on right: 16 21
use_declaration (180)
    on left: 23 24 25 26, on right: 21 22
use_function_declarations (181)
    on left: 27 28, on right: 17 27
use_function_declaration (182)
    on left: 29 30 31 32, on right: 27 28
use_const_declarations (183)
    on left: 33 34, on right: 18 33
use_const_declaration (184)
    on left: 35 36 37 38, on right: 33 34
constant_declaration (185)
    on left: 39 40, on right: 19 39
inner_statement_list (186)
    on left: 42 43, on right: 42 51 57 95 127 157 160 167 178 201 203
    205 214 216 220 231 238 299 421 423
$@4 (187)
    on left: 41, on right: 42
inner_statement (188)
    on left: 44 45 46 47 48, on right: 42
statement (189)
    on left: 49 50, on right: 7 44 54 63 200 202 204 219 223 233
unticked_statement (190)
    on left: 51 54 57 60 63 67 69 70 71 72 73 74 75 76 77 78 79 80
    81 82 83 86 89 91 92 95 96 97, on right: 49
$@5 (191)
    on left: 52, on right: 54
$@6 (192)
    on left: 53, on right: 54
$@7 (193)
    on left: 55, on right: 57
$@8 (194)
    on left: 56, on right: 57
$@9 (195)
    on left: 58, on right: 60
@10 (196)
    on left: 59, on right: 60
$@11 (197)
    on left: 61, on right: 63
$@12 (198)
    on left: 62, on right: 63
$@13 (199)
    on left: 64, on right: 67
$@14 (200)
    on left: 65, on right: 67
$@15 (201)
    on left: 66, on right: 67
$@16 (202)
    on left: 68, on right: 69
$@17 (203)
    on left: 84, on right: 86
$@18 (204)
    on left: 85, on right: 86
$@19 (205)
    on left: 87, on right: 89
$@20 (206)
    on left: 88, on right: 89
$@21 (207)
    on left: 90, on right: 91
$@22 (208)
    on left: 93, on right: 95
$@23 (209)
    on left: 94, on right: 95
tpl_block (210)
    on left: 98 99 100, on right: 98 99 135 138 141 145 148 151 226
    228 235 240
tpl_modifier_list (211)
    on left: 101 102 104 106, on right: 106 124
$@24 (212)
    on left: 103, on right: 104
$@25 (213)
    on left: 105, on right: 106
tpl_modifier_param_list (214)
    on left: 107 109, on right: 104 106 109
$@26 (215)
    on left: 108, on right: 109
tpl_inner_tpl_attr_name (216)
    on left: 110 111, on right: 116 118
tpl_inner_tpl_attr_anony (217)
    on left: 112 113 114, on right: 119 120
tpl_inner_tpl_attr_list (218)
    on left: 116 118 119 120, on right: 118 120 131
$@27 (219)
    on left: 115, on right: 116
$@28 (220)
    on left: 117, on right: 118
tpl_encaps_list (221)
    on left: 121 122 123, on right: 130
tpl_statement (222)
    on left: 124 125 126 127 128 129 130 131 135 138 141 145 148 151,
    on right: 20 45 98
@29 (223)
    on left: 132, on right: 135
$@30 (224)
    on left: 133, on right: 135
$@31 (225)
    on left: 134, on right: 135
@32 (226)
    on left: 136, on right: 138
$@33 (227)
    on left: 137, on right: 138
$@34 (228)
    on left: 139, on right: 141
$@35 (229)
    on left: 140, on right: 141
$@36 (230)
    on left: 142, on right: 145
$@37 (231)
    on left: 143, on right: 145
$@38 (232)
    on left: 144, on right: 145
$@39 (233)
    on left: 146, on right: 148
$@40 (234)
    on left: 147, on right: 148
$@41 (235)
    on left: 149, on right: 151
$@42 (236)
    on left: 150, on right: 151
catch_statement (237)
    on left: 152 157, on right: 95
$@43 (238)
    on left: 153, on right: 157
$@44 (239)
    on left: 154, on right: 157
$@45 (240)
    on left: 155, on right: 157
$@46 (241)
    on left: 156, on right: 157
finally_statement (242)
    on left: 158 160, on right: 95
$@47 (243)
    on left: 159, on right: 160
additional_catches (244)
    on left: 161 162, on right: 157
non_empty_additional_catches (245)
    on left: 163 164, on right: 161 164
additional_catch (246)
    on left: 167, on right: 163 164
@48 (247)
    on left: 165, on right: 167
$@49 (248)
    on left: 166, on right: 167
unset_variables (249)
    on left: 168 169, on right: 83 169
unset_variable (250)
    on left: 170, on right: 168 169
function_declaration_statement (251)
    on left: 171, on right: 8 46
class_declaration_statement (252)
    on left: 172, on right: 9 47
is_reference (253)
    on left: 173 174, on right: 178 245 246 276 421 423
is_variadic (254)
    on left: 175 176, on right: 245 246
unticked_function_declaration_statement (255)
    on left: 178, on right: 171
$@50 (256)
    on left: 177, on right: 178
unticked_class_declaration_statement (257)
    on left: 180 182, on right: 172
$@51 (258)
    on left: 179, on right: 180
$@52 (259)
    on left: 181, on right: 182
class_entry_type (260)
    on left: 183 184 185 186, on right: 180
extends_from (261)
    on left: 187 188, on right: 180
interface_entry (262)
    on left: 189, on right: 182
interface_extends_list (263)
    on left: 190 191, on right: 182
implements_list (264)
    on left: 192 193, on right: 180
interface_list (265)
    on left: 194 195, on right: 191 193 195
foreach_optional_arg (266)
    on left: 196 197, on right: 86 89 135 138 148 151
foreach_variable (267)
    on left: 198 199, on right: 86 89 135 138 148 151 197
for_statement (268)
    on left: 200 201, on right: 67
foreach_statement (269)
    on left: 202 203, on right: 86 89
declare_statement (270)
    on left: 204 205, on right: 91
declare_list (271)
    on left: 206 207, on right: 91 207
switch_case_list (272)
    on left: 208 209 210 211, on right: 69
case_list (273)
    on left: 212 214 216, on right: 208 209 210 211 214 216
$@53 (274)
    on left: 213, on right: 214
$@54 (275)
    on left: 215, on right: 216
case_separator (276)
    on left: 217 218, on right: 214 216
while_statement (277)
    on left: 219 220, on right: 60
elseif_list (278)
    on left: 221 223, on right: 54 223
$@55 (279)
    on left: 222, on right: 223
tpl_elseif_list (280)
    on left: 224 226 228, on right: 141 226 228
$@56 (281)
    on left: 225, on right: 226
$@57 (282)
    on left: 227, on right: 228
new_elseif_list (283)
    on left: 229 231, on right: 57 231
$@58 (284)
    on left: 230, on right: 231
else_single (285)
    on left: 232 233, on right: 54
tpl_else_single (286)
    on left: 234 235, on right: 141
tpl_endif (287)
    on left: 236, on right: 141
new_else_single (288)
    on left: 237 238, on right: 57
tpl_loopelse (289)
    on left: 239 240, on right: 135 138 148 151
parameter_list (290)
    on left: 241 242, on right: 178 276 421 423
non_empty_parameter_list (291)
    on left: 243 244, on right: 241 244
parameter (292)
    on left: 245 246, on right: 243 244
optional_class_type (293)
    on left: 247 248 249 250, on right: 245 246
function_call_parameter_list (294)
    on left: 251 252 253, on right: 442 444 446 448 450 452 454 456
    480 575
non_empty_function_call_parameter_list (295)
    on left: 254 255, on right: 252 255
function_call_parameter (296)
    on left: 256 257 258 259, on right: 254 255
global_var_list (297)
    on left: 260 261, on right: 78 260
global_var (298)
    on left: 262 263 264, on right: 260 261
static_var_list (299)
    on left: 265 266 267 268, on right: 79 265 266
class_statement_list (300)
    on left: 269 270, on right: 180 182 269
class_statement (301)
    on left: 272 273 274 276, on right: 269
$@59 (302)
    on left: 271, on right: 272
$@60 (303)
    on left: 275, on right: 276
trait_use_statement (304)
    on left: 277, on right: 274
trait_list (305)
    on left: 278 279, on right: 277 279
trait_adaptations (306)
    on left: 280 281, on right: 277
trait_adaptation_list (307)
    on left: 282 283, on right: 281
non_empty_trait_adaptation_list (308)
    on left: 284 285, on right: 283 285
trait_adaptation_statement (309)
    on left: 286 287, on right: 284 285
trait_precedence (310)
    on left: 288, on right: 286
trait_reference_list (311)
    on left: 289 290, on right: 288 290
trait_method_reference (312)
    on left: 291 292, on right: 294 295
trait_method_reference_fully_qualified (313)
    on left: 293, on right: 288 292
trait_alias (314)
    on left: 294 295, on right: 287
trait_modifiers (315)
    on left: 296 297, on right: 294
method_body (316)
    on left: 298 299, on right: 276
variable_modifiers (317)
    on left: 300 301, on right: 272
method_modifiers (318)
    on left: 302 303, on right: 276
non_empty_member_modifiers (319)
    on left: 304 305, on right: 300 303 305
member_modifier (320)
    on left: 306 307 308 309 310 311, on right: 295 297 304 305
class_variable_declaration (321)
    on left: 312 313 314 315, on right: 272 312 313
class_constant_declaration (322)
    on left: 316 317, on right: 273 316
echo_expr_list (323)
    on left: 318 319, on right: 80 318
for_expr (324)
    on left: 320 321, on right: 67 145
non_empty_for_expr (325)
    on left: 323 324, on right: 321 323
$@61 (326)
    on left: 322, on right: 323
chaining_method_or_property (327)
    on left: 325 326, on right: 325 330 332
chaining_dereference (328)
    on left: 327 328, on right: 327 330 331
chaining_instance_call (329)
    on left: 330 331 332, on right: 335
$@62 (330)
    on left: 329, on right: 330
instance_call (331)
    on left: 333 335, on right: 397
$@63 (332)
    on left: 334, on right: 335
new_expr (333)
    on left: 337, on right: 395 397
$@64 (334)
    on left: 336, on right: 337
expr_without_variable (335)
    on left: 339 340 341 343 344 345 346 347 348 349 350 351 352 353
    354 355 356 357 358 359 360 362 364 366 368 369 370 371 372 373
    374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389
    390 391 392 393 394 395 397 400 402 403 404 405 406 407 408 409
    410 411 413 414 415 416 417 418 419 421 423, on right: 75 89 125
    126 256 424 426 558 644 654
$@65 (336)
    on left: 338, on right: 339
$@66 (337)
    on left: 342, on right: 343
$@67 (338)
    on left: 361, on right: 362
$@68 (339)
    on left: 363, on right: 364
$@69 (340)
    on left: 365, on right: 366
$@70 (341)
    on left: 367, on right: 368
@71 (342)
    on left: 396, on right: 397
$@72 (343)
    on left: 398, on right: 400
$@73 (344)
    on left: 399, on right: 400
$@74 (345)
    on left: 401, on right: 402
$@75 (346)
    on left: 412, on right: 413
@76 (347)
    on left: 420, on right: 421
@77 (348)
    on left: 422, on right: 423
yield_expr (349)
    on left: 424 425 426 427, on right: 77 253 560
combined_scalar_offset (350)
    on left: 428 429 430 431, on right: 415 429
combined_scalar (351)
    on left: 432 433, on right: 416 428
function (352)
    on left: 434, on right: 178 276 421 423
lexical_vars (353)
    on left: 435 436, on right: 421 423
lexical_var_list (354)
    on left: 437 438 439 440, on right: 436 437 438
function_call (355)
    on left: 442 444 446 448 450 452 454 456, on right: 586 589
@78 (356)
    on left: 441, on right: 442
@79 (357)
    on left: 443, on right: 444
@80 (358)
    on left: 445, on right: 446
@81 (359)
    on left: 447, on right: 448
$@82 (360)
    on left: 449, on right: 450
$@83 (361)
    on left: 451, on right: 452
$@84 (362)
    on left: 453, on right: 454
$@85 (363)
    on left: 455, on right: 456
class_name (364)
    on left: 457 458 459 460, on right: 448 450 464 493 581 655 657
    658
fully_qualified_class_name (365)
    on left: 461 462 463, on right: 157 167 188 194 195 250 278 279
    289 290 293
class_name_reference (366)
    on left: 464 465, on right: 337 343 393
dynamic_class_name_reference (367)
    on left: 468 469, on right: 465
$@86 (368)
    on left: 466, on right: 468
$@87 (369)
    on left: 467, on right: 468
dynamic_class_name_variable_properties (370)
    on left: 470 471, on right: 468 470
dynamic_class_name_variable_property (371)
    on left: 472, on right: 470
exit_expr (372)
    on left: 473 474 475, on right: 411
backticks_expr (373)
    on left: 476 477 478, on right: 417
ctor_arguments (374)
    on left: 479 480, on right: 337 343
common_scalar (375)
    on left: 481 482 483 484 485 486 487 488 489 490 491 492, on right:
    113 495 545
static_class_constant (376)
    on left: 493, on right: 502
static_scalar (377)
    on left: 494, on right: 39 40 206 207 246 266 268 313 315 316 317
static_scalar_value (378)
    on left: 495 496 497 498 499 500 501 502 503 504, on right: 494
    505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520
    521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536
    537 553 554 555 556
static_operation (379)
    on left: 505 506 507 508 509 510 511 512 513 514 515 516 517 518
    519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534
    535 536 537, on right: 504
general_constant (380)
    on left: 538 539 540 541, on right: 431 543
scalar (381)
    on left: 542 543 544 545 546 547 548, on right: 414
static_array_pair_list (382)
    on left: 549 550, on right: 500 501
possible_comma (383)
    on left: 551 552, on right: 550 619
non_empty_static_array_pair_list (384)
    on left: 553 554 555 556, on right: 550 553 554
expr (385)
    on left: 557 558, on right: 71 73 82 96 109 116 118 128 129 135
    138 141 148 151 214 226 228 259 264 318 319 323 324 339 340 344
    345 346 347 348 349 350 351 352 353 354 355 356 362 364 366 368
    369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384
    385 386 387 388 389 390 391 392 393 400 402 404 405 406 407 408
    409 410 413 418 426 427 559 596 599 601 606 609 620 621 622 623
    624 626 636 637 645 646 647 648 649
parenthesis_expr (386)
    on left: 559 560, on right: 54 57 60 63 69 223 231 394 475
r_variable (387)
    on left: 561, on right: 101 102 263 557
w_variable (388)
    on left: 562, on right: 258 624 625 626 627
rw_variable (389)
    on left: 563, on right: 357 358 359 360
variable (390)
    on left: 566 567, on right: 76 86 170 198 199 257 340 341 343 345
    346 347 348 349 350 351 352 353 354 355 356 425 427 561 562 563
    614 638 643 653
$@88 (391)
    on left: 564, on right: 566
$@89 (392)
    on left: 565, on right: 566
variable_properties (393)
    on left: 568 569, on right: 566 568
variable_property (394)
    on left: 571, on right: 325 326 568
$@90 (395)
    on left: 570, on right: 571
array_method_dereference (396)
    on left: 572 573, on right: 572 577
method (397)
    on left: 575, on right: 573 576
@91 (398)
    on left: 574, on right: 575
method_or_not (399)
    on left: 576 577 578, on right: 566 571
variable_without_objects (400)
    on left: 579 580, on right: 450 454 456 581 582 604
static_member (401)
    on left: 581 582, on right: 592
variable_class_name (402)
    on left: 583, on right: 452 454 582 656
array_function_dereference (403)
    on left: 584 586, on right: 584 588
$@92 (404)
    on left: 585, on right: 586
base_variable_with_function_calls (405)
    on left: 587 588 589, on right: 566 567
base_variable (406)
    on left: 590 591 592, on right: 468 469 587
tpl_base_variable (407)
    on left: 593 594, on right: 112
reference_variable (408)
    on left: 595 596 597, on right: 579 580 583 590 591 593 594 595
    596
compound_variable (409)
    on left: 598 599, on right: 597
dim_offset (410)
    on left: 600 601, on right: 327 328 428 429 430 431 572 573 584
    586 595 605
object_property (411)
    on left: 602 604, on right: 468 472 566 571
$@93 (412)
    on left: 603, on right: 604
object_dim_list (413)
    on left: 605 606 607, on right: 602 605 606
variable_name (414)
    on left: 608 609, on right: 448 452 607
simple_indirect_reference (415)
    on left: 610 611, on right: 580 591 594 611
assignment_list (416)
    on left: 612 613, on right: 339 612 616
assignment_list_element (417)
    on left: 614 616 617, on right: 612 613
$@94 (418)
    on left: 615, on right: 616
array_pair_list (419)
    on left: 618 619, on right: 114 432 433
non_empty_array_pair_list (420)
    on left: 620 621 622 623 624 625 626 627, on right: 619 620 621
    624 625
encaps_list (421)
    on left: 628 629 630 631, on right: 123 478 546 547 628 629
encaps_var (422)
    on left: 632 634 635 636 637 638, on right: 628 630 631
$@95 (423)
    on left: 633, on right: 634
encaps_var_offset (424)
    on left: 639 640 641, on right: 634
internal_functions_in_yacc (425)
    on left: 642 643 644 645 646 647 648 649, on right: 403
isset_variables (426)
    on left: 650 652, on right: 642 652
$@96 (427)
    on left: 651, on right: 652
isset_variable (428)
    on left: 653 654, on right: 650 652
class_constant (429)
    on left: 655 656, on right: 538
static_class_name_scalar (430)
    on left: 657, on right: 496
class_name_scalar (431)
    on left: 658, on right: 544


State 0

    0 $accept: . start "end of file"

    $default  reduce using rule 4 (top_statement_list)

    start               go to state 1
    top_statement_list  go to state 2


State 1

    0 $accept: start . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 start: top_statement_list .
    3 top_statement_list: top_statement_list . $@1 top_statement

    "end of file"  reduce using rule 1 (start)
    $default       reduce using rule 2 ($@1)

    $@1  go to state 4


State 3

    0 $accept: start "end of file" .

    $default  accept


State 4

    3 top_statement_list: top_statement_list $@1 . top_statement

    "require_once (T_REQUIRE_ONCE)"                         shift, and go to state 5
    "require (T_REQUIRE)"                                   shift, and go to state 6
    "eval (T_EVAL)"                                         shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"                         shift, and go to state 8
    "include (T_INCLUDE)"                                   shift, and go to state 9
    "print (T_PRINT)"                                       shift, and go to state 10
    "yield (T_YIELD)"                                       shift, and go to state 11
    '+'                                                     shift, and go to state 12
    '-'                                                     shift, and go to state 13
    '!'                                                     shift, and go to state 14
    '~'                                                     shift, and go to state 15
    '@'                                                     shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                                shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                                  shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                              shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                                shift, and go to state 20
    "(string) (T_STRING_CAST)"                              shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                              shift, and go to state 22
    "(int) (T_INT_CAST)"                                    shift, and go to state 23
    "-- (T_DEC)"                                            shift, and go to state 24
    "++ (T_INC)"                                            shift, and go to state 25
    '['                                                     shift, and go to state 26
    "clone (T_CLONE)"                                       shift, and go to state 27
    "new (T_NEW)"                                           shift, and go to state 28
    "exit (T_EXIT)"                                         shift, and go to state 29
    "if (T_IF)"                                             shift, and go to state 30
    "integer number (T_LNUMBER)"                            shift, and go to state 31
    "floating-point number (T_DNUMBER)"                     shift, and go to state 32
    "identifier (T_STRING)"                                 shift, and go to state 33
    "variable name (T_STRING_VARNAME)"                      shift, and go to state 34
    "variable (T_VARIABLE)"                                 shift, and go to state 35
    T_INLINE_HTML                                           shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"            shift, and go to state 37
    "echo (T_ECHO)"                                         shift, and go to state 38
    "do (T_DO)"                                             shift, and go to state 39
    "while (T_WHILE)"                                       shift, and go to state 40
    "for (T_FOR)"                                           shift, and go to state 41
    "foreach (T_FOREACH)"                                   shift, and go to state 42
    "declare (T_DECLARE)"                                   shift, and go to state 43
    "switch (T_SWITCH)"                                     shift, and go to state 44
    "break (T_BREAK)"                                       shift, and go to state 45
    "continue (T_CONTINUE)"                                 shift, and go to state 46
    "goto (T_GOTO)"                                         shift, and go to state 47
    "function (T_FUNCTION)"                                 shift, and go to state 48
    "const (T_CONST)"                                       shift, and go to state 49
    "return (T_RETURN)"                                     shift, and go to state 50
    "try (T_TRY)"                                           shift, and go to state 51
    "throw (T_THROW)"                                       shift, and go to state 52
    "use (T_USE)"                                           shift, and go to state 53
    "global (T_GLOBAL)"                                     shift, and go to state 54
    "final (T_FINAL)"                                       shift, and go to state 55
    "abstract (T_ABSTRACT)"                                 shift, and go to state 56
    "static (T_STATIC)"                                     shift, and go to state 57
    "unset (T_UNSET)"                                       shift, and go to state 58
    "isset (T_ISSET)"                                       shift, and go to state 59
    "empty (T_EMPTY)"                                       shift, and go to state 60
    "__halt_compiler (T_HALT_COMPILER)"                     shift, and go to state 61
    "class (T_CLASS)"                                       shift, and go to state 62
    "trait (T_TRAIT)"                                       shift, and go to state 63
    "interface (T_INTERFACE)"                               shift, and go to state 64
    "list (T_LIST)"                                         shift, and go to state 65
    "array (T_ARRAY)"                                       shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                                 shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                                 shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                               shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                               shift, and go to state 70
    "__LINE__ (T_LINE)"                                     shift, and go to state 71
    "__FILE__ (T_FILE)"                                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"                       shift, and go to state 73
    "namespace (T_NAMESPACE)"                               shift, and go to state 74
    "__NAMESPACE__ (T_NS_C)"                                shift, and go to state 75
    "__DIR__ (T_DIR)"                                       shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                                   shift, and go to state 77
    "tpl left delim (T_START_TPL)"                          shift, and go to state 78
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81
    '('                                                     shift, and go to state 82
    ';'                                                     shift, and go to state 83
    '{'                                                     shift, and go to state 84
    '$'                                                     shift, and go to state 85
    '`'                                                     shift, and go to state 86
    '"'                                                     shift, and go to state 87

    namespace_name                           go to state 88
    top_statement                            go to state 89
    constant_declaration                     go to state 90
    statement                                go to state 91
    unticked_statement                       go to state 92
    tpl_statement                            go to state 93
    function_declaration_statement           go to state 94
    class_declaration_statement              go to state 95
    unticked_function_declaration_statement  go to state 96
    unticked_class_declaration_statement     go to state 97
    class_entry_type                         go to state 98
    interface_entry                          go to state 99
    new_expr                                 go to state 100
    expr_without_variable                    go to state 101
    yield_expr                               go to state 102
    combined_scalar_offset                   go to state 103
    combined_scalar                          go to state 104
    function                                 go to state 105
    function_call                            go to state 106
    class_name                               go to state 107
    common_scalar                            go to state 108
    general_constant                         go to state 109
    scalar                                   go to state 110
    expr                                     go to state 111
    parenthesis_expr                         go to state 112
    r_variable                               go to state 113
    rw_variable                              go to state 114
    variable                                 go to state 115
    variable_without_objects                 go to state 116
    static_member                            go to state 117
    variable_class_name                      go to state 118
    array_function_dereference               go to state 119
    base_variable_with_function_calls        go to state 120
    base_variable                            go to state 121
    reference_variable                       go to state 122
    compound_variable                        go to state 123
    simple_indirect_reference                go to state 124
    internal_functions_in_yacc               go to state 125
    class_constant                           go to state 126
    class_name_scalar                        go to state 127


State 5

  649 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 133
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 6

  648 internal_functions_in_yacc: "require (T_REQUIRE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 134
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 7

  647 internal_functions_in_yacc: "eval (T_EVAL)" . '(' expr ')'

    '('  shift, and go to state 135


State 8

  646 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 136
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 9

  645 internal_functions_in_yacc: "include (T_INCLUDE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 137
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 10

  418 expr_without_variable: "print (T_PRINT)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 138
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 11

  419 expr_without_variable: "yield (T_YIELD)" .
  424 yield_expr: "yield (T_YIELD)" . expr_without_variable
  425           | "yield (T_YIELD)" . variable
  426           | "yield (T_YIELD)" . expr "=> (T_DOUBLE_ARROW)" expr_without_variable
  427           | "yield (T_YIELD)" . expr "=> (T_DOUBLE_ARROW)" variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 419 (expr_without_variable)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 139
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 140
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 141
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 12

  381 expr_without_variable: '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 142
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 13

  382 expr_without_variable: '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 143
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 14

  383 expr_without_variable: '!' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 144
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 15

  384 expr_without_variable: '~' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 145
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 16

  413 expr_without_variable: '@' . $@75 expr

    $default  reduce using rule 412 ($@75)

    $@75  go to state 146


State 17

  410 expr_without_variable: "(unset) (T_UNSET_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 147
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 18

  409 expr_without_variable: "(bool) (T_BOOL_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 148
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 19

  408 expr_without_variable: "(object) (T_OBJECT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 149
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 20

  407 expr_without_variable: "(array) (T_ARRAY_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 150
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 21

  406 expr_without_variable: "(string) (T_STRING_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 151
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 22

  405 expr_without_variable: "(double) (T_DOUBLE_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 152
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 23

  404 expr_without_variable: "(int) (T_INT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 153
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 24

  360 expr_without_variable: "-- (T_DEC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    rw_variable                        go to state 159
    variable                           go to state 160
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 25

  358 expr_without_variable: "++ (T_INC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    rw_variable                        go to state 162
    variable                           go to state 160
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 26

  433 combined_scalar: '[' . array_pair_list ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '&'                                           shift, and go to state 163
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 618 (array_pair_list)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 164
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    array_pair_list                    go to state 165
    non_empty_array_pair_list          go to state 166
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 27

  344 expr_without_variable: "clone (T_CLONE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 167
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 28

  337 new_expr: "new (T_NEW)" . class_name_reference $@64 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 168
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 169
    '$'                        shift, and go to state 85

    namespace_name                go to state 170
    class_name                    go to state 171
    class_name_reference          go to state 172
    dynamic_class_name_reference  go to state 173
    static_member                 go to state 117
    variable_class_name           go to state 174
    base_variable                 go to state 175
    reference_variable            go to state 176
    compound_variable             go to state 123
    simple_indirect_reference     go to state 177


State 29

  411 expr_without_variable: "exit (T_EXIT)" . exit_expr

    '('  shift, and go to state 178

    $default  reduce using rule 473 (exit_expr)

    exit_expr         go to state 179
    parenthesis_expr  go to state 180


State 30

   54 unticked_statement: "if (T_IF)" . parenthesis_expr $@5 statement $@6 elseif_list else_single
   57                   | "if (T_IF)" . parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    '('  shift, and go to state 181

    parenthesis_expr  go to state 182


State 31

  481 common_scalar: "integer number (T_LNUMBER)" .

    $default  reduce using rule 481 (common_scalar)


State 32

  482 common_scalar: "floating-point number (T_DNUMBER)" .

    $default  reduce using rule 482 (common_scalar)


State 33

    5 namespace_name: "identifier (T_STRING)" .
   50 statement: "identifier (T_STRING)" . ':'

    ':'  shift, and go to state 183

    $default  reduce using rule 5 (namespace_name)


State 34

  542 scalar: "variable name (T_STRING_VARNAME)" .

    $default  reduce using rule 542 (scalar)


State 35

  598 compound_variable: "variable (T_VARIABLE)" .

    $default  reduce using rule 598 (compound_variable)


State 36

   81 unticked_statement: T_INLINE_HTML .

    $default  reduce using rule 81 (unticked_statement)


State 37

  430 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" . '[' dim_offset ']'
  483 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    '['  shift, and go to state 184

    $default  reduce using rule 483 (common_scalar)


State 38

   80 unticked_statement: "echo (T_ECHO)" . echo_expr_list ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    echo_expr_list                     go to state 185
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 186
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 39

   63 unticked_statement: "do (T_DO)" . $@11 statement "while (T_WHILE)" $@12 parenthesis_expr ';'

    $default  reduce using rule 61 ($@11)

    $@11  go to state 187


State 40

   60 unticked_statement: "while (T_WHILE)" . $@9 parenthesis_expr @10 while_statement

    $default  reduce using rule 58 ($@9)

    $@9  go to state 188


State 41

   67 unticked_statement: "for (T_FOR)" . '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    '('  shift, and go to state 189


State 42

   86 unticked_statement: "foreach (T_FOREACH)" . '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement
   89                   | "foreach (T_FOREACH)" . '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    '('  shift, and go to state 190


State 43

   91 unticked_statement: "declare (T_DECLARE)" . $@21 '(' declare_list ')' declare_statement

    $default  reduce using rule 90 ($@21)

    $@21  go to state 191


State 44

   69 unticked_statement: "switch (T_SWITCH)" . parenthesis_expr $@16 switch_case_list

    '('  shift, and go to state 181

    parenthesis_expr  go to state 192


State 45

   70 unticked_statement: "break (T_BREAK)" . ';'
   71                   | "break (T_BREAK)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 193
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 194
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 46

   72 unticked_statement: "continue (T_CONTINUE)" . ';'
   73                   | "continue (T_CONTINUE)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 195
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 196
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 47

   97 unticked_statement: "goto (T_GOTO)" . "identifier (T_STRING)" ';'

    "identifier (T_STRING)"  shift, and go to state 197


State 48

  434 function: "function (T_FUNCTION)" .

    $default  reduce using rule 434 (function)


State 49

   40 constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 198


State 50

   74 unticked_statement: "return (T_RETURN)" . ';'
   75                   | "return (T_RETURN)" . expr_without_variable ';'
   76                   | "return (T_RETURN)" . variable ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 199
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 200
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 202
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 51

   95 unticked_statement: "try (T_TRY)" . $@22 '{' inner_statement_list '}' catch_statement $@23 finally_statement

    $default  reduce using rule 93 ($@22)

    $@22  go to state 203


State 52

   96 unticked_statement: "throw (T_THROW)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 204
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 53

   16 top_statement: "use (T_USE)" . use_declarations ';'
   17              | "use (T_USE)" . "function (T_FUNCTION)" use_function_declarations ';'
   18              | "use (T_USE)" . "const (T_CONST)" use_const_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 129
    "function (T_FUNCTION)"  shift, and go to state 205
    "const (T_CONST)"        shift, and go to state 206
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 207

    namespace_name    go to state 208
    use_declarations  go to state 209
    use_declaration   go to state 210


State 54

   78 unticked_statement: "global (T_GLOBAL)" . global_var_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 211
    '$'                      shift, and go to state 212

    global_var_list  go to state 213
    global_var       go to state 214


State 55

  186 class_entry_type: "final (T_FINAL)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 215


State 56

  184 class_entry_type: "abstract (T_ABSTRACT)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 216


State 57

   79 unticked_statement: "static (T_STATIC)" . static_var_list ';'
  423 expr_without_variable: "static (T_STATIC)" . function is_reference @77 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'
  457 class_name: "static (T_STATIC)" .

    "variable (T_VARIABLE)"  shift, and go to state 217
    "function (T_FUNCTION)"  shift, and go to state 48

    $default  reduce using rule 457 (class_name)

    static_var_list  go to state 218
    function         go to state 219


State 58

   83 unticked_statement: "unset (T_UNSET)" . '(' unset_variables ')' ';'

    '('  shift, and go to state 220


State 59

  642 internal_functions_in_yacc: "isset (T_ISSET)" . '(' isset_variables ')'

    '('  shift, and go to state 221


State 60

  643 internal_functions_in_yacc: "empty (T_EMPTY)" . '(' variable ')'
  644                           | "empty (T_EMPTY)" . '(' expr_without_variable ')'

    '('  shift, and go to state 222


State 61

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 223


State 62

  183 class_entry_type: "class (T_CLASS)" .

    $default  reduce using rule 183 (class_entry_type)


State 63

  185 class_entry_type: "trait (T_TRAIT)" .

    $default  reduce using rule 185 (class_entry_type)


State 64

  189 interface_entry: "interface (T_INTERFACE)" .

    $default  reduce using rule 189 (interface_entry)


State 65

  339 expr_without_variable: "list (T_LIST)" . '(' $@65 assignment_list ')' '=' expr

    '('  shift, and go to state 224


State 66

  432 combined_scalar: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 225


State 67

  548 scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 548 (scalar)


State 68

  487 common_scalar: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 487 (common_scalar)


State 69

  488 common_scalar: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 488 (common_scalar)


State 70

  489 common_scalar: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 489 (common_scalar)


State 71

  484 common_scalar: "__LINE__ (T_LINE)" .

    $default  reduce using rule 484 (common_scalar)


State 72

  485 common_scalar: "__FILE__ (T_FILE)" .

    $default  reduce using rule 485 (common_scalar)


State 73

  491 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  492              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"
  547 scalar: "heredoc start (T_START_HEREDOC)" . encaps_list "heredoc end (T_END_HEREDOC)"

    "variable (T_VARIABLE)"                                     shift, and go to state 226
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 227
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 228
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 230

    encaps_list  go to state 231
    encaps_var   go to state 232


State 74

   11 top_statement: "namespace (T_NAMESPACE)" . namespace_name ';'
   13              | "namespace (T_NAMESPACE)" . namespace_name '{' $@2 top_statement_list '}'
   15              | "namespace (T_NAMESPACE)" . '{' $@3 top_statement_list '}'
  444 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name @79 function_call_parameter_list
  459 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  540 general_constant: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "identifier (T_STRING)"  shift, and go to state 129
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 233
    '{'                      shift, and go to state 234

    namespace_name  go to state 235


State 75

  490 common_scalar: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 490 (common_scalar)


State 76

  486 common_scalar: "__DIR__ (T_DIR)" .

    $default  reduce using rule 486 (common_scalar)


State 77

  446 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name @80 function_call_parameter_list
  460 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  541 general_constant: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 236


State 78

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 79

  127 tpl_statement: "tpl left delim with script (T_START_TPL_WITH_SCRIPT)" . inner_statement_list "tpl right delim (T_END_TPL)"

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 245


State 80

  130 tpl_statement: "{t (T_START_TPL_TRANSLATE)" . tpl_encaps_list "tpl right delim (T_END_TPL)"

    "variable (T_VARIABLE)"                                     shift, and go to state 226
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 246
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"                shift, and go to state 247
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 230

    tpl_encaps_list  go to state 248
    encaps_list      go to state 249
    encaps_var       go to state 232


State 81

  128 tpl_statement: "{include (T_TPL_INCLUDE)" . expr "tpl right delim (T_END_TPL)"
  129              | "{include (T_TPL_INCLUDE)" . "attr file (T_ATTR_FILE)" '=' expr "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    "attr file (T_ATTR_FILE)"                     shift, and go to state 250
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 251
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 82

  397 expr_without_variable: '(' . new_expr ')' @71 instance_call
  559 parenthesis_expr: '(' . expr ')'
  560                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 252
    expr_without_variable              go to state 101
    yield_expr                         go to state 253
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 254
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 83

   92 unticked_statement: ';' .

    $default  reduce using rule 92 (unticked_statement)


State 84

   51 unticked_statement: '{' . inner_statement_list '}'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 255


State 85

  599 compound_variable: '$' . '{' expr '}'
  610 simple_indirect_reference: '$' .

    '{'  shift, and go to state 256

    $default  reduce using rule 610 (simple_indirect_reference)


State 86

  417 expr_without_variable: '`' . backticks_expr '`'

    "variable (T_VARIABLE)"                                     shift, and go to state 226
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 257
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 230

    $default  reduce using rule 476 (backticks_expr)

    backticks_expr  go to state 258
    encaps_list     go to state 259
    encaps_var      go to state 232


State 87

  546 scalar: '"' . encaps_list '"'

    "variable (T_VARIABLE)"                                     shift, and go to state 226
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 260
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 230

    encaps_list  go to state 261
    encaps_var   go to state 232


State 88

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  442 function_call: namespace_name . @78 function_call_parameter_list
  458 class_name: namespace_name .
  539 general_constant: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 458 (class_name)
    '('                            reduce using rule 441 (@78)
    $default                       reduce using rule 539 (general_constant)

    @78  go to state 263


State 89

    3 top_statement_list: top_statement_list $@1 top_statement .

    $default  reduce using rule 3 (top_statement_list)


State 90

   19 top_statement: constant_declaration . ';'
   39 constant_declaration: constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 264
    ';'  shift, and go to state 265


State 91

    7 top_statement: statement .

    $default  reduce using rule 7 (top_statement)


State 92

   49 statement: unticked_statement .

    $default  reduce using rule 49 (statement)


State 93

   20 top_statement: tpl_statement .

    $default  reduce using rule 20 (top_statement)


State 94

    8 top_statement: function_declaration_statement .

    $default  reduce using rule 8 (top_statement)


State 95

    9 top_statement: class_declaration_statement .

    $default  reduce using rule 9 (top_statement)


State 96

  171 function_declaration_statement: unticked_function_declaration_statement .

    $default  reduce using rule 171 (function_declaration_statement)


State 97

  172 class_declaration_statement: unticked_class_declaration_statement .

    $default  reduce using rule 172 (class_declaration_statement)


State 98

  180 unticked_class_declaration_statement: class_entry_type . "identifier (T_STRING)" extends_from $@51 implements_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 266


State 99

  182 unticked_class_declaration_statement: interface_entry . "identifier (T_STRING)" $@52 interface_extends_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 267


State 100

  395 expr_without_variable: new_expr .

    $default  reduce using rule 395 (expr_without_variable)


State 101

  558 expr: expr_without_variable .

    $default  reduce using rule 558 (expr)


State 102

   77 unticked_statement: yield_expr . ';'

    ';'  shift, and go to state 268


State 103

  415 expr_without_variable: combined_scalar_offset .
  429 combined_scalar_offset: combined_scalar_offset . '[' dim_offset ']'

    '['  shift, and go to state 269

    $default  reduce using rule 415 (expr_without_variable)


State 104

  416 expr_without_variable: combined_scalar .
  428 combined_scalar_offset: combined_scalar . '[' dim_offset ']'

    '['  shift, and go to state 270

    $default  reduce using rule 416 (expr_without_variable)


State 105

  178 unticked_function_declaration_statement: function . is_reference "identifier (T_STRING)" $@50 '(' parameter_list ')' '{' inner_statement_list '}'
  421 expr_without_variable: function . is_reference @76 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 271

    $default  reduce using rule 173 (is_reference)

    is_reference  go to state 272


State 106

  586 array_function_dereference: function_call . $@92 '[' dim_offset ']'
  589 base_variable_with_function_calls: function_call .

    '['       reduce using rule 585 ($@92)
    $default  reduce using rule 589 (base_variable_with_function_calls)

    $@92  go to state 273


State 107

  448 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @81 function_call_parameter_list
  450              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@82 function_call_parameter_list
  581 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  655 class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  658 class_name_scalar: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 274


State 108

  545 scalar: common_scalar .

    $default  reduce using rule 545 (scalar)


State 109

  431 combined_scalar_offset: general_constant . '[' dim_offset ']'
  543 scalar: general_constant .

    '['  shift, and go to state 275

    $default  reduce using rule 543 (scalar)


State 110

  414 expr_without_variable: scalar .

    $default  reduce using rule 414 (expr_without_variable)


State 111

   82 unticked_statement: expr . ';'
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    ';'                           shift, and go to state 302


State 112

  394 expr_without_variable: parenthesis_expr .

    $default  reduce using rule 394 (expr_without_variable)


State 113

  557 expr: r_variable .

    $default  reduce using rule 557 (expr)


State 114

  357 expr_without_variable: rw_variable . "++ (T_INC)"
  359                      | rw_variable . "-- (T_DEC)"

    "-- (T_DEC)"  shift, and go to state 303
    "++ (T_INC)"  shift, and go to state 304


State 115

  340 expr_without_variable: variable . '=' expr
  341                      | variable . '=' '&' variable
  343                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  345                      | variable . "+= (T_PLUS_EQUAL)" expr
  346                      | variable . "-= (T_MINUS_EQUAL)" expr
  347                      | variable . "*= (T_MUL_EQUAL)" expr
  348                      | variable . "**= (T_POW_EQUAL)" expr
  349                      | variable . "/= (T_DIV_EQUAL)" expr
  350                      | variable . ".= (T_CONCAT_EQUAL)" expr
  351                      | variable . "%= (T_MOD_EQUAL)" expr
  352                      | variable . "&= (T_AND_EQUAL)" expr
  353                      | variable . "|= (T_OR_EQUAL)" expr
  354                      | variable . "^= (T_XOR_EQUAL)" expr
  355                      | variable . "<<= (T_SL_EQUAL)" expr
  356                      | variable . ">>= (T_SR_EQUAL)" expr
  561 r_variable: variable .
  563 rw_variable: variable .

    '='                    shift, and go to state 305
    "**= (T_POW_EQUAL)"    shift, and go to state 306
    ">>= (T_SR_EQUAL)"     shift, and go to state 307
    "<<= (T_SL_EQUAL)"     shift, and go to state 308
    "^= (T_XOR_EQUAL)"     shift, and go to state 309
    "|= (T_OR_EQUAL)"      shift, and go to state 310
    "&= (T_AND_EQUAL)"     shift, and go to state 311
    "%= (T_MOD_EQUAL)"     shift, and go to state 312
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 313
    "/= (T_DIV_EQUAL)"     shift, and go to state 314
    "*= (T_MUL_EQUAL)"     shift, and go to state 315
    "-= (T_MINUS_EQUAL)"   shift, and go to state 316
    "+= (T_PLUS_EQUAL)"    shift, and go to state 317

    "-- (T_DEC)"  reduce using rule 563 (rw_variable)
    "++ (T_INC)"  reduce using rule 563 (rw_variable)
    $default      reduce using rule 561 (r_variable)


State 116

  456 function_call: variable_without_objects . $@85 function_call_parameter_list

    $default  reduce using rule 455 ($@85)

    $@85  go to state 318


State 117

  592 base_variable: static_member .

    $default  reduce using rule 592 (base_variable)


State 118

  452 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@83 function_call_parameter_list
  454              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@84 function_call_parameter_list
  582 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  656 class_constant: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 319


State 119

  584 array_function_dereference: array_function_dereference . '[' dim_offset ']'
  588 base_variable_with_function_calls: array_function_dereference .

    '['  shift, and go to state 320

    $default  reduce using rule 588 (base_variable_with_function_calls)


State 120

  566 variable: base_variable_with_function_calls . "-> (T_OBJECT_OPERATOR)" $@88 object_property $@89 method_or_not variable_properties
  567         | base_variable_with_function_calls .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 321

    $default  reduce using rule 567 (variable)


State 121

  587 base_variable_with_function_calls: base_variable .

    $default  reduce using rule 587 (base_variable_with_function_calls)


State 122

  579 variable_without_objects: reference_variable .
  583 variable_class_name: reference_variable .
  590 base_variable: reference_variable .
  595 reference_variable: reference_variable . '[' dim_offset ']'
  596                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 322
    '{'  shift, and go to state 323

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 583 (variable_class_name)
    '('                            reduce using rule 579 (variable_without_objects)
    $default                       reduce using rule 590 (base_variable)


State 123

  597 reference_variable: compound_variable .

    $default  reduce using rule 597 (reference_variable)


State 124

  580 variable_without_objects: simple_indirect_reference . reference_variable
  591 base_variable: simple_indirect_reference . reference_variable
  611 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 324

    reference_variable  go to state 325
    compound_variable   go to state 123


State 125

  403 expr_without_variable: internal_functions_in_yacc .

    $default  reduce using rule 403 (expr_without_variable)


State 126

  538 general_constant: class_constant .

    $default  reduce using rule 538 (general_constant)


State 127

  544 scalar: class_name_scalar .

    $default  reduce using rule 544 (scalar)


State 128

  419 expr_without_variable: "yield (T_YIELD)" .

    $default  reduce using rule 419 (expr_without_variable)


State 129

    5 namespace_name: "identifier (T_STRING)" .

    $default  reduce using rule 5 (namespace_name)


State 130

  423 expr_without_variable: "static (T_STATIC)" . function is_reference @77 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'
  457 class_name: "static (T_STATIC)" .

    "function (T_FUNCTION)"  shift, and go to state 48

    $default  reduce using rule 457 (class_name)

    function  go to state 219


State 131

  444 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name @79 function_call_parameter_list
  459 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  540 general_constant: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 233


State 132

  421 expr_without_variable: function . is_reference @76 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 271

    $default  reduce using rule 173 (is_reference)

    is_reference  go to state 326


State 133

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  649 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 649 (internal_functions_in_yacc)


State 134

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  648 internal_functions_in_yacc: "require (T_REQUIRE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 648 (internal_functions_in_yacc)


State 135

  647 internal_functions_in_yacc: "eval (T_EVAL)" '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 327
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 136

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  646 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 646 (internal_functions_in_yacc)


State 137

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  645 internal_functions_in_yacc: "include (T_INCLUDE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 645 (internal_functions_in_yacc)


State 138

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  418                      | "print (T_PRINT)" expr .

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 418 (expr_without_variable)


State 139

  424 yield_expr: "yield (T_YIELD)" expr_without_variable .
  558 expr: expr_without_variable .

    ')'       reduce using rule 424 (yield_expr)
    ';'       reduce using rule 424 (yield_expr)
    $default  reduce using rule 558 (expr)


State 140

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  426 yield_expr: "yield (T_YIELD)" expr . "=> (T_DOUBLE_ARROW)" expr_without_variable
  427           | "yield (T_YIELD)" expr . "=> (T_DOUBLE_ARROW)" variable

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 328


State 141

  340 expr_without_variable: variable . '=' expr
  341                      | variable . '=' '&' variable
  343                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  345                      | variable . "+= (T_PLUS_EQUAL)" expr
  346                      | variable . "-= (T_MINUS_EQUAL)" expr
  347                      | variable . "*= (T_MUL_EQUAL)" expr
  348                      | variable . "**= (T_POW_EQUAL)" expr
  349                      | variable . "/= (T_DIV_EQUAL)" expr
  350                      | variable . ".= (T_CONCAT_EQUAL)" expr
  351                      | variable . "%= (T_MOD_EQUAL)" expr
  352                      | variable . "&= (T_AND_EQUAL)" expr
  353                      | variable . "|= (T_OR_EQUAL)" expr
  354                      | variable . "^= (T_XOR_EQUAL)" expr
  355                      | variable . "<<= (T_SL_EQUAL)" expr
  356                      | variable . ">>= (T_SR_EQUAL)" expr
  425 yield_expr: "yield (T_YIELD)" variable .
  561 r_variable: variable .
  563 rw_variable: variable .

    '='                    shift, and go to state 305
    "**= (T_POW_EQUAL)"    shift, and go to state 306
    ">>= (T_SR_EQUAL)"     shift, and go to state 307
    "<<= (T_SL_EQUAL)"     shift, and go to state 308
    "^= (T_XOR_EQUAL)"     shift, and go to state 309
    "|= (T_OR_EQUAL)"      shift, and go to state 310
    "&= (T_AND_EQUAL)"     shift, and go to state 311
    "%= (T_MOD_EQUAL)"     shift, and go to state 312
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 313
    "/= (T_DIV_EQUAL)"     shift, and go to state 314
    "*= (T_MUL_EQUAL)"     shift, and go to state 315
    "-= (T_MINUS_EQUAL)"   shift, and go to state 316
    "+= (T_PLUS_EQUAL)"    shift, and go to state 317

    "-- (T_DEC)"  reduce using rule 563 (rw_variable)
    "++ (T_INC)"  reduce using rule 563 (rw_variable)
    ')'           reduce using rule 425 (yield_expr)
    ';'           reduce using rule 425 (yield_expr)
    $default      reduce using rule 561 (r_variable)


State 142

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  381                      | '+' expr .
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 381 (expr_without_variable)


State 143

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  382                      | '-' expr .
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 382 (expr_without_variable)


State 144

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  383                      | '!' expr .
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    $default  reduce using rule 383 (expr_without_variable)


State 145

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  384                      | '~' expr .
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 384 (expr_without_variable)


State 146

  413 expr_without_variable: '@' $@75 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 329
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 147

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  410                      | "(unset) (T_UNSET_CAST)" expr .

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 410 (expr_without_variable)


State 148

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  409                      | "(bool) (T_BOOL_CAST)" expr .

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 409 (expr_without_variable)


State 149

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  408                      | "(object) (T_OBJECT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 408 (expr_without_variable)


State 150

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  407                      | "(array) (T_ARRAY_CAST)" expr .

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 407 (expr_without_variable)


State 151

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  406                      | "(string) (T_STRING_CAST)" expr .

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 406 (expr_without_variable)


State 152

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  405                      | "(double) (T_DOUBLE_CAST)" expr .

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 405 (expr_without_variable)


State 153

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  404                      | "(int) (T_INT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 404 (expr_without_variable)


State 154

  457 class_name: "static (T_STATIC)" .

    $default  reduce using rule 457 (class_name)


State 155

  444 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name @79 function_call_parameter_list
  459 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 330


State 156

  446 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name @80 function_call_parameter_list
  460 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 331


State 157

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  442 function_call: namespace_name . @78 function_call_parameter_list
  458 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 458 (class_name)
    $default                       reduce using rule 441 (@78)

    @78  go to state 263


State 158

  448 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @81 function_call_parameter_list
  450              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@82 function_call_parameter_list
  581 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 332


State 159

  360 expr_without_variable: "-- (T_DEC)" rw_variable .

    $default  reduce using rule 360 (expr_without_variable)


State 160

  563 rw_variable: variable .

    $default  reduce using rule 563 (rw_variable)


State 161

  452 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@83 function_call_parameter_list
  454              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@84 function_call_parameter_list
  582 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 333


State 162

  358 expr_without_variable: "++ (T_INC)" rw_variable .

    $default  reduce using rule 358 (expr_without_variable)


State 163

  627 non_empty_array_pair_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    w_variable                         go to state 334
    variable                           go to state 335
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 164

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  622 non_empty_array_pair_list: expr . "=> (T_DOUBLE_ARROW)" expr
  623                          | expr .
  626                          | expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 336

    $default  reduce using rule 623 (non_empty_array_pair_list)


State 165

  433 combined_scalar: '[' array_pair_list . ']'

    ']'  shift, and go to state 337


State 166

  619 array_pair_list: non_empty_array_pair_list . possible_comma
  620 non_empty_array_pair_list: non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" expr
  621                          | non_empty_array_pair_list . ',' expr
  624                          | non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  625                          | non_empty_array_pair_list . ',' '&' w_variable

    ','  shift, and go to state 338

    $default  reduce using rule 551 (possible_comma)

    possible_comma  go to state 339


State 167

  344 expr_without_variable: "clone (T_CLONE)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    $default  reduce using rule 344 (expr_without_variable)


State 168

  459 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 340


State 169

  460 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 341


State 170

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  458 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 458 (class_name)


State 171

  464 class_name_reference: class_name .
  581 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 342

    $default  reduce using rule 464 (class_name_reference)


State 172

  337 new_expr: "new (T_NEW)" class_name_reference . $@64 ctor_arguments

    $default  reduce using rule 336 ($@64)

    $@64  go to state 343


State 173

  465 class_name_reference: dynamic_class_name_reference .

    $default  reduce using rule 465 (class_name_reference)


State 174

  582 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 344


State 175

  468 dynamic_class_name_reference: base_variable . "-> (T_OBJECT_OPERATOR)" $@86 object_property $@87 dynamic_class_name_variable_properties
  469                             | base_variable .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 345

    $default  reduce using rule 469 (dynamic_class_name_reference)


State 176

  583 variable_class_name: reference_variable .
  590 base_variable: reference_variable .
  595 reference_variable: reference_variable . '[' dim_offset ']'
  596                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 322
    '{'  shift, and go to state 323

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 583 (variable_class_name)
    $default                       reduce using rule 590 (base_variable)


State 177

  591 base_variable: simple_indirect_reference . reference_variable
  611 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 324

    reference_variable  go to state 346
    compound_variable   go to state 123


State 178

  474 exit_expr: '(' . ')'
  559 parenthesis_expr: '(' . expr ')'
  560                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ')'                                           shift, and go to state 347
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 253
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 254
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 179

  411 expr_without_variable: "exit (T_EXIT)" exit_expr .

    $default  reduce using rule 411 (expr_without_variable)


State 180

  475 exit_expr: parenthesis_expr .

    $default  reduce using rule 475 (exit_expr)


State 181

  559 parenthesis_expr: '(' . expr ')'
  560                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 253
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 254
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 182

   54 unticked_statement: "if (T_IF)" parenthesis_expr . $@5 statement $@6 elseif_list else_single
   57                   | "if (T_IF)" parenthesis_expr . ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    ':'  shift, and go to state 348

    $default  reduce using rule 52 ($@5)

    $@5  go to state 349


State 183

   50 statement: "identifier (T_STRING)" ':' .

    $default  reduce using rule 50 (statement)


State 184

  430 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 351
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 185

   80 unticked_statement: "echo (T_ECHO)" echo_expr_list . ';'
  318 echo_expr_list: echo_expr_list . ',' expr

    ','  shift, and go to state 352
    ';'  shift, and go to state 353


State 186

  319 echo_expr_list: expr .
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 319 (echo_expr_list)


State 187

   63 unticked_statement: "do (T_DO)" $@11 . statement "while (T_WHILE)" $@12 parenthesis_expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 83
    '{'                                           shift, and go to state 84
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    statement                          go to state 354
    unticked_statement                 go to state 92
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 102
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 111
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 188

   60 unticked_statement: "while (T_WHILE)" $@9 . parenthesis_expr @10 while_statement

    '('  shift, and go to state 181

    parenthesis_expr  go to state 355


State 189

   67 unticked_statement: "for (T_FOR)" '(' . for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 320 (for_expr)

    namespace_name                     go to state 88
    for_expr                           go to state 356
    non_empty_for_expr                 go to state 357
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 358
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 190

   86 unticked_statement: "foreach (T_FOREACH)" '(' . variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement
   89                   | "foreach (T_FOREACH)" '(' . expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 359
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 360
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 191

   91 unticked_statement: "declare (T_DECLARE)" $@21 . '(' declare_list ')' declare_statement

    '('  shift, and go to state 361


State 192

   69 unticked_statement: "switch (T_SWITCH)" parenthesis_expr . $@16 switch_case_list

    $default  reduce using rule 68 ($@16)

    $@16  go to state 362


State 193

   70 unticked_statement: "break (T_BREAK)" ';' .

    $default  reduce using rule 70 (unticked_statement)


State 194

   71 unticked_statement: "break (T_BREAK)" expr . ';'
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    ';'                           shift, and go to state 363


State 195

   72 unticked_statement: "continue (T_CONTINUE)" ';' .

    $default  reduce using rule 72 (unticked_statement)


State 196

   73 unticked_statement: "continue (T_CONTINUE)" expr . ';'
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    ';'                           shift, and go to state 364


State 197

   97 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" . ';'

    ';'  shift, and go to state 365


State 198

   40 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 366


State 199

   74 unticked_statement: "return (T_RETURN)" ';' .

    $default  reduce using rule 74 (unticked_statement)


State 200

   75 unticked_statement: "return (T_RETURN)" expr_without_variable . ';'
  558 expr: expr_without_variable .

    ';'  shift, and go to state 367

    $default  reduce using rule 558 (expr)


State 201

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301


State 202

   76 unticked_statement: "return (T_RETURN)" variable . ';'
  340 expr_without_variable: variable . '=' expr
  341                      | variable . '=' '&' variable
  343                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  345                      | variable . "+= (T_PLUS_EQUAL)" expr
  346                      | variable . "-= (T_MINUS_EQUAL)" expr
  347                      | variable . "*= (T_MUL_EQUAL)" expr
  348                      | variable . "**= (T_POW_EQUAL)" expr
  349                      | variable . "/= (T_DIV_EQUAL)" expr
  350                      | variable . ".= (T_CONCAT_EQUAL)" expr
  351                      | variable . "%= (T_MOD_EQUAL)" expr
  352                      | variable . "&= (T_AND_EQUAL)" expr
  353                      | variable . "|= (T_OR_EQUAL)" expr
  354                      | variable . "^= (T_XOR_EQUAL)" expr
  355                      | variable . "<<= (T_SL_EQUAL)" expr
  356                      | variable . ">>= (T_SR_EQUAL)" expr
  561 r_variable: variable .
  563 rw_variable: variable .

    '='                    shift, and go to state 305
    "**= (T_POW_EQUAL)"    shift, and go to state 306
    ">>= (T_SR_EQUAL)"     shift, and go to state 307
    "<<= (T_SL_EQUAL)"     shift, and go to state 308
    "^= (T_XOR_EQUAL)"     shift, and go to state 309
    "|= (T_OR_EQUAL)"      shift, and go to state 310
    "&= (T_AND_EQUAL)"     shift, and go to state 311
    "%= (T_MOD_EQUAL)"     shift, and go to state 312
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 313
    "/= (T_DIV_EQUAL)"     shift, and go to state 314
    "*= (T_MUL_EQUAL)"     shift, and go to state 315
    "-= (T_MINUS_EQUAL)"   shift, and go to state 316
    "+= (T_PLUS_EQUAL)"    shift, and go to state 317
    ';'                    shift, and go to state 368

    "-- (T_DEC)"  reduce using rule 563 (rw_variable)
    "++ (T_INC)"  reduce using rule 563 (rw_variable)
    $default      reduce using rule 561 (r_variable)


State 203

   95 unticked_statement: "try (T_TRY)" $@22 . '{' inner_statement_list '}' catch_statement $@23 finally_statement

    '{'  shift, and go to state 369


State 204

   96 unticked_statement: "throw (T_THROW)" expr . ';'
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    ';'                           shift, and go to state 370


State 205

   17 top_statement: "use (T_USE)" "function (T_FUNCTION)" . use_function_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 129
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 371

    namespace_name             go to state 372
    use_function_declarations  go to state 373
    use_function_declaration   go to state 374


State 206

   18 top_statement: "use (T_USE)" "const (T_CONST)" . use_const_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 129
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 375

    namespace_name          go to state 376
    use_const_declarations  go to state 377
    use_const_declaration   go to state 378


State 207

   25 use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   26                | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 379


State 208

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   23 use_declaration: namespace_name .
   24                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 380
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 23 (use_declaration)


State 209

   16 top_statement: "use (T_USE)" use_declarations . ';'
   21 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 381
    ';'  shift, and go to state 382


State 210

   22 use_declarations: use_declaration .

    $default  reduce using rule 22 (use_declarations)


State 211

  262 global_var: "variable (T_VARIABLE)" .

    $default  reduce using rule 262 (global_var)


State 212

  263 global_var: '$' . r_variable
  264           | '$' . '{' expr '}'

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '{'                        shift, and go to state 383
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    r_variable                         go to state 384
    variable                           go to state 385
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 213

   78 unticked_statement: "global (T_GLOBAL)" global_var_list . ';'
  260 global_var_list: global_var_list . ',' global_var

    ','  shift, and go to state 386
    ';'  shift, and go to state 387


State 214

  261 global_var_list: global_var .

    $default  reduce using rule 261 (global_var_list)


State 215

  186 class_entry_type: "final (T_FINAL)" "class (T_CLASS)" .

    $default  reduce using rule 186 (class_entry_type)


State 216

  184 class_entry_type: "abstract (T_ABSTRACT)" "class (T_CLASS)" .

    $default  reduce using rule 184 (class_entry_type)


State 217

  267 static_var_list: "variable (T_VARIABLE)" .
  268                | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 388

    $default  reduce using rule 267 (static_var_list)


State 218

   79 unticked_statement: "static (T_STATIC)" static_var_list . ';'
  265 static_var_list: static_var_list . ',' "variable (T_VARIABLE)"
  266                | static_var_list . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 389
    ';'  shift, and go to state 390


State 219

  423 expr_without_variable: "static (T_STATIC)" function . is_reference @77 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 271

    $default  reduce using rule 173 (is_reference)

    is_reference  go to state 391


State 220

   83 unticked_statement: "unset (T_UNSET)" '(' . unset_variables ')' ';'

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    unset_variables                    go to state 392
    unset_variable                     go to state 393
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 394
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 221

  642 internal_functions_in_yacc: "isset (T_ISSET)" '(' . isset_variables ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 395
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 396
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    isset_variables                    go to state 397
    isset_variable                     go to state 398
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 222

  643 internal_functions_in_yacc: "empty (T_EMPTY)" '(' . variable ')'
  644                           | "empty (T_EMPTY)" '(' . expr_without_variable ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 399
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 400
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 223

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 401


State 224

  339 expr_without_variable: "list (T_LIST)" '(' . $@65 assignment_list ')' '=' expr

    $default  reduce using rule 338 ($@65)

    $@65  go to state 402


State 225

  432 combined_scalar: "array (T_ARRAY)" '(' . array_pair_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '&'                                           shift, and go to state 163
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 618 (array_pair_list)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 164
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    array_pair_list                    go to state 403
    non_empty_array_pair_list          go to state 166
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 226

  632 encaps_var: "variable (T_VARIABLE)" .
  634           | "variable (T_VARIABLE)" . '[' $@95 encaps_var_offset ']'
  635           | "variable (T_VARIABLE)" . "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"

    '['                       shift, and go to state 404
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 405

    $default  reduce using rule 632 (encaps_var)


State 227

  491 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"
  631 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 226
    "heredoc end (T_END_HEREDOC)"      shift, and go to state 406
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                shift, and go to state 230

    encaps_var  go to state 407


State 228

  492 common_scalar: "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 492 (common_scalar)


State 229

  636 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . expr '}'
  637           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '[' expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 408
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 409
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 230

  638 encaps_var: "{$ (T_CURLY_OPEN)" . variable '}'

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 410
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 231

  547 scalar: "heredoc start (T_START_HEREDOC)" encaps_list . "heredoc end (T_END_HEREDOC)"
  628 encaps_list: encaps_list . encaps_var
  629            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 226
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 411
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 412
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 230

    encaps_var  go to state 413


State 232

  630 encaps_list: encaps_var .

    $default  reduce using rule 630 (encaps_list)


State 233

  444 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name @79 function_call_parameter_list
  459 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  540 general_constant: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 414


State 234

   15 top_statement: "namespace (T_NAMESPACE)" '{' . $@3 top_statement_list '}'

    $default  reduce using rule 14 ($@3)

    $@3  go to state 415


State 235

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   11 top_statement: "namespace (T_NAMESPACE)" namespace_name . ';'
   13              | "namespace (T_NAMESPACE)" namespace_name . '{' $@2 top_statement_list '}'

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262
    ';'                    shift, and go to state 416
    '{'                    shift, and go to state 417


State 236

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  446 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . @80 function_call_parameter_list
  460 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  541 general_constant: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 460 (class_name)
    '('                            reduce using rule 445 (@80)
    $default                       reduce using rule 541 (general_constant)

    @80  go to state 418


State 237

  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" . expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 419
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 238

    5 namespace_name: "identifier (T_STRING)" .
  131 tpl_statement: "tpl left delim (T_START_TPL)" "identifier (T_STRING)" . tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"

    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 420
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 421
    "array (T_ARRAY)"                             shift, and go to state 422
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    '$'                                           shift, and go to state 85

    $default  reduce using rule 5 (namespace_name)

    tpl_inner_tpl_attr_name    go to state 424
    tpl_inner_tpl_attr_anony   go to state 425
    tpl_inner_tpl_attr_list    go to state 426
    common_scalar              go to state 427
    tpl_base_variable          go to state 428
    reference_variable         go to state 429
    compound_variable          go to state 123
    simple_indirect_reference  go to state 430


State 239

  104 tpl_modifier_list: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" . '|' "identifier (T_STRING)" $@24 tpl_modifier_param_list
  430 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" . '[' dim_offset ']'
  483 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    '|'  shift, and go to state 431
    '['  shift, and go to state 184

    $default  reduce using rule 483 (common_scalar)


State 240

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" . '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" "for (T_FOR)" . '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" "for (T_FOR)" . foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    '&'                        shift, and go to state 432
    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '('                        shift, and go to state 433
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    foreach_variable                   go to state 434
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 435
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 241

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" . '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" . expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 436
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 437
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 242

  106 tpl_modifier_list: tpl_modifier_list . '|' "identifier (T_STRING)" $@25 tpl_modifier_param_list
  124 tpl_statement: "tpl left delim (T_START_TPL)" tpl_modifier_list . "tpl right delim (T_END_TPL)"

    '|'                            shift, and go to state 438
    "tpl right delim (T_END_TPL)"  shift, and go to state 439


State 243

  125 tpl_statement: "tpl left delim (T_START_TPL)" expr_without_variable . "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" expr_without_variable . ';' "tpl right delim (T_END_TPL)"
  558 expr: expr_without_variable .

    "tpl right delim (T_END_TPL)"  shift, and go to state 440
    ';'                            shift, and go to state 441

    $default  reduce using rule 558 (expr)


State 244

  101 tpl_modifier_list: r_variable .
  102                  | r_variable . ';'
  557 expr: r_variable .

    ';'  shift, and go to state 442

    '|'                            reduce using rule 101 (tpl_modifier_list)
    "tpl right delim (T_END_TPL)"  reduce using rule 101 (tpl_modifier_list)
    $default                       reduce using rule 557 (expr)


State 245

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  127 tpl_statement: "tpl left delim with script (T_START_TPL_WITH_SCRIPT)" inner_statement_list . "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 443

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 246

  122 tpl_encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  631 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 226
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                shift, and go to state 230

    $default  reduce using rule 122 (tpl_encaps_list)

    encaps_var  go to state 407


State 247

  121 tpl_encaps_list: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 121 (tpl_encaps_list)


State 248

  130 tpl_statement: "{t (T_START_TPL_TRANSLATE)" tpl_encaps_list . "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 445


State 249

  123 tpl_encaps_list: encaps_list .
  628 encaps_list: encaps_list . encaps_var
  629            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 226
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 411
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 230

    $default  reduce using rule 123 (tpl_encaps_list)

    encaps_var  go to state 413


State 250

  129 tpl_statement: "{include (T_TPL_INCLUDE)" "attr file (T_ATTR_FILE)" . '=' expr "tpl right delim (T_END_TPL)"

    '='  shift, and go to state 446


State 251

  128 tpl_statement: "{include (T_TPL_INCLUDE)" expr . "tpl right delim (T_END_TPL)"
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"            shift, and go to state 276
    "xor (T_LOGICAL_XOR)"          shift, and go to state 277
    "and (T_LOGICAL_AND)"          shift, and go to state 278
    '?'                            shift, and go to state 279
    "|| (T_BOOLEAN_OR)"            shift, and go to state 280
    "&& (T_BOOLEAN_AND)"           shift, and go to state 281
    '^'                            shift, and go to state 282
    '&'                            shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"     shift, and go to state 284
    "=== (T_IS_IDENTICAL)"         shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"          shift, and go to state 286
    "== (T_IS_EQUAL)"              shift, and go to state 287
    '<'                            shift, and go to state 288
    '>'                            shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"   shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"   shift, and go to state 291
    ">> (T_SR)"                    shift, and go to state 292
    "<< (T_SL)"                    shift, and go to state 293
    '+'                            shift, and go to state 294
    '-'                            shift, and go to state 295
    '.'                            shift, and go to state 296
    '*'                            shift, and go to state 297
    '/'                            shift, and go to state 298
    '%'                            shift, and go to state 299
    "instanceof (T_INSTANCEOF)"    shift, and go to state 300
    "** (T_POW)"                   shift, and go to state 301
    "tpl right delim (T_END_TPL)"  shift, and go to state 447


State 252

  395 expr_without_variable: new_expr .
  397                      | '(' new_expr . ')' @71 instance_call

    ')'  shift, and go to state 448

    ')'       [reduce using rule 395 (expr_without_variable)]
    $default  reduce using rule 395 (expr_without_variable)


State 253

  560 parenthesis_expr: '(' yield_expr . ')'

    ')'  shift, and go to state 449


State 254

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  559 parenthesis_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    ')'                           shift, and go to state 450


State 255

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
   51 unticked_statement: '{' inner_statement_list . '}'

    '}'  shift, and go to state 451

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 256

  599 compound_variable: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 452
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 257

  477 backticks_expr: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  631 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 226
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                shift, and go to state 230

    $default  reduce using rule 477 (backticks_expr)

    encaps_var  go to state 407


State 258

  417 expr_without_variable: '`' backticks_expr . '`'

    '`'  shift, and go to state 453


State 259

  478 backticks_expr: encaps_list .
  628 encaps_list: encaps_list . encaps_var
  629            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 226
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 411
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 230

    $default  reduce using rule 478 (backticks_expr)

    encaps_var  go to state 413


State 260

  631 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 226
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                shift, and go to state 230

    encaps_var  go to state 407


State 261

  546 scalar: '"' encaps_list . '"'
  628 encaps_list: encaps_list . encaps_var
  629            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 226
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 411
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 229
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 230
    '"'                                                         shift, and go to state 454

    encaps_var  go to state 413


State 262

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 455


State 263

  442 function_call: namespace_name @78 . function_call_parameter_list

    '('  shift, and go to state 456

    function_call_parameter_list  go to state 457


State 264

   39 constant_declaration: constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 458


State 265

   19 top_statement: constant_declaration ';' .

    $default  reduce using rule 19 (top_statement)


State 266

  180 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" . extends_from $@51 implements_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 459

    $default  reduce using rule 187 (extends_from)

    extends_from  go to state 460


State 267

  182 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" . $@52 interface_extends_list '{' class_statement_list '}'

    $default  reduce using rule 181 ($@52)

    $@52  go to state 461


State 268

   77 unticked_statement: yield_expr ';' .

    $default  reduce using rule 77 (unticked_statement)


State 269

  429 combined_scalar_offset: combined_scalar_offset '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 462
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 270

  428 combined_scalar_offset: combined_scalar '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 463
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 271

  174 is_reference: '&' .

    $default  reduce using rule 174 (is_reference)


State 272

  178 unticked_function_declaration_statement: function is_reference . "identifier (T_STRING)" $@50 '(' parameter_list ')' '{' inner_statement_list '}'
  421 expr_without_variable: function is_reference . @76 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 464

    $default  reduce using rule 420 (@76)

    @76  go to state 465


State 273

  586 array_function_dereference: function_call $@92 . '[' dim_offset ']'

    '['  shift, and go to state 466


State 274

  448 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name @81 function_call_parameter_list
  450              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@82 function_call_parameter_list
  581 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  655 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"
  658 class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "class (T_CLASS)"

    "identifier (T_STRING)"  shift, and go to state 467
    "variable (T_VARIABLE)"  shift, and go to state 35
    "class (T_CLASS)"        shift, and go to state 468
    '{'                      shift, and go to state 469
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 470
    reference_variable         go to state 471
    compound_variable          go to state 123
    variable_name              go to state 472
    simple_indirect_reference  go to state 473


State 275

  431 combined_scalar_offset: general_constant '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 474
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 276

  366 expr_without_variable: expr "or (T_LOGICAL_OR)" . $@69 expr

    $default  reduce using rule 365 ($@69)

    $@69  go to state 475


State 277

  369 expr_without_variable: expr "xor (T_LOGICAL_XOR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 476
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 278

  368 expr_without_variable: expr "and (T_LOGICAL_AND)" . $@70 expr

    $default  reduce using rule 367 ($@70)

    $@70  go to state 477


State 279

  400 expr_without_variable: expr '?' . $@72 expr ':' $@73 expr
  402                      | expr '?' . ':' $@74 expr

    ':'  shift, and go to state 478

    $default  reduce using rule 398 ($@72)

    $@72  go to state 479


State 280

  362 expr_without_variable: expr "|| (T_BOOLEAN_OR)" . $@67 expr

    $default  reduce using rule 361 ($@67)

    $@67  go to state 480


State 281

  364 expr_without_variable: expr "&& (T_BOOLEAN_AND)" . $@68 expr

    $default  reduce using rule 363 ($@68)

    $@68  go to state 481


State 282

  371 expr_without_variable: expr '^' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 482
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 283

  370 expr_without_variable: expr '&' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 483
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 284

  386 expr_without_variable: expr "!== (T_IS_NOT_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 484
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 285

  385 expr_without_variable: expr "=== (T_IS_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 485
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 286

  388 expr_without_variable: expr "!= (T_IS_NOT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 486
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 287

  387 expr_without_variable: expr "== (T_IS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 487
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 288

  389 expr_without_variable: expr '<' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 488
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 289

  391 expr_without_variable: expr '>' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 489
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 290

  392 expr_without_variable: expr ">= (T_IS_GREATER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 490
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 291

  390 expr_without_variable: expr "<= (T_IS_SMALLER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 491
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 292

  380 expr_without_variable: expr ">> (T_SR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 492
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 293

  379 expr_without_variable: expr "<< (T_SL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 493
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 294

  373 expr_without_variable: expr '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 494
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 295

  374 expr_without_variable: expr '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 495
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 296

  372 expr_without_variable: expr '.' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 496
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 297

  375 expr_without_variable: expr '*' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 497
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 298

  377 expr_without_variable: expr '/' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 498
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 299

  378 expr_without_variable: expr '%' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 499
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 300

  393 expr_without_variable: expr "instanceof (T_INSTANCEOF)" . class_name_reference

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 168
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 169
    '$'                        shift, and go to state 85

    namespace_name                go to state 170
    class_name                    go to state 171
    class_name_reference          go to state 500
    dynamic_class_name_reference  go to state 173
    static_member                 go to state 117
    variable_class_name           go to state 174
    base_variable                 go to state 175
    reference_variable            go to state 176
    compound_variable             go to state 123
    simple_indirect_reference     go to state 177


State 301

  376 expr_without_variable: expr "** (T_POW)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 501
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 302

   82 unticked_statement: expr ';' .

    $default  reduce using rule 82 (unticked_statement)


State 303

  359 expr_without_variable: rw_variable "-- (T_DEC)" .

    $default  reduce using rule 359 (expr_without_variable)


State 304

  357 expr_without_variable: rw_variable "++ (T_INC)" .

    $default  reduce using rule 357 (expr_without_variable)


State 305

  340 expr_without_variable: variable '=' . expr
  341                      | variable '=' . '&' variable
  343                      | variable '=' . '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '&'                                           shift, and go to state 502
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 503
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 306

  348 expr_without_variable: variable "**= (T_POW_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 504
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 307

  356 expr_without_variable: variable ">>= (T_SR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 505
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 308

  355 expr_without_variable: variable "<<= (T_SL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 506
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 309

  354 expr_without_variable: variable "^= (T_XOR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 507
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 310

  353 expr_without_variable: variable "|= (T_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 508
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 311

  352 expr_without_variable: variable "&= (T_AND_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 509
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 312

  351 expr_without_variable: variable "%= (T_MOD_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 510
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 313

  350 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 511
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 314

  349 expr_without_variable: variable "/= (T_DIV_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 512
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 315

  347 expr_without_variable: variable "*= (T_MUL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 513
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 316

  346 expr_without_variable: variable "-= (T_MINUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 514
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 317

  345 expr_without_variable: variable "+= (T_PLUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 515
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 318

  456 function_call: variable_without_objects $@85 . function_call_parameter_list

    '('  shift, and go to state 456

    function_call_parameter_list  go to state 516


State 319

  452 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name $@83 function_call_parameter_list
  454              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@84 function_call_parameter_list
  582 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  656 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 517
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 469
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 518
    reference_variable         go to state 471
    compound_variable          go to state 123
    variable_name              go to state 519
    simple_indirect_reference  go to state 473


State 320

  584 array_function_dereference: array_function_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 520
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 321

  566 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" . $@88 object_property $@89 method_or_not variable_properties

    $default  reduce using rule 564 ($@88)

    $@88  go to state 521


State 322

  595 reference_variable: reference_variable '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 522
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 323

  596 reference_variable: reference_variable '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 523
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 324

  599 compound_variable: '$' . '{' expr '}'
  611 simple_indirect_reference: simple_indirect_reference '$' .

    '{'  shift, and go to state 256

    $default  reduce using rule 611 (simple_indirect_reference)


State 325

  580 variable_without_objects: simple_indirect_reference reference_variable .
  591 base_variable: simple_indirect_reference reference_variable .
  595 reference_variable: reference_variable . '[' dim_offset ']'
  596                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 322
    '{'  shift, and go to state 323

    '('       reduce using rule 580 (variable_without_objects)
    $default  reduce using rule 591 (base_variable)


State 326

  421 expr_without_variable: function is_reference . @76 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 420 (@76)

    @76  go to state 465


State 327

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  647 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    ')'                           shift, and go to state 524


State 328

  426 yield_expr: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" . expr_without_variable
  427           | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" . variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 525
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 526
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 329

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  413                      | '@' $@75 expr .

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 413 (expr_without_variable)


State 330

  444 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name @79 function_call_parameter_list
  459 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 527


State 331

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  446 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . @80 function_call_parameter_list
  460 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 460 (class_name)
    $default                       reduce using rule 445 (@80)

    @80  go to state 418


State 332

  448 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name @81 function_call_parameter_list
  450              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@82 function_call_parameter_list
  581 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 528
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 469
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 470
    reference_variable         go to state 471
    compound_variable          go to state 123
    variable_name              go to state 472
    simple_indirect_reference  go to state 473


State 333

  452 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name $@83 function_call_parameter_list
  454              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@84 function_call_parameter_list
  582 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 528
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 469
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 518
    reference_variable         go to state 471
    compound_variable          go to state 123
    variable_name              go to state 519
    simple_indirect_reference  go to state 473


State 334

  627 non_empty_array_pair_list: '&' w_variable .

    $default  reduce using rule 627 (non_empty_array_pair_list)


State 335

  562 w_variable: variable .

    $default  reduce using rule 562 (w_variable)


State 336

  622 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" . expr
  626                          | expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '&'                                           shift, and go to state 529
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 530
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 337

  433 combined_scalar: '[' array_pair_list ']' .

    $default  reduce using rule 433 (combined_scalar)


State 338

  552 possible_comma: ',' .
  620 non_empty_array_pair_list: non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" expr
  621                          | non_empty_array_pair_list ',' . expr
  624                          | non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  625                          | non_empty_array_pair_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '&'                                           shift, and go to state 531
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 552 (possible_comma)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 532
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 339

  619 array_pair_list: non_empty_array_pair_list possible_comma .

    $default  reduce using rule 619 (array_pair_list)


State 340

  459 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 533


State 341

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  460 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 460 (class_name)


State 342

  581 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 534
    reference_variable         go to state 471
    compound_variable          go to state 123
    simple_indirect_reference  go to state 473


State 343

  337 new_expr: "new (T_NEW)" class_name_reference $@64 . ctor_arguments

    '('  shift, and go to state 456

    $default  reduce using rule 479 (ctor_arguments)

    function_call_parameter_list  go to state 535
    ctor_arguments                go to state 536


State 344

  582 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 537
    reference_variable         go to state 471
    compound_variable          go to state 123
    simple_indirect_reference  go to state 473


State 345

  468 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" . $@86 object_property $@87 dynamic_class_name_variable_properties

    $default  reduce using rule 466 ($@86)

    $@86  go to state 538


State 346

  591 base_variable: simple_indirect_reference reference_variable .
  595 reference_variable: reference_variable . '[' dim_offset ']'
  596                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 322
    '{'  shift, and go to state 323

    $default  reduce using rule 591 (base_variable)


State 347

  474 exit_expr: '(' ')' .

    $default  reduce using rule 474 (exit_expr)


State 348

   57 unticked_statement: "if (T_IF)" parenthesis_expr ':' . $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 55 ($@7)

    $@7  go to state 539


State 349

   54 unticked_statement: "if (T_IF)" parenthesis_expr $@5 . statement $@6 elseif_list else_single

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 83
    '{'                                           shift, and go to state 84
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    statement                          go to state 540
    unticked_statement                 go to state 92
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 102
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 111
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 350

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  601 dim_offset: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 601 (dim_offset)


State 351

  430 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' dim_offset . ']'

    ']'  shift, and go to state 541


State 352

  318 echo_expr_list: echo_expr_list ',' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 542
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 353

   80 unticked_statement: "echo (T_ECHO)" echo_expr_list ';' .

    $default  reduce using rule 80 (unticked_statement)


State 354

   63 unticked_statement: "do (T_DO)" $@11 statement . "while (T_WHILE)" $@12 parenthesis_expr ';'

    "while (T_WHILE)"  shift, and go to state 543


State 355

   60 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr . @10 while_statement

    $default  reduce using rule 59 (@10)

    @10  go to state 544


State 356

   67 unticked_statement: "for (T_FOR)" '(' for_expr . ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    ';'  shift, and go to state 545


State 357

  321 for_expr: non_empty_for_expr .
  323 non_empty_for_expr: non_empty_for_expr . ',' $@61 expr

    ','  shift, and go to state 546

    $default  reduce using rule 321 (for_expr)


State 358

  324 non_empty_for_expr: expr .
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 324 (non_empty_for_expr)


State 359

   89 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable . "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement
  558 expr: expr_without_variable .

    "as (T_AS)"  shift, and go to state 547

    $default  reduce using rule 558 (expr)


State 360

   86 unticked_statement: "foreach (T_FOREACH)" '(' variable . "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement
  340 expr_without_variable: variable . '=' expr
  341                      | variable . '=' '&' variable
  343                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  345                      | variable . "+= (T_PLUS_EQUAL)" expr
  346                      | variable . "-= (T_MINUS_EQUAL)" expr
  347                      | variable . "*= (T_MUL_EQUAL)" expr
  348                      | variable . "**= (T_POW_EQUAL)" expr
  349                      | variable . "/= (T_DIV_EQUAL)" expr
  350                      | variable . ".= (T_CONCAT_EQUAL)" expr
  351                      | variable . "%= (T_MOD_EQUAL)" expr
  352                      | variable . "&= (T_AND_EQUAL)" expr
  353                      | variable . "|= (T_OR_EQUAL)" expr
  354                      | variable . "^= (T_XOR_EQUAL)" expr
  355                      | variable . "<<= (T_SL_EQUAL)" expr
  356                      | variable . ">>= (T_SR_EQUAL)" expr
  561 r_variable: variable .
  563 rw_variable: variable .

    '='                    shift, and go to state 305
    "**= (T_POW_EQUAL)"    shift, and go to state 306
    ">>= (T_SR_EQUAL)"     shift, and go to state 307
    "<<= (T_SL_EQUAL)"     shift, and go to state 308
    "^= (T_XOR_EQUAL)"     shift, and go to state 309
    "|= (T_OR_EQUAL)"      shift, and go to state 310
    "&= (T_AND_EQUAL)"     shift, and go to state 311
    "%= (T_MOD_EQUAL)"     shift, and go to state 312
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 313
    "/= (T_DIV_EQUAL)"     shift, and go to state 314
    "*= (T_MUL_EQUAL)"     shift, and go to state 315
    "-= (T_MINUS_EQUAL)"   shift, and go to state 316
    "+= (T_PLUS_EQUAL)"    shift, and go to state 317
    "as (T_AS)"            shift, and go to state 548

    "-- (T_DEC)"  reduce using rule 563 (rw_variable)
    "++ (T_INC)"  reduce using rule 563 (rw_variable)
    $default      reduce using rule 561 (r_variable)


State 361

   91 unticked_statement: "declare (T_DECLARE)" $@21 '(' . declare_list ')' declare_statement

    "identifier (T_STRING)"  shift, and go to state 549

    declare_list  go to state 550


State 362

   69 unticked_statement: "switch (T_SWITCH)" parenthesis_expr $@16 . switch_case_list

    ':'  shift, and go to state 551
    '{'  shift, and go to state 552

    switch_case_list  go to state 553


State 363

   71 unticked_statement: "break (T_BREAK)" expr ';' .

    $default  reduce using rule 71 (unticked_statement)


State 364

   73 unticked_statement: "continue (T_CONTINUE)" expr ';' .

    $default  reduce using rule 73 (unticked_statement)


State 365

   97 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" ';' .

    $default  reduce using rule 97 (unticked_statement)


State 366

   40 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 569
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 367

   75 unticked_statement: "return (T_RETURN)" expr_without_variable ';' .

    $default  reduce using rule 75 (unticked_statement)


State 368

   76 unticked_statement: "return (T_RETURN)" variable ';' .

    $default  reduce using rule 76 (unticked_statement)


State 369

   95 unticked_statement: "try (T_TRY)" $@22 '{' . inner_statement_list '}' catch_statement $@23 finally_statement

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 573


State 370

   96 unticked_statement: "throw (T_THROW)" expr ';' .

    $default  reduce using rule 96 (unticked_statement)


State 371

   31 use_function_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   32                         | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 574


State 372

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   29 use_function_declaration: namespace_name .
   30                         | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 575
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 29 (use_function_declaration)


State 373

   17 top_statement: "use (T_USE)" "function (T_FUNCTION)" use_function_declarations . ';'
   27 use_function_declarations: use_function_declarations . ',' use_function_declaration

    ','  shift, and go to state 576
    ';'  shift, and go to state 577


State 374

   28 use_function_declarations: use_function_declaration .

    $default  reduce using rule 28 (use_function_declarations)


State 375

   37 use_const_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   38                      | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 578


State 376

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   35 use_const_declaration: namespace_name .
   36                      | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 579
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 35 (use_const_declaration)


State 377

   18 top_statement: "use (T_USE)" "const (T_CONST)" use_const_declarations . ';'
   33 use_const_declarations: use_const_declarations . ',' use_const_declaration

    ','  shift, and go to state 580
    ';'  shift, and go to state 581


State 378

   34 use_const_declarations: use_const_declaration .

    $default  reduce using rule 34 (use_const_declarations)


State 379

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   25 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   26                | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 25 (use_declaration)


State 380

   24 use_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 583


State 381

   21 use_declarations: use_declarations ',' . use_declaration

    "identifier (T_STRING)"  shift, and go to state 129
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 207

    namespace_name   go to state 208
    use_declaration  go to state 584


State 382

   16 top_statement: "use (T_USE)" use_declarations ';' .

    $default  reduce using rule 16 (top_statement)


State 383

  264 global_var: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 585
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 384

  263 global_var: '$' r_variable .

    $default  reduce using rule 263 (global_var)


State 385

  561 r_variable: variable .

    $default  reduce using rule 561 (r_variable)


State 386

  260 global_var_list: global_var_list ',' . global_var

    "variable (T_VARIABLE)"  shift, and go to state 211
    '$'                      shift, and go to state 212

    global_var  go to state 586


State 387

   78 unticked_statement: "global (T_GLOBAL)" global_var_list ';' .

    $default  reduce using rule 78 (unticked_statement)


State 388

  268 static_var_list: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 587
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 389

  265 static_var_list: static_var_list ',' . "variable (T_VARIABLE)"
  266                | static_var_list ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 588


State 390

   79 unticked_statement: "static (T_STATIC)" static_var_list ';' .

    $default  reduce using rule 79 (unticked_statement)


State 391

  423 expr_without_variable: "static (T_STATIC)" function is_reference . @77 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 422 (@77)

    @77  go to state 589


State 392

   83 unticked_statement: "unset (T_UNSET)" '(' unset_variables . ')' ';'
  169 unset_variables: unset_variables . ',' unset_variable

    ','  shift, and go to state 590
    ')'  shift, and go to state 591


State 393

  168 unset_variables: unset_variable .

    $default  reduce using rule 168 (unset_variables)


State 394

  170 unset_variable: variable .

    $default  reduce using rule 170 (unset_variable)


State 395

  558 expr: expr_without_variable .
  654 isset_variable: expr_without_variable .

    ','       reduce using rule 654 (isset_variable)
    ')'       reduce using rule 654 (isset_variable)
    $default  reduce using rule 558 (expr)


State 396

  340 expr_without_variable: variable . '=' expr
  341                      | variable . '=' '&' variable
  343                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  345                      | variable . "+= (T_PLUS_EQUAL)" expr
  346                      | variable . "-= (T_MINUS_EQUAL)" expr
  347                      | variable . "*= (T_MUL_EQUAL)" expr
  348                      | variable . "**= (T_POW_EQUAL)" expr
  349                      | variable . "/= (T_DIV_EQUAL)" expr
  350                      | variable . ".= (T_CONCAT_EQUAL)" expr
  351                      | variable . "%= (T_MOD_EQUAL)" expr
  352                      | variable . "&= (T_AND_EQUAL)" expr
  353                      | variable . "|= (T_OR_EQUAL)" expr
  354                      | variable . "^= (T_XOR_EQUAL)" expr
  355                      | variable . "<<= (T_SL_EQUAL)" expr
  356                      | variable . ">>= (T_SR_EQUAL)" expr
  561 r_variable: variable .
  563 rw_variable: variable .
  653 isset_variable: variable .

    '='                    shift, and go to state 305
    "**= (T_POW_EQUAL)"    shift, and go to state 306
    ">>= (T_SR_EQUAL)"     shift, and go to state 307
    "<<= (T_SL_EQUAL)"     shift, and go to state 308
    "^= (T_XOR_EQUAL)"     shift, and go to state 309
    "|= (T_OR_EQUAL)"      shift, and go to state 310
    "&= (T_AND_EQUAL)"     shift, and go to state 311
    "%= (T_MOD_EQUAL)"     shift, and go to state 312
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 313
    "/= (T_DIV_EQUAL)"     shift, and go to state 314
    "*= (T_MUL_EQUAL)"     shift, and go to state 315
    "-= (T_MINUS_EQUAL)"   shift, and go to state 316
    "+= (T_PLUS_EQUAL)"    shift, and go to state 317

    ','           reduce using rule 653 (isset_variable)
    "-- (T_DEC)"  reduce using rule 563 (rw_variable)
    "++ (T_INC)"  reduce using rule 563 (rw_variable)
    ')'           reduce using rule 653 (isset_variable)
    $default      reduce using rule 561 (r_variable)


State 397

  642 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables . ')'
  652 isset_variables: isset_variables . ',' $@96 isset_variable

    ','  shift, and go to state 592
    ')'  shift, and go to state 593


State 398

  650 isset_variables: isset_variable .

    $default  reduce using rule 650 (isset_variables)


State 399

  558 expr: expr_without_variable .
  644 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr_without_variable . ')'

    ')'  shift, and go to state 594

    $default  reduce using rule 558 (expr)


State 400

  340 expr_without_variable: variable . '=' expr
  341                      | variable . '=' '&' variable
  343                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  345                      | variable . "+= (T_PLUS_EQUAL)" expr
  346                      | variable . "-= (T_MINUS_EQUAL)" expr
  347                      | variable . "*= (T_MUL_EQUAL)" expr
  348                      | variable . "**= (T_POW_EQUAL)" expr
  349                      | variable . "/= (T_DIV_EQUAL)" expr
  350                      | variable . ".= (T_CONCAT_EQUAL)" expr
  351                      | variable . "%= (T_MOD_EQUAL)" expr
  352                      | variable . "&= (T_AND_EQUAL)" expr
  353                      | variable . "|= (T_OR_EQUAL)" expr
  354                      | variable . "^= (T_XOR_EQUAL)" expr
  355                      | variable . "<<= (T_SL_EQUAL)" expr
  356                      | variable . ">>= (T_SR_EQUAL)" expr
  561 r_variable: variable .
  563 rw_variable: variable .
  643 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable . ')'

    '='                    shift, and go to state 305
    "**= (T_POW_EQUAL)"    shift, and go to state 306
    ">>= (T_SR_EQUAL)"     shift, and go to state 307
    "<<= (T_SL_EQUAL)"     shift, and go to state 308
    "^= (T_XOR_EQUAL)"     shift, and go to state 309
    "|= (T_OR_EQUAL)"      shift, and go to state 310
    "&= (T_AND_EQUAL)"     shift, and go to state 311
    "%= (T_MOD_EQUAL)"     shift, and go to state 312
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 313
    "/= (T_DIV_EQUAL)"     shift, and go to state 314
    "*= (T_MUL_EQUAL)"     shift, and go to state 315
    "-= (T_MINUS_EQUAL)"   shift, and go to state 316
    "+= (T_PLUS_EQUAL)"    shift, and go to state 317
    ')'                    shift, and go to state 595

    "-- (T_DEC)"  reduce using rule 563 (rw_variable)
    "++ (T_INC)"  reduce using rule 563 (rw_variable)
    $default      reduce using rule 561 (r_variable)


State 401

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 596


State 402

  339 expr_without_variable: "list (T_LIST)" '(' $@65 . assignment_list ')' '=' expr

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "list (T_LIST)"            shift, and go to state 597
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    $default  reduce using rule 617 (assignment_list_element)

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 598
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    assignment_list                    go to state 599
    assignment_list_element            go to state 600


State 403

  432 combined_scalar: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 601


State 404

  634 encaps_var: "variable (T_VARIABLE)" '[' . $@95 encaps_var_offset ']'

    $default  reduce using rule 633 ($@95)

    $@95  go to state 602


State 405

  635 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 603


State 406

  491 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 491 (common_scalar)


State 407

  631 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var .

    $default  reduce using rule 631 (encaps_list)


State 408

  542 scalar: "variable name (T_STRING_VARNAME)" .
  637 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '[' expr ']' '}'

    '['  shift, and go to state 604

    $default  reduce using rule 542 (scalar)


State 409

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  636 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    '}'                           shift, and go to state 605


State 410

  638 encaps_var: "{$ (T_CURLY_OPEN)" variable . '}'

    '}'  shift, and go to state 606


State 411

  629 encaps_list: encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .

    $default  reduce using rule 629 (encaps_list)


State 412

  547 scalar: "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 547 (scalar)


State 413

  628 encaps_list: encaps_list encaps_var .

    $default  reduce using rule 628 (encaps_list)


State 414

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  444 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . @79 function_call_parameter_list
  459 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  540 general_constant: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 459 (class_name)
    '('                            reduce using rule 443 (@79)
    $default                       reduce using rule 540 (general_constant)

    @79  go to state 607


State 415

   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 608


State 416

   11 top_statement: "namespace (T_NAMESPACE)" namespace_name ';' .

    $default  reduce using rule 11 (top_statement)


State 417

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' . $@2 top_statement_list '}'

    $default  reduce using rule 12 ($@2)

    $@2  go to state 609


State 418

  446 function_call: "\\ (T_NS_SEPARATOR)" namespace_name @80 . function_call_parameter_list

    '('  shift, and go to state 456

    function_call_parameter_list  go to state 610


State 419

  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" expr . "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"            shift, and go to state 276
    "xor (T_LOGICAL_XOR)"          shift, and go to state 277
    "and (T_LOGICAL_AND)"          shift, and go to state 278
    '?'                            shift, and go to state 279
    "|| (T_BOOLEAN_OR)"            shift, and go to state 280
    "&& (T_BOOLEAN_AND)"           shift, and go to state 281
    '^'                            shift, and go to state 282
    '&'                            shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"     shift, and go to state 284
    "=== (T_IS_IDENTICAL)"         shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"          shift, and go to state 286
    "== (T_IS_EQUAL)"              shift, and go to state 287
    '<'                            shift, and go to state 288
    '>'                            shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"   shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"   shift, and go to state 291
    ">> (T_SR)"                    shift, and go to state 292
    "<< (T_SL)"                    shift, and go to state 293
    '+'                            shift, and go to state 294
    '-'                            shift, and go to state 295
    '.'                            shift, and go to state 296
    '*'                            shift, and go to state 297
    '/'                            shift, and go to state 298
    '%'                            shift, and go to state 299
    "instanceof (T_INSTANCEOF)"    shift, and go to state 300
    "** (T_POW)"                   shift, and go to state 301
    "tpl right delim (T_END_TPL)"  shift, and go to state 611


State 420

  110 tpl_inner_tpl_attr_name: "identifier (T_STRING)" .

    $default  reduce using rule 110 (tpl_inner_tpl_attr_name)


State 421

  111 tpl_inner_tpl_attr_name: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .
  483 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    '='       reduce using rule 111 (tpl_inner_tpl_attr_name)
    $default  reduce using rule 483 (common_scalar)


State 422

  114 tpl_inner_tpl_attr_anony: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 612


State 423

  491 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  492              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"

    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 613
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 228


State 424

  116 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_name . '=' $@27 expr

    '='  shift, and go to state 614


State 425

  119 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_anony .

    $default  reduce using rule 119 (tpl_inner_tpl_attr_list)


State 426

  118 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_list . tpl_inner_tpl_attr_name '=' $@28 expr
  120                        | tpl_inner_tpl_attr_list . tpl_inner_tpl_attr_anony
  131 tpl_statement: "tpl left delim (T_START_TPL)" "identifier (T_STRING)" tpl_inner_tpl_attr_list . "tpl right delim (T_END_TPL)"

    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 420
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 421
    "array (T_ARRAY)"                             shift, and go to state 422
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "tpl right delim (T_END_TPL)"                 shift, and go to state 615
    '$'                                           shift, and go to state 85

    tpl_inner_tpl_attr_name    go to state 616
    tpl_inner_tpl_attr_anony   go to state 617
    common_scalar              go to state 427
    tpl_base_variable          go to state 428
    reference_variable         go to state 429
    compound_variable          go to state 123
    simple_indirect_reference  go to state 430


State 427

  113 tpl_inner_tpl_attr_anony: common_scalar .

    $default  reduce using rule 113 (tpl_inner_tpl_attr_anony)


State 428

  112 tpl_inner_tpl_attr_anony: tpl_base_variable .

    $default  reduce using rule 112 (tpl_inner_tpl_attr_anony)


State 429

  593 tpl_base_variable: reference_variable .
  595 reference_variable: reference_variable . '[' dim_offset ']'
  596                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 322
    '{'  shift, and go to state 323

    $default  reduce using rule 593 (tpl_base_variable)


State 430

  594 tpl_base_variable: simple_indirect_reference . reference_variable
  611 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 324

    reference_variable  go to state 618
    compound_variable   go to state 123


State 431

  104 tpl_modifier_list: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '|' . "identifier (T_STRING)" $@24 tpl_modifier_param_list

    "identifier (T_STRING)"  shift, and go to state 619


State 432

  199 foreach_variable: '&' . variable

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 620
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 433

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' . for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' . foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '&'                                           shift, and go to state 432
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 320 (for_expr)

    namespace_name                     go to state 88
    foreach_variable                   go to state 621
    for_expr                           go to state 622
    non_empty_for_expr                 go to state 357
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 358
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 623
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 434

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable . foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 624

    $default  reduce using rule 196 (foreach_optional_arg)

    foreach_optional_arg  go to state 625


State 435

  198 foreach_variable: variable .

    $default  reduce using rule 198 (foreach_variable)


State 436

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' . expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  397 expr_without_variable: '(' . new_expr ')' @71 instance_call
  559 parenthesis_expr: '(' . expr ')'
  560                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 252
    expr_without_variable              go to state 101
    yield_expr                         go to state 253
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 626
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 437

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr . "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    "as (T_AS)"                   shift, and go to state 627


State 438

  106 tpl_modifier_list: tpl_modifier_list '|' . "identifier (T_STRING)" $@25 tpl_modifier_param_list

    "identifier (T_STRING)"  shift, and go to state 628


State 439

  124 tpl_statement: "tpl left delim (T_START_TPL)" tpl_modifier_list "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 124 (tpl_statement)


State 440

  125 tpl_statement: "tpl left delim (T_START_TPL)" expr_without_variable "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 125 (tpl_statement)


State 441

  126 tpl_statement: "tpl left delim (T_START_TPL)" expr_without_variable ';' . "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 629


State 442

  102 tpl_modifier_list: r_variable ';' .

    $default  reduce using rule 102 (tpl_modifier_list)


State 443

  127 tpl_statement: "tpl left delim with script (T_START_TPL_WITH_SCRIPT)" inner_statement_list "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 127 (tpl_statement)


State 444

   42 inner_statement_list: inner_statement_list $@4 . inner_statement

    "require_once (T_REQUIRE_ONCE)"                         shift, and go to state 5
    "require (T_REQUIRE)"                                   shift, and go to state 6
    "eval (T_EVAL)"                                         shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"                         shift, and go to state 8
    "include (T_INCLUDE)"                                   shift, and go to state 9
    "print (T_PRINT)"                                       shift, and go to state 10
    "yield (T_YIELD)"                                       shift, and go to state 11
    '+'                                                     shift, and go to state 12
    '-'                                                     shift, and go to state 13
    '!'                                                     shift, and go to state 14
    '~'                                                     shift, and go to state 15
    '@'                                                     shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                                shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                                  shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                              shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                                shift, and go to state 20
    "(string) (T_STRING_CAST)"                              shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                              shift, and go to state 22
    "(int) (T_INT_CAST)"                                    shift, and go to state 23
    "-- (T_DEC)"                                            shift, and go to state 24
    "++ (T_INC)"                                            shift, and go to state 25
    '['                                                     shift, and go to state 26
    "clone (T_CLONE)"                                       shift, and go to state 27
    "new (T_NEW)"                                           shift, and go to state 28
    "exit (T_EXIT)"                                         shift, and go to state 29
    "if (T_IF)"                                             shift, and go to state 30
    "integer number (T_LNUMBER)"                            shift, and go to state 31
    "floating-point number (T_DNUMBER)"                     shift, and go to state 32
    "identifier (T_STRING)"                                 shift, and go to state 33
    "variable name (T_STRING_VARNAME)"                      shift, and go to state 34
    "variable (T_VARIABLE)"                                 shift, and go to state 35
    T_INLINE_HTML                                           shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"            shift, and go to state 37
    "echo (T_ECHO)"                                         shift, and go to state 38
    "do (T_DO)"                                             shift, and go to state 39
    "while (T_WHILE)"                                       shift, and go to state 40
    "for (T_FOR)"                                           shift, and go to state 41
    "foreach (T_FOREACH)"                                   shift, and go to state 42
    "declare (T_DECLARE)"                                   shift, and go to state 43
    "switch (T_SWITCH)"                                     shift, and go to state 44
    "break (T_BREAK)"                                       shift, and go to state 45
    "continue (T_CONTINUE)"                                 shift, and go to state 46
    "goto (T_GOTO)"                                         shift, and go to state 47
    "function (T_FUNCTION)"                                 shift, and go to state 48
    "return (T_RETURN)"                                     shift, and go to state 50
    "try (T_TRY)"                                           shift, and go to state 51
    "throw (T_THROW)"                                       shift, and go to state 52
    "global (T_GLOBAL)"                                     shift, and go to state 54
    "final (T_FINAL)"                                       shift, and go to state 55
    "abstract (T_ABSTRACT)"                                 shift, and go to state 56
    "static (T_STATIC)"                                     shift, and go to state 57
    "unset (T_UNSET)"                                       shift, and go to state 58
    "isset (T_ISSET)"                                       shift, and go to state 59
    "empty (T_EMPTY)"                                       shift, and go to state 60
    "__halt_compiler (T_HALT_COMPILER)"                     shift, and go to state 630
    "class (T_CLASS)"                                       shift, and go to state 62
    "trait (T_TRAIT)"                                       shift, and go to state 63
    "interface (T_INTERFACE)"                               shift, and go to state 64
    "list (T_LIST)"                                         shift, and go to state 65
    "array (T_ARRAY)"                                       shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                                 shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                                 shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                               shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                               shift, and go to state 70
    "__LINE__ (T_LINE)"                                     shift, and go to state 71
    "__FILE__ (T_FILE)"                                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"                       shift, and go to state 73
    "namespace (T_NAMESPACE)"                               shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                                shift, and go to state 75
    "__DIR__ (T_DIR)"                                       shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                                   shift, and go to state 77
    "tpl left delim (T_START_TPL)"                          shift, and go to state 78
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81
    '('                                                     shift, and go to state 82
    ';'                                                     shift, and go to state 83
    '{'                                                     shift, and go to state 84
    '$'                                                     shift, and go to state 85
    '`'                                                     shift, and go to state 86
    '"'                                                     shift, and go to state 87

    namespace_name                           go to state 88
    inner_statement                          go to state 631
    statement                                go to state 632
    unticked_statement                       go to state 92
    tpl_statement                            go to state 633
    function_declaration_statement           go to state 634
    class_declaration_statement              go to state 635
    unticked_function_declaration_statement  go to state 96
    unticked_class_declaration_statement     go to state 97
    class_entry_type                         go to state 98
    interface_entry                          go to state 99
    new_expr                                 go to state 100
    expr_without_variable                    go to state 101
    yield_expr                               go to state 102
    combined_scalar_offset                   go to state 103
    combined_scalar                          go to state 104
    function                                 go to state 105
    function_call                            go to state 106
    class_name                               go to state 107
    common_scalar                            go to state 108
    general_constant                         go to state 109
    scalar                                   go to state 110
    expr                                     go to state 111
    parenthesis_expr                         go to state 112
    r_variable                               go to state 113
    rw_variable                              go to state 114
    variable                                 go to state 115
    variable_without_objects                 go to state 116
    static_member                            go to state 117
    variable_class_name                      go to state 118
    array_function_dereference               go to state 119
    base_variable_with_function_calls        go to state 120
    base_variable                            go to state 121
    reference_variable                       go to state 122
    compound_variable                        go to state 123
    simple_indirect_reference                go to state 124
    internal_functions_in_yacc               go to state 125
    class_constant                           go to state 126
    class_name_scalar                        go to state 127


State 445

  130 tpl_statement: "{t (T_START_TPL_TRANSLATE)" tpl_encaps_list "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 130 (tpl_statement)


State 446

  129 tpl_statement: "{include (T_TPL_INCLUDE)" "attr file (T_ATTR_FILE)" '=' . expr "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 636
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 447

  128 tpl_statement: "{include (T_TPL_INCLUDE)" expr "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 128 (tpl_statement)


State 448

  397 expr_without_variable: '(' new_expr ')' . @71 instance_call

    $default  reduce using rule 396 (@71)

    @71  go to state 637


State 449

  560 parenthesis_expr: '(' yield_expr ')' .

    $default  reduce using rule 560 (parenthesis_expr)


State 450

  559 parenthesis_expr: '(' expr ')' .

    $default  reduce using rule 559 (parenthesis_expr)


State 451

   51 unticked_statement: '{' inner_statement_list '}' .

    $default  reduce using rule 51 (unticked_statement)


State 452

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  599 compound_variable: '$' '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    '}'                           shift, and go to state 638


State 453

  417 expr_without_variable: '`' backticks_expr '`' .

    $default  reduce using rule 417 (expr_without_variable)


State 454

  546 scalar: '"' encaps_list '"' .

    $default  reduce using rule 546 (scalar)


State 455

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 6 (namespace_name)


State 456

  251 function_call_parameter_list: '(' . ')'
  252                             | '(' . non_empty_function_call_parameter_list ')'
  253                             | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '&'                                           shift, and go to state 639
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    "... (T_ELLIPSIS)"                            shift, and go to state 640
    '('                                           shift, and go to state 82
    ')'                                           shift, and go to state 641
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                          go to state 88
    non_empty_function_call_parameter_list  go to state 642
    function_call_parameter                 go to state 643
    new_expr                                go to state 100
    expr_without_variable                   go to state 644
    yield_expr                              go to state 645
    combined_scalar_offset                  go to state 103
    combined_scalar                         go to state 104
    function                                go to state 132
    function_call                           go to state 106
    class_name                              go to state 107
    common_scalar                           go to state 108
    general_constant                        go to state 109
    scalar                                  go to state 110
    expr                                    go to state 201
    parenthesis_expr                        go to state 112
    r_variable                              go to state 113
    rw_variable                             go to state 114
    variable                                go to state 646
    variable_without_objects                go to state 116
    static_member                           go to state 117
    variable_class_name                     go to state 118
    array_function_dereference              go to state 119
    base_variable_with_function_calls       go to state 120
    base_variable                           go to state 121
    reference_variable                      go to state 122
    compound_variable                       go to state 123
    simple_indirect_reference               go to state 124
    internal_functions_in_yacc              go to state 125
    class_constant                          go to state 126
    class_name_scalar                       go to state 127


State 457

  442 function_call: namespace_name @78 function_call_parameter_list .

    $default  reduce using rule 442 (function_call)


State 458

   39 constant_declaration: constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 647


State 459

  188 extends_from: "extends (T_EXTENDS)" . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    fully_qualified_class_name  go to state 651


State 460

  180 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from . $@51 implements_list '{' class_statement_list '}'

    $default  reduce using rule 179 ($@51)

    $@51  go to state 652


State 461

  182 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@52 . interface_extends_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 653

    $default  reduce using rule 190 (interface_extends_list)

    interface_extends_list  go to state 654


State 462

  429 combined_scalar_offset: combined_scalar_offset '[' dim_offset . ']'

    ']'  shift, and go to state 655


State 463

  428 combined_scalar_offset: combined_scalar '[' dim_offset . ']'

    ']'  shift, and go to state 656


State 464

  178 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" . $@50 '(' parameter_list ')' '{' inner_statement_list '}'

    $default  reduce using rule 177 ($@50)

    $@50  go to state 657


State 465

  421 expr_without_variable: function is_reference @76 . '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 658


State 466

  586 array_function_dereference: function_call $@92 '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 659
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 467

  608 variable_name: "identifier (T_STRING)" .
  655 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 608 (variable_name)
    $default  reduce using rule 655 (class_constant)


State 468

  658 class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)" .

    $default  reduce using rule 658 (class_name_scalar)


State 469

  609 variable_name: '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 660
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 470

  450 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . $@82 function_call_parameter_list
  581 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('       reduce using rule 449 ($@82)
    $default  reduce using rule 581 (static_member)

    $@82  go to state 661


State 471

  579 variable_without_objects: reference_variable .
  595 reference_variable: reference_variable . '[' dim_offset ']'
  596                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 322
    '{'  shift, and go to state 323

    $default  reduce using rule 579 (variable_without_objects)


State 472

  448 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . @81 function_call_parameter_list

    $default  reduce using rule 447 (@81)

    @81  go to state 662


State 473

  580 variable_without_objects: simple_indirect_reference . reference_variable
  611 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 324

    reference_variable  go to state 663
    compound_variable   go to state 123


State 474

  431 combined_scalar_offset: general_constant '[' dim_offset . ']'

    ']'  shift, and go to state 664


State 475

  366 expr_without_variable: expr "or (T_LOGICAL_OR)" $@69 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 665
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 476

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  369                      | expr "xor (T_LOGICAL_XOR)" expr .
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 369 (expr_without_variable)


State 477

  368 expr_without_variable: expr "and (T_LOGICAL_AND)" $@70 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 666
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 478

  402 expr_without_variable: expr '?' ':' . $@74 expr

    $default  reduce using rule 401 ($@74)

    $@74  go to state 667


State 479

  400 expr_without_variable: expr '?' $@72 . expr ':' $@73 expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 668
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 480

  362 expr_without_variable: expr "|| (T_BOOLEAN_OR)" $@67 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 669
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 481

  364 expr_without_variable: expr "&& (T_BOOLEAN_AND)" $@68 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 670
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 482

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  371                      | expr '^' expr .
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 371 (expr_without_variable)


State 483

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  370                      | expr '&' expr .
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 370 (expr_without_variable)


State 484

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  386                      | expr "!== (T_IS_NOT_IDENTICAL)" expr .
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 386 (expr_without_variable)


State 485

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  385                      | expr "=== (T_IS_IDENTICAL)" expr .
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 385 (expr_without_variable)


State 486

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  388                      | expr "!= (T_IS_NOT_EQUAL)" expr .
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 388 (expr_without_variable)


State 487

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  387                      | expr "== (T_IS_EQUAL)" expr .
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 387 (expr_without_variable)


State 488

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  389                      | expr '<' expr .
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    ">> (T_SR)"                  shift, and go to state 292
    "<< (T_SL)"                  shift, and go to state 293
    '+'                          shift, and go to state 294
    '-'                          shift, and go to state 295
    '.'                          shift, and go to state 296
    '*'                          shift, and go to state 297
    '/'                          shift, and go to state 298
    '%'                          shift, and go to state 299
    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 389 (expr_without_variable)


State 489

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  391                      | expr '>' expr .
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    ">> (T_SR)"                  shift, and go to state 292
    "<< (T_SL)"                  shift, and go to state 293
    '+'                          shift, and go to state 294
    '-'                          shift, and go to state 295
    '.'                          shift, and go to state 296
    '*'                          shift, and go to state 297
    '/'                          shift, and go to state 298
    '%'                          shift, and go to state 299
    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 391 (expr_without_variable)


State 490

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  392                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr .
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    ">> (T_SR)"                  shift, and go to state 292
    "<< (T_SL)"                  shift, and go to state 293
    '+'                          shift, and go to state 294
    '-'                          shift, and go to state 295
    '.'                          shift, and go to state 296
    '*'                          shift, and go to state 297
    '/'                          shift, and go to state 298
    '%'                          shift, and go to state 299
    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 392 (expr_without_variable)


State 491

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  390                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr .
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    ">> (T_SR)"                  shift, and go to state 292
    "<< (T_SL)"                  shift, and go to state 293
    '+'                          shift, and go to state 294
    '-'                          shift, and go to state 295
    '.'                          shift, and go to state 296
    '*'                          shift, and go to state 297
    '/'                          shift, and go to state 298
    '%'                          shift, and go to state 299
    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 390 (expr_without_variable)


State 492

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  380                      | expr ">> (T_SR)" expr .
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '+'                          shift, and go to state 294
    '-'                          shift, and go to state 295
    '.'                          shift, and go to state 296
    '*'                          shift, and go to state 297
    '/'                          shift, and go to state 298
    '%'                          shift, and go to state 299
    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    $default  reduce using rule 380 (expr_without_variable)


State 493

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  379                      | expr "<< (T_SL)" expr .
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '+'                          shift, and go to state 294
    '-'                          shift, and go to state 295
    '.'                          shift, and go to state 296
    '*'                          shift, and go to state 297
    '/'                          shift, and go to state 298
    '%'                          shift, and go to state 299
    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    $default  reduce using rule 379 (expr_without_variable)


State 494

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  373                      | expr '+' expr .
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '*'                          shift, and go to state 297
    '/'                          shift, and go to state 298
    '%'                          shift, and go to state 299
    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    $default  reduce using rule 373 (expr_without_variable)


State 495

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  374                      | expr '-' expr .
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '*'                          shift, and go to state 297
    '/'                          shift, and go to state 298
    '%'                          shift, and go to state 299
    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    $default  reduce using rule 374 (expr_without_variable)


State 496

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  372                      | expr '.' expr .
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '*'                          shift, and go to state 297
    '/'                          shift, and go to state 298
    '%'                          shift, and go to state 299
    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    $default  reduce using rule 372 (expr_without_variable)


State 497

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  375                      | expr '*' expr .
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    $default  reduce using rule 375 (expr_without_variable)


State 498

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  377                      | expr '/' expr .
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    $default  reduce using rule 377 (expr_without_variable)


State 499

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  378                      | expr '%' expr .
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 300
    "** (T_POW)"                 shift, and go to state 301

    $default  reduce using rule 378 (expr_without_variable)


State 500

  393 expr_without_variable: expr "instanceof (T_INSTANCEOF)" class_name_reference .

    $default  reduce using rule 393 (expr_without_variable)


State 501

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  376                      | expr "** (T_POW)" expr .
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "** (T_POW)"  shift, and go to state 301

    $default  reduce using rule 376 (expr_without_variable)


State 502

  341 expr_without_variable: variable '=' '&' . variable
  343                      | variable '=' '&' . "new (T_NEW)" class_name_reference $@66 ctor_arguments

    "new (T_NEW)"              shift, and go to state 671
    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 672
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 503

  340 expr_without_variable: variable '=' expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 340 (expr_without_variable)


State 504

  348 expr_without_variable: variable "**= (T_POW_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 348 (expr_without_variable)


State 505

  356 expr_without_variable: variable ">>= (T_SR_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 356 (expr_without_variable)


State 506

  355 expr_without_variable: variable "<<= (T_SL_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 355 (expr_without_variable)


State 507

  354 expr_without_variable: variable "^= (T_XOR_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 354 (expr_without_variable)


State 508

  353 expr_without_variable: variable "|= (T_OR_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 353 (expr_without_variable)


State 509

  352 expr_without_variable: variable "&= (T_AND_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 352 (expr_without_variable)


State 510

  351 expr_without_variable: variable "%= (T_MOD_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 351 (expr_without_variable)


State 511

  350 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 350 (expr_without_variable)


State 512

  349 expr_without_variable: variable "/= (T_DIV_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 349 (expr_without_variable)


State 513

  347 expr_without_variable: variable "*= (T_MUL_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 347 (expr_without_variable)


State 514

  346 expr_without_variable: variable "-= (T_MINUS_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 346 (expr_without_variable)


State 515

  345 expr_without_variable: variable "+= (T_PLUS_EQUAL)" expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 345 (expr_without_variable)


State 516

  456 function_call: variable_without_objects $@85 function_call_parameter_list .

    $default  reduce using rule 456 (function_call)


State 517

  608 variable_name: "identifier (T_STRING)" .
  656 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 608 (variable_name)
    $default  reduce using rule 656 (class_constant)


State 518

  454 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . $@84 function_call_parameter_list
  582 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('       reduce using rule 453 ($@84)
    $default  reduce using rule 582 (static_member)

    $@84  go to state 673


State 519

  452 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . $@83 function_call_parameter_list

    $default  reduce using rule 451 ($@83)

    $@83  go to state 674


State 520

  584 array_function_dereference: array_function_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 675


State 521

  566 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@88 . object_property $@89 method_or_not variable_properties

    "identifier (T_STRING)"  shift, and go to state 528
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 469
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 676
    reference_variable         go to state 471
    compound_variable          go to state 123
    object_property            go to state 677
    object_dim_list            go to state 678
    variable_name              go to state 679
    simple_indirect_reference  go to state 473


State 522

  595 reference_variable: reference_variable '[' dim_offset . ']'

    ']'  shift, and go to state 680


State 523

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  596 reference_variable: reference_variable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    '}'                           shift, and go to state 681


State 524

  647 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr ')' .

    $default  reduce using rule 647 (internal_functions_in_yacc)


State 525

  426 yield_expr: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr_without_variable .
  558 expr: expr_without_variable .

    ')'       reduce using rule 426 (yield_expr)
    ';'       reduce using rule 426 (yield_expr)
    $default  reduce using rule 558 (expr)


State 526

  340 expr_without_variable: variable . '=' expr
  341                      | variable . '=' '&' variable
  343                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  345                      | variable . "+= (T_PLUS_EQUAL)" expr
  346                      | variable . "-= (T_MINUS_EQUAL)" expr
  347                      | variable . "*= (T_MUL_EQUAL)" expr
  348                      | variable . "**= (T_POW_EQUAL)" expr
  349                      | variable . "/= (T_DIV_EQUAL)" expr
  350                      | variable . ".= (T_CONCAT_EQUAL)" expr
  351                      | variable . "%= (T_MOD_EQUAL)" expr
  352                      | variable . "&= (T_AND_EQUAL)" expr
  353                      | variable . "|= (T_OR_EQUAL)" expr
  354                      | variable . "^= (T_XOR_EQUAL)" expr
  355                      | variable . "<<= (T_SL_EQUAL)" expr
  356                      | variable . ">>= (T_SR_EQUAL)" expr
  427 yield_expr: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" variable .
  561 r_variable: variable .
  563 rw_variable: variable .

    '='                    shift, and go to state 305
    "**= (T_POW_EQUAL)"    shift, and go to state 306
    ">>= (T_SR_EQUAL)"     shift, and go to state 307
    "<<= (T_SL_EQUAL)"     shift, and go to state 308
    "^= (T_XOR_EQUAL)"     shift, and go to state 309
    "|= (T_OR_EQUAL)"      shift, and go to state 310
    "&= (T_AND_EQUAL)"     shift, and go to state 311
    "%= (T_MOD_EQUAL)"     shift, and go to state 312
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 313
    "/= (T_DIV_EQUAL)"     shift, and go to state 314
    "*= (T_MUL_EQUAL)"     shift, and go to state 315
    "-= (T_MINUS_EQUAL)"   shift, and go to state 316
    "+= (T_PLUS_EQUAL)"    shift, and go to state 317

    "-- (T_DEC)"  reduce using rule 563 (rw_variable)
    "++ (T_INC)"  reduce using rule 563 (rw_variable)
    ')'           reduce using rule 427 (yield_expr)
    ';'           reduce using rule 427 (yield_expr)
    $default      reduce using rule 561 (r_variable)


State 527

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  444 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . @79 function_call_parameter_list
  459 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 459 (class_name)
    $default                       reduce using rule 443 (@79)

    @79  go to state 607


State 528

  608 variable_name: "identifier (T_STRING)" .

    $default  reduce using rule 608 (variable_name)


State 529

  626 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    w_variable                         go to state 682
    variable                           go to state 335
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 530

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  622 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 622 (non_empty_array_pair_list)


State 531

  625 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    w_variable                         go to state 683
    variable                           go to state 335
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 532

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  620 non_empty_array_pair_list: non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" expr
  621                          | non_empty_array_pair_list ',' expr .
  624                          | non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 684

    $default  reduce using rule 621 (non_empty_array_pair_list)


State 533

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  459 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 459 (class_name)


State 534

  581 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 581 (static_member)


State 535

  480 ctor_arguments: function_call_parameter_list .

    $default  reduce using rule 480 (ctor_arguments)


State 536

  337 new_expr: "new (T_NEW)" class_name_reference $@64 ctor_arguments .

    $default  reduce using rule 337 (new_expr)


State 537

  582 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 582 (static_member)


State 538

  468 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@86 . object_property $@87 dynamic_class_name_variable_properties

    "identifier (T_STRING)"  shift, and go to state 528
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 469
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 676
    reference_variable         go to state 471
    compound_variable          go to state 123
    object_property            go to state 685
    object_dim_list            go to state 678
    variable_name              go to state 679
    simple_indirect_reference  go to state 473


State 539

   57 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 . inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 686


State 540

   54 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement . $@6 elseif_list else_single

    $default  reduce using rule 53 ($@6)

    $@6  go to state 687


State 541

  430 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' dim_offset ']' .

    $default  reduce using rule 430 (combined_scalar_offset)


State 542

  318 echo_expr_list: echo_expr_list ',' expr .
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 318 (echo_expr_list)


State 543

   63 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" . $@12 parenthesis_expr ';'

    $default  reduce using rule 62 ($@12)

    $@12  go to state 688


State 544

   60 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr @10 . while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 689
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 83
    '{'                                           shift, and go to state 84
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    statement                          go to state 690
    unticked_statement                 go to state 92
    while_statement                    go to state 691
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 102
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 111
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 545

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' . $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    $default  reduce using rule 64 ($@13)

    $@13  go to state 692


State 546

  323 non_empty_for_expr: non_empty_for_expr ',' . $@61 expr

    $default  reduce using rule 322 ($@61)

    $@61  go to state 693


State 547

   89 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" . $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    $default  reduce using rule 87 ($@19)

    $@19  go to state 694


State 548

   86 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" . $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement

    $default  reduce using rule 84 ($@17)

    $@17  go to state 695


State 549

  206 declare_list: "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 696


State 550

   91 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list . ')' declare_statement
  207 declare_list: declare_list . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 697
    ')'  shift, and go to state 698


State 551

  210 switch_case_list: ':' . case_list "endswitch (T_ENDSWITCH)" ';'
  211                 | ':' . ';' case_list "endswitch (T_ENDSWITCH)" ';'

    ';'  shift, and go to state 699

    $default  reduce using rule 212 (case_list)

    case_list  go to state 700


State 552

  208 switch_case_list: '{' . case_list '}'
  209                 | '{' . ';' case_list '}'

    ';'  shift, and go to state 701

    $default  reduce using rule 212 (case_list)

    case_list  go to state 702


State 553

   69 unticked_statement: "switch (T_SWITCH)" parenthesis_expr $@16 switch_case_list .

    $default  reduce using rule 69 (unticked_statement)


State 554

  535 static_operation: '+' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 703
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 555

  536 static_operation: '-' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 704
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 556

  512 static_operation: '!' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 705
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 557

  513 static_operation: '~' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 706
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 558

  501 static_scalar_value: '[' . static_array_pair_list ']'

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    $default  reduce using rule 549 (static_array_pair_list)

    namespace_name                    go to state 565
    class_name                        go to state 566
    common_scalar                     go to state 567
    static_class_constant             go to state 568
    static_scalar_value               go to state 707
    static_operation                  go to state 571
    static_array_pair_list            go to state 708
    non_empty_static_array_pair_list  go to state 709
    static_class_name_scalar          go to state 572


State 559

  483 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 483 (common_scalar)


State 560

  500 static_scalar_value: "array (T_ARRAY)" . '(' static_array_pair_list ')'

    '('  shift, and go to state 710


State 561

  503 static_scalar_value: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 503 (static_scalar_value)


State 562

  459 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  498 static_scalar_value: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 711


State 563

  460 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  499 static_scalar_value: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 712


State 564

  537 static_operation: '(' . static_scalar_value ')'

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 713
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 565

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  458 class_name: namespace_name .
  497 static_scalar_value: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 458 (class_name)
    $default                       reduce using rule 497 (static_scalar_value)


State 566

  493 static_class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  657 static_class_name_scalar: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 714


State 567

  495 static_scalar_value: common_scalar .

    $default  reduce using rule 495 (static_scalar_value)


State 568

  502 static_scalar_value: static_class_constant .

    $default  reduce using rule 502 (static_scalar_value)


State 569

   40 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 40 (constant_declaration)


State 570

  494 static_scalar: static_scalar_value .
  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "or (T_LOGICAL_OR)"           shift, and go to state 715
    "xor (T_LOGICAL_XOR)"         shift, and go to state 716
    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 494 (static_scalar)


State 571

  504 static_scalar_value: static_operation .

    $default  reduce using rule 504 (static_scalar_value)


State 572

  496 static_scalar_value: static_class_name_scalar .

    $default  reduce using rule 496 (static_scalar_value)


State 573

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
   95 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list . '}' catch_statement $@23 finally_statement

    '}'  shift, and go to state 742

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 574

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   31 use_function_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   32                         | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 743
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 31 (use_function_declaration)


State 575

   30 use_function_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 744


State 576

   27 use_function_declarations: use_function_declarations ',' . use_function_declaration

    "identifier (T_STRING)"  shift, and go to state 129
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 371

    namespace_name            go to state 372
    use_function_declaration  go to state 745


State 577

   17 top_statement: "use (T_USE)" "function (T_FUNCTION)" use_function_declarations ';' .

    $default  reduce using rule 17 (top_statement)


State 578

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   37 use_const_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   38                      | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 746
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 37 (use_const_declaration)


State 579

   36 use_const_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 747


State 580

   33 use_const_declarations: use_const_declarations ',' . use_const_declaration

    "identifier (T_STRING)"  shift, and go to state 129
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 375

    namespace_name         go to state 376
    use_const_declaration  go to state 748


State 581

   18 top_statement: "use (T_USE)" "const (T_CONST)" use_const_declarations ';' .

    $default  reduce using rule 18 (top_statement)


State 582

   26 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 749


State 583

   24 use_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 24 (use_declaration)


State 584

   21 use_declarations: use_declarations ',' use_declaration .

    $default  reduce using rule 21 (use_declarations)


State 585

  264 global_var: '$' '{' expr . '}'
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    '}'                           shift, and go to state 750


State 586

  260 global_var_list: global_var_list ',' global_var .

    $default  reduce using rule 260 (global_var_list)


State 587

  268 static_var_list: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 268 (static_var_list)


State 588

  265 static_var_list: static_var_list ',' "variable (T_VARIABLE)" .
  266                | static_var_list ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 751

    $default  reduce using rule 265 (static_var_list)


State 589

  423 expr_without_variable: "static (T_STATIC)" function is_reference @77 . '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 752


State 590

  169 unset_variables: unset_variables ',' . unset_variable

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    unset_variable                     go to state 753
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 394
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 591

   83 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' . ';'

    ';'  shift, and go to state 754


State 592

  652 isset_variables: isset_variables ',' . $@96 isset_variable

    $default  reduce using rule 651 ($@96)

    $@96  go to state 755


State 593

  642 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')' .

    $default  reduce using rule 642 (internal_functions_in_yacc)


State 594

  644 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr_without_variable ')' .

    $default  reduce using rule 644 (internal_functions_in_yacc)


State 595

  643 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable ')' .

    $default  reduce using rule 643 (internal_functions_in_yacc)


State 596

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 10 (top_statement)


State 597

  616 assignment_list_element: "list (T_LIST)" . '(' $@94 assignment_list ')'

    '('  shift, and go to state 756


State 598

  614 assignment_list_element: variable .

    $default  reduce using rule 614 (assignment_list_element)


State 599

  339 expr_without_variable: "list (T_LIST)" '(' $@65 assignment_list . ')' '=' expr
  612 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 757
    ')'  shift, and go to state 758


State 600

  613 assignment_list: assignment_list_element .

    $default  reduce using rule 613 (assignment_list)


State 601

  432 combined_scalar: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 432 (combined_scalar)


State 602

  634 encaps_var: "variable (T_VARIABLE)" '[' $@95 . encaps_var_offset ']'

    "identifier (T_STRING)"  shift, and go to state 759
    "variable (T_VARIABLE)"  shift, and go to state 760
    "number (T_NUM_STRING)"  shift, and go to state 761

    encaps_var_offset  go to state 762


State 603

  635 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 635 (encaps_var)


State 604

  637 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' . expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 763
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 605

  636 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}' .

    $default  reduce using rule 636 (encaps_var)


State 606

  638 encaps_var: "{$ (T_CURLY_OPEN)" variable '}' .

    $default  reduce using rule 638 (encaps_var)


State 607

  444 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name @79 . function_call_parameter_list

    '('  shift, and go to state 456

    function_call_parameter_list  go to state 764


State 608

    3 top_statement_list: top_statement_list . $@1 top_statement
   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 top_statement_list . '}'

    '}'  shift, and go to state 765

    $default  reduce using rule 2 ($@1)

    $@1  go to state 4


State 609

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 766


State 610

  446 function_call: "\\ (T_NS_SEPARATOR)" namespace_name @80 function_call_parameter_list .

    $default  reduce using rule 446 (function_call)


State 611

  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" . $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif

    $default  reduce using rule 139 ($@34)

    $@34  go to state 767


State 612

  114 tpl_inner_tpl_attr_anony: "array (T_ARRAY)" '(' . array_pair_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '&'                                           shift, and go to state 163
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 618 (array_pair_list)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 164
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    array_pair_list                    go to state 768
    non_empty_array_pair_list          go to state 166
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 613

  491 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"

    "heredoc end (T_END_HEREDOC)"  shift, and go to state 406


State 614

  116 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_name '=' . $@27 expr

    $default  reduce using rule 115 ($@27)

    $@27  go to state 769


State 615

  131 tpl_statement: "tpl left delim (T_START_TPL)" "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 131 (tpl_statement)


State 616

  118 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_list tpl_inner_tpl_attr_name . '=' $@28 expr

    '='  shift, and go to state 770


State 617

  120 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_list tpl_inner_tpl_attr_anony .

    $default  reduce using rule 120 (tpl_inner_tpl_attr_list)


State 618

  594 tpl_base_variable: simple_indirect_reference reference_variable .
  595 reference_variable: reference_variable . '[' dim_offset ']'
  596                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 322
    '{'  shift, and go to state 323

    $default  reduce using rule 594 (tpl_base_variable)


State 619

  104 tpl_modifier_list: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '|' "identifier (T_STRING)" . $@24 tpl_modifier_param_list

    $default  reduce using rule 103 ($@24)

    $@24  go to state 771


State 620

  199 foreach_variable: '&' variable .

    $default  reduce using rule 199 (foreach_variable)


State 621

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable . foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 624

    $default  reduce using rule 196 (foreach_optional_arg)

    foreach_optional_arg  go to state 772


State 622

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr . ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    ';'  shift, and go to state 773


State 623

  198 foreach_variable: variable .
  340 expr_without_variable: variable . '=' expr
  341                      | variable . '=' '&' variable
  343                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  345                      | variable . "+= (T_PLUS_EQUAL)" expr
  346                      | variable . "-= (T_MINUS_EQUAL)" expr
  347                      | variable . "*= (T_MUL_EQUAL)" expr
  348                      | variable . "**= (T_POW_EQUAL)" expr
  349                      | variable . "/= (T_DIV_EQUAL)" expr
  350                      | variable . ".= (T_CONCAT_EQUAL)" expr
  351                      | variable . "%= (T_MOD_EQUAL)" expr
  352                      | variable . "&= (T_AND_EQUAL)" expr
  353                      | variable . "|= (T_OR_EQUAL)" expr
  354                      | variable . "^= (T_XOR_EQUAL)" expr
  355                      | variable . "<<= (T_SL_EQUAL)" expr
  356                      | variable . ">>= (T_SR_EQUAL)" expr
  561 r_variable: variable .
  563 rw_variable: variable .

    '='                    shift, and go to state 305
    "**= (T_POW_EQUAL)"    shift, and go to state 306
    ">>= (T_SR_EQUAL)"     shift, and go to state 307
    "<<= (T_SL_EQUAL)"     shift, and go to state 308
    "^= (T_XOR_EQUAL)"     shift, and go to state 309
    "|= (T_OR_EQUAL)"      shift, and go to state 310
    "&= (T_AND_EQUAL)"     shift, and go to state 311
    "%= (T_MOD_EQUAL)"     shift, and go to state 312
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 313
    "/= (T_DIV_EQUAL)"     shift, and go to state 314
    "*= (T_MUL_EQUAL)"     shift, and go to state 315
    "-= (T_MINUS_EQUAL)"   shift, and go to state 316
    "+= (T_PLUS_EQUAL)"    shift, and go to state 317

    "-- (T_DEC)"           reduce using rule 563 (rw_variable)
    "++ (T_INC)"           reduce using rule 563 (rw_variable)
    "=> (T_DOUBLE_ARROW)"  reduce using rule 198 (foreach_variable)
    "in (T_IN)"            reduce using rule 198 (foreach_variable)
    $default               reduce using rule 561 (r_variable)


State 624

  197 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" . foreach_variable

    '&'                        shift, and go to state 432
    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    foreach_variable                   go to state 774
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 435
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 625

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg . "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "in (T_IN)"  shift, and go to state 775


State 626

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr . "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  559 parenthesis_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    "as (T_AS)"                   shift, and go to state 776
    ')'                           shift, and go to state 450


State 627

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" . foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    '&'                        shift, and go to state 432
    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    foreach_variable                   go to state 777
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 435
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 628

  106 tpl_modifier_list: tpl_modifier_list '|' "identifier (T_STRING)" . $@25 tpl_modifier_param_list

    $default  reduce using rule 105 ($@25)

    $@25  go to state 778


State 629

  126 tpl_statement: "tpl left delim (T_START_TPL)" expr_without_variable ';' "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 126 (tpl_statement)


State 630

   48 inner_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 779


State 631

   42 inner_statement_list: inner_statement_list $@4 inner_statement .

    $default  reduce using rule 42 (inner_statement_list)


State 632

   44 inner_statement: statement .

    $default  reduce using rule 44 (inner_statement)


State 633

   45 inner_statement: tpl_statement .

    $default  reduce using rule 45 (inner_statement)


State 634

   46 inner_statement: function_declaration_statement .

    $default  reduce using rule 46 (inner_statement)


State 635

   47 inner_statement: class_declaration_statement .

    $default  reduce using rule 47 (inner_statement)


State 636

  129 tpl_statement: "{include (T_TPL_INCLUDE)" "attr file (T_ATTR_FILE)" '=' expr . "tpl right delim (T_END_TPL)"
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"            shift, and go to state 276
    "xor (T_LOGICAL_XOR)"          shift, and go to state 277
    "and (T_LOGICAL_AND)"          shift, and go to state 278
    '?'                            shift, and go to state 279
    "|| (T_BOOLEAN_OR)"            shift, and go to state 280
    "&& (T_BOOLEAN_AND)"           shift, and go to state 281
    '^'                            shift, and go to state 282
    '&'                            shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"     shift, and go to state 284
    "=== (T_IS_IDENTICAL)"         shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"          shift, and go to state 286
    "== (T_IS_EQUAL)"              shift, and go to state 287
    '<'                            shift, and go to state 288
    '>'                            shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"   shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"   shift, and go to state 291
    ">> (T_SR)"                    shift, and go to state 292
    "<< (T_SL)"                    shift, and go to state 293
    '+'                            shift, and go to state 294
    '-'                            shift, and go to state 295
    '.'                            shift, and go to state 296
    '*'                            shift, and go to state 297
    '/'                            shift, and go to state 298
    '%'                            shift, and go to state 299
    "instanceof (T_INSTANCEOF)"    shift, and go to state 300
    "** (T_POW)"                   shift, and go to state 301
    "tpl right delim (T_END_TPL)"  shift, and go to state 780


State 637

  397 expr_without_variable: '(' new_expr ')' @71 . instance_call

    '['                       reduce using rule 334 ($@63)
    "-> (T_OBJECT_OPERATOR)"  reduce using rule 334 ($@63)
    $default                  reduce using rule 333 (instance_call)

    instance_call  go to state 781
    $@63           go to state 782


State 638

  599 compound_variable: '$' '{' expr '}' .

    $default  reduce using rule 599 (compound_variable)


State 639

  258 function_call_parameter: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    w_variable                         go to state 783
    variable                           go to state 335
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 640

  259 function_call_parameter: "... (T_ELLIPSIS)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 784
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 641

  251 function_call_parameter_list: '(' ')' .

    $default  reduce using rule 251 (function_call_parameter_list)


State 642

  252 function_call_parameter_list: '(' non_empty_function_call_parameter_list . ')'
  255 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list . ',' function_call_parameter

    ','  shift, and go to state 785
    ')'  shift, and go to state 786


State 643

  254 non_empty_function_call_parameter_list: function_call_parameter .

    $default  reduce using rule 254 (non_empty_function_call_parameter_list)


State 644

  256 function_call_parameter: expr_without_variable .
  558 expr: expr_without_variable .

    ','       reduce using rule 256 (function_call_parameter)
    ')'       reduce using rule 256 (function_call_parameter)
    $default  reduce using rule 558 (expr)


State 645

  253 function_call_parameter_list: '(' yield_expr . ')'

    ')'  shift, and go to state 787


State 646

  257 function_call_parameter: variable .
  340 expr_without_variable: variable . '=' expr
  341                      | variable . '=' '&' variable
  343                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments
  345                      | variable . "+= (T_PLUS_EQUAL)" expr
  346                      | variable . "-= (T_MINUS_EQUAL)" expr
  347                      | variable . "*= (T_MUL_EQUAL)" expr
  348                      | variable . "**= (T_POW_EQUAL)" expr
  349                      | variable . "/= (T_DIV_EQUAL)" expr
  350                      | variable . ".= (T_CONCAT_EQUAL)" expr
  351                      | variable . "%= (T_MOD_EQUAL)" expr
  352                      | variable . "&= (T_AND_EQUAL)" expr
  353                      | variable . "|= (T_OR_EQUAL)" expr
  354                      | variable . "^= (T_XOR_EQUAL)" expr
  355                      | variable . "<<= (T_SL_EQUAL)" expr
  356                      | variable . ">>= (T_SR_EQUAL)" expr
  561 r_variable: variable .
  563 rw_variable: variable .

    '='                    shift, and go to state 305
    "**= (T_POW_EQUAL)"    shift, and go to state 306
    ">>= (T_SR_EQUAL)"     shift, and go to state 307
    "<<= (T_SL_EQUAL)"     shift, and go to state 308
    "^= (T_XOR_EQUAL)"     shift, and go to state 309
    "|= (T_OR_EQUAL)"      shift, and go to state 310
    "&= (T_AND_EQUAL)"     shift, and go to state 311
    "%= (T_MOD_EQUAL)"     shift, and go to state 312
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 313
    "/= (T_DIV_EQUAL)"     shift, and go to state 314
    "*= (T_MUL_EQUAL)"     shift, and go to state 315
    "-= (T_MINUS_EQUAL)"   shift, and go to state 316
    "+= (T_PLUS_EQUAL)"    shift, and go to state 317

    ','           reduce using rule 257 (function_call_parameter)
    "-- (T_DEC)"  reduce using rule 563 (rw_variable)
    "++ (T_INC)"  reduce using rule 563 (rw_variable)
    ')'           reduce using rule 257 (function_call_parameter)
    $default      reduce using rule 561 (r_variable)


State 647

   39 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 788
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 648

  462 fully_qualified_class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 789


State 649

  463 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 790


State 650

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  461 fully_qualified_class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 461 (fully_qualified_class_name)


State 651

  188 extends_from: "extends (T_EXTENDS)" fully_qualified_class_name .

    $default  reduce using rule 188 (extends_from)


State 652

  180 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@51 . implements_list '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 791

    $default  reduce using rule 192 (implements_list)

    implements_list  go to state 792


State 653

  191 interface_extends_list: "extends (T_EXTENDS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    interface_list              go to state 793
    fully_qualified_class_name  go to state 794


State 654

  182 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@52 interface_extends_list . '{' class_statement_list '}'

    '{'  shift, and go to state 795


State 655

  429 combined_scalar_offset: combined_scalar_offset '[' dim_offset ']' .

    $default  reduce using rule 429 (combined_scalar_offset)


State 656

  428 combined_scalar_offset: combined_scalar '[' dim_offset ']' .

    $default  reduce using rule 428 (combined_scalar_offset)


State 657

  178 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@50 . '(' parameter_list ')' '{' inner_statement_list '}'

    '('  shift, and go to state 796


State 658

  421 expr_without_variable: function is_reference @76 '(' . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 129
    "array (T_ARRAY)"          shift, and go to state 797
    "callable (T_CALLABLE)"    shift, and go to state 798
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    ')'       reduce using rule 242 (parameter_list)
    $default  reduce using rule 247 (optional_class_type)

    namespace_name              go to state 650
    parameter_list              go to state 799
    non_empty_parameter_list    go to state 800
    parameter                   go to state 801
    optional_class_type         go to state 802
    fully_qualified_class_name  go to state 803


State 659

  586 array_function_dereference: function_call $@92 '[' dim_offset . ']'

    ']'  shift, and go to state 804


State 660

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  609 variable_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    '}'                           shift, and go to state 805


State 661

  450 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@82 . function_call_parameter_list

    '('  shift, and go to state 456

    function_call_parameter_list  go to state 806


State 662

  448 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @81 . function_call_parameter_list

    '('  shift, and go to state 456

    function_call_parameter_list  go to state 807


State 663

  580 variable_without_objects: simple_indirect_reference reference_variable .
  595 reference_variable: reference_variable . '[' dim_offset ']'
  596                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 322
    '{'  shift, and go to state 323

    $default  reduce using rule 580 (variable_without_objects)


State 664

  431 combined_scalar_offset: general_constant '[' dim_offset ']' .

    $default  reduce using rule 431 (combined_scalar_offset)


State 665

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  366                      | expr "or (T_LOGICAL_OR)" $@69 expr .
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 366 (expr_without_variable)


State 666

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  368                      | expr "and (T_LOGICAL_AND)" $@70 expr .
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 368 (expr_without_variable)


State 667

  402 expr_without_variable: expr '?' ':' $@74 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 808
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 668

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  400                      | expr '?' $@72 expr . ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    ':'                           shift, and go to state 809
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301


State 669

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  362                      | expr "|| (T_BOOLEAN_OR)" $@67 expr .
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 362 (expr_without_variable)


State 670

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  364                      | expr "&& (T_BOOLEAN_AND)" $@68 expr .
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 364 (expr_without_variable)


State 671

  343 expr_without_variable: variable '=' '&' "new (T_NEW)" . class_name_reference $@66 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 168
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 169
    '$'                        shift, and go to state 85

    namespace_name                go to state 170
    class_name                    go to state 171
    class_name_reference          go to state 810
    dynamic_class_name_reference  go to state 173
    static_member                 go to state 117
    variable_class_name           go to state 174
    base_variable                 go to state 175
    reference_variable            go to state 176
    compound_variable             go to state 123
    simple_indirect_reference     go to state 177


State 672

  341 expr_without_variable: variable '=' '&' variable .

    $default  reduce using rule 341 (expr_without_variable)


State 673

  454 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@84 . function_call_parameter_list

    '('  shift, and go to state 456

    function_call_parameter_list  go to state 811


State 674

  452 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@83 . function_call_parameter_list

    '('  shift, and go to state 456

    function_call_parameter_list  go to state 812


State 675

  584 array_function_dereference: array_function_dereference '[' dim_offset ']' .

    $default  reduce using rule 584 (array_function_dereference)


State 676

  604 object_property: variable_without_objects . $@93

    $default  reduce using rule 603 ($@93)

    $@93  go to state 813


State 677

  566 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@88 object_property . $@89 method_or_not variable_properties

    $default  reduce using rule 565 ($@89)

    $@89  go to state 814


State 678

  602 object_property: object_dim_list .
  605 object_dim_list: object_dim_list . '[' dim_offset ']'
  606                | object_dim_list . '{' expr '}'

    '['  shift, and go to state 815
    '{'  shift, and go to state 816

    $default  reduce using rule 602 (object_property)


State 679

  607 object_dim_list: variable_name .

    $default  reduce using rule 607 (object_dim_list)


State 680

  595 reference_variable: reference_variable '[' dim_offset ']' .

    $default  reduce using rule 595 (reference_variable)


State 681

  596 reference_variable: reference_variable '{' expr '}' .

    $default  reduce using rule 596 (reference_variable)


State 682

  626 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 626 (non_empty_array_pair_list)


State 683

  625 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' w_variable .

    $default  reduce using rule 625 (non_empty_array_pair_list)


State 684

  620 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . expr
  624                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '&'                                           shift, and go to state 817
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 818
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 685

  468 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@86 object_property . $@87 dynamic_class_name_variable_properties

    $default  reduce using rule 467 ($@87)

    $@87  go to state 819


State 686

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
   57 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list . $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "elseif (T_ELSEIF)"  reduce using rule 56 ($@8)
    "else (T_ELSE)"      reduce using rule 56 ($@8)
    "endif (T_ENDIF)"    reduce using rule 56 ($@8)
    $default             reduce using rule 41 ($@4)

    $@4  go to state 444
    $@8  go to state 820


State 687

   54 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 . elseif_list else_single

    $default  reduce using rule 221 (elseif_list)

    elseif_list  go to state 821


State 688

   63 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 . parenthesis_expr ';'

    '('  shift, and go to state 181

    parenthesis_expr  go to state 822


State 689

  220 while_statement: ':' . inner_statement_list "endwhile (T_ENDWHILE)" ';'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 823


State 690

  219 while_statement: statement .

    $default  reduce using rule 219 (while_statement)


State 691

   60 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr @10 while_statement .

    $default  reduce using rule 60 (unticked_statement)


State 692

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 . for_expr ';' $@14 for_expr ')' $@15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 320 (for_expr)

    namespace_name                     go to state 88
    for_expr                           go to state 824
    non_empty_for_expr                 go to state 357
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 358
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 693

  323 non_empty_for_expr: non_empty_for_expr ',' $@61 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 825
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 694

   89 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 . foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    '&'                        shift, and go to state 432
    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    foreach_variable                   go to state 826
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 435
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 695

   86 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 . foreach_variable foreach_optional_arg ')' $@18 foreach_statement

    '&'                        shift, and go to state 432
    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    foreach_variable                   go to state 827
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 435
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 696

  206 declare_list: "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 828
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 697

  207 declare_list: declare_list ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 829


State 698

   91 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list ')' . declare_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 830
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 83
    '{'                                           shift, and go to state 84
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    statement                          go to state 831
    unticked_statement                 go to state 92
    declare_statement                  go to state 832
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 102
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 111
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 699

  211 switch_case_list: ':' ';' . case_list "endswitch (T_ENDSWITCH)" ';'

    $default  reduce using rule 212 (case_list)

    case_list  go to state 833


State 700

  210 switch_case_list: ':' case_list . "endswitch (T_ENDSWITCH)" ';'
  214 case_list: case_list . "case (T_CASE)" expr case_separator $@53 inner_statement_list
  216          | case_list . "default (T_DEFAULT)" case_separator $@54 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 834
    "case (T_CASE)"            shift, and go to state 835
    "default (T_DEFAULT)"      shift, and go to state 836


State 701

  209 switch_case_list: '{' ';' . case_list '}'

    $default  reduce using rule 212 (case_list)

    case_list  go to state 837


State 702

  208 switch_case_list: '{' case_list . '}'
  214 case_list: case_list . "case (T_CASE)" expr case_separator $@53 inner_statement_list
  216          | case_list . "default (T_DEFAULT)" case_separator $@54 inner_statement_list

    "case (T_CASE)"        shift, and go to state 835
    "default (T_DEFAULT)"  shift, and go to state 836
    '}'                    shift, and go to state 838


State 703

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  535                 | '+' static_scalar_value .

    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 535 (static_operation)


State 704

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  536                 | '-' static_scalar_value .

    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 536 (static_operation)


State 705

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  512                 | '!' static_scalar_value .
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 512 (static_operation)


State 706

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  513                 | '~' static_scalar_value .
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 513 (static_operation)


State 707

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  555 non_empty_static_array_pair_list: static_scalar_value . "=> (T_DOUBLE_ARROW)" static_scalar_value
  556                                 | static_scalar_value .

    "or (T_LOGICAL_OR)"           shift, and go to state 715
    "xor (T_LOGICAL_XOR)"         shift, and go to state 716
    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 839

    $default  reduce using rule 556 (non_empty_static_array_pair_list)


State 708

  501 static_scalar_value: '[' static_array_pair_list . ']'

    ']'  shift, and go to state 840


State 709

  550 static_array_pair_list: non_empty_static_array_pair_list . possible_comma
  553 non_empty_static_array_pair_list: non_empty_static_array_pair_list . ',' static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value
  554                                 | non_empty_static_array_pair_list . ',' static_scalar_value

    ','  shift, and go to state 841

    $default  reduce using rule 551 (possible_comma)

    possible_comma  go to state 842


State 710

  500 static_scalar_value: "array (T_ARRAY)" '(' . static_array_pair_list ')'

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    $default  reduce using rule 549 (static_array_pair_list)

    namespace_name                    go to state 565
    class_name                        go to state 566
    common_scalar                     go to state 567
    static_class_constant             go to state 568
    static_scalar_value               go to state 707
    static_operation                  go to state 571
    static_array_pair_list            go to state 843
    non_empty_static_array_pair_list  go to state 709
    static_class_name_scalar          go to state 572


State 711

  459 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  498 static_scalar_value: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 844


State 712

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  460 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  499 static_scalar_value: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 460 (class_name)
    $default                       reduce using rule 499 (static_scalar_value)


State 713

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  537                 | '(' static_scalar_value . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 715
    "xor (T_LOGICAL_XOR)"         shift, and go to state 716
    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741
    ')'                           shift, and go to state 845


State 714

  493 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"
  657 static_class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "class (T_CLASS)"

    "identifier (T_STRING)"  shift, and go to state 846
    "class (T_CLASS)"        shift, and go to state 847


State 715

  522 static_operation: static_scalar_value "or (T_LOGICAL_OR)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 848
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 716

  520 static_operation: static_scalar_value "xor (T_LOGICAL_XOR)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 849
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 717

  521 static_operation: static_scalar_value "and (T_LOGICAL_AND)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 850
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 718

  533 static_operation: static_scalar_value '?' . ':' static_scalar_value
  534                 | static_scalar_value '?' . static_scalar_value ':' static_scalar_value

    ':'                                           shift, and go to state 851
    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 852
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 719

  524 static_operation: static_scalar_value "|| (T_BOOLEAN_OR)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 853
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 720

  523 static_operation: static_scalar_value "&& (T_BOOLEAN_AND)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 854
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 721

  514 static_operation: static_scalar_value '|' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 855
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 722

  516 static_operation: static_scalar_value '^' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 856
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 723

  515 static_operation: static_scalar_value '&' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 857
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 724

  526 static_operation: static_scalar_value "!== (T_IS_NOT_IDENTICAL)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 858
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 725

  525 static_operation: static_scalar_value "=== (T_IS_IDENTICAL)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 859
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 726

  528 static_operation: static_scalar_value "!= (T_IS_NOT_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 860
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 727

  527 static_operation: static_scalar_value "== (T_IS_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 861
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 728

  529 static_operation: static_scalar_value '<' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 862
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 729

  530 static_operation: static_scalar_value '>' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 863
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 730

  532 static_operation: static_scalar_value ">= (T_IS_GREATER_OR_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 864
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 731

  531 static_operation: static_scalar_value "<= (T_IS_SMALLER_OR_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 865
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 732

  518 static_operation: static_scalar_value ">> (T_SR)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 866
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 733

  517 static_operation: static_scalar_value "<< (T_SL)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 867
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 734

  506 static_operation: static_scalar_value '+' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 868
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 735

  507 static_operation: static_scalar_value '-' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 869
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 736

  519 static_operation: static_scalar_value '.' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 870
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 737

  508 static_operation: static_scalar_value '*' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 871
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 738

  510 static_operation: static_scalar_value '/' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 872
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 739

  511 static_operation: static_scalar_value '%' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 873
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 740

  509 static_operation: static_scalar_value "** (T_POW)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 874
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 741

  505 static_operation: static_scalar_value '[' . static_scalar_value ']'

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 875
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 742

   95 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' . catch_statement $@23 finally_statement

    "catch (T_CATCH)"  shift, and go to state 876

    $default  reduce using rule 152 (catch_statement)

    catch_statement  go to state 877


State 743

   32 use_function_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 878


State 744

   30 use_function_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 30 (use_function_declaration)


State 745

   27 use_function_declarations: use_function_declarations ',' use_function_declaration .

    $default  reduce using rule 27 (use_function_declarations)


State 746

   38 use_const_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 879


State 747

   36 use_const_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 36 (use_const_declaration)


State 748

   33 use_const_declarations: use_const_declarations ',' use_const_declaration .

    $default  reduce using rule 33 (use_const_declarations)


State 749

   26 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 26 (use_declaration)


State 750

  264 global_var: '$' '{' expr '}' .

    $default  reduce using rule 264 (global_var)


State 751

  266 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 880
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 752

  423 expr_without_variable: "static (T_STATIC)" function is_reference @77 '(' . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 129
    "array (T_ARRAY)"          shift, and go to state 797
    "callable (T_CALLABLE)"    shift, and go to state 798
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    ')'       reduce using rule 242 (parameter_list)
    $default  reduce using rule 247 (optional_class_type)

    namespace_name              go to state 650
    parameter_list              go to state 881
    non_empty_parameter_list    go to state 800
    parameter                   go to state 801
    optional_class_type         go to state 802
    fully_qualified_class_name  go to state 803


State 753

  169 unset_variables: unset_variables ',' unset_variable .

    $default  reduce using rule 169 (unset_variables)


State 754

   83 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' ';' .

    $default  reduce using rule 83 (unticked_statement)


State 755

  652 isset_variables: isset_variables ',' $@96 . isset_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 395
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 396
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    isset_variable                     go to state 882
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 756

  616 assignment_list_element: "list (T_LIST)" '(' . $@94 assignment_list ')'

    $default  reduce using rule 615 ($@94)

    $@94  go to state 883


State 757

  612 assignment_list: assignment_list ',' . assignment_list_element

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "list (T_LIST)"            shift, and go to state 597
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    $default  reduce using rule 617 (assignment_list_element)

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 598
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    assignment_list_element            go to state 884


State 758

  339 expr_without_variable: "list (T_LIST)" '(' $@65 assignment_list ')' . '=' expr

    '='  shift, and go to state 885


State 759

  639 encaps_var_offset: "identifier (T_STRING)" .

    $default  reduce using rule 639 (encaps_var_offset)


State 760

  641 encaps_var_offset: "variable (T_VARIABLE)" .

    $default  reduce using rule 641 (encaps_var_offset)


State 761

  640 encaps_var_offset: "number (T_NUM_STRING)" .

    $default  reduce using rule 640 (encaps_var_offset)


State 762

  634 encaps_var: "variable (T_VARIABLE)" '[' $@95 encaps_var_offset . ']'

    ']'  shift, and go to state 886


State 763

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  637 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr . ']' '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    ']'                           shift, and go to state 887


State 764

  444 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name @79 function_call_parameter_list .

    $default  reduce using rule 444 (function_call)


State 765

   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 top_statement_list '}' .

    $default  reduce using rule 15 (top_statement)


State 766

    3 top_statement_list: top_statement_list . $@1 top_statement
   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 top_statement_list . '}'

    '}'  shift, and go to state 888

    $default  reduce using rule 2 ($@1)

    $@1  go to state 4


State 767

  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 . tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 889


State 768

  114 tpl_inner_tpl_attr_anony: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 890


State 769

  116 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_name '=' $@27 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 891
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 770

  118 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_list tpl_inner_tpl_attr_name '=' . $@28 expr

    $default  reduce using rule 117 ($@28)

    $@28  go to state 892


State 771

  104 tpl_modifier_list: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '|' "identifier (T_STRING)" $@24 . tpl_modifier_param_list

    $default  reduce using rule 107 (tpl_modifier_param_list)

    tpl_modifier_param_list  go to state 893


State 772

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg . "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "in (T_IN)"  shift, and go to state 894


State 773

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' . $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 142 ($@36)

    $@36  go to state 895


State 774

  197 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" foreach_variable .

    $default  reduce using rule 197 (foreach_optional_arg)


State 775

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" . expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 896
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 776

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" . @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 132 (@29)

    @29  go to state 897


State 777

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable . foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 624

    $default  reduce using rule 196 (foreach_optional_arg)

    foreach_optional_arg  go to state 898


State 778

  106 tpl_modifier_list: tpl_modifier_list '|' "identifier (T_STRING)" $@25 . tpl_modifier_param_list

    $default  reduce using rule 107 (tpl_modifier_param_list)

    tpl_modifier_param_list  go to state 899


State 779

   48 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 900


State 780

  129 tpl_statement: "{include (T_TPL_INCLUDE)" "attr file (T_ATTR_FILE)" '=' expr "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 129 (tpl_statement)


State 781

  397 expr_without_variable: '(' new_expr ')' @71 instance_call .

    $default  reduce using rule 397 (expr_without_variable)


State 782

  335 instance_call: $@63 . chaining_instance_call

    '['                       shift, and go to state 901
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 902

    chaining_method_or_property  go to state 903
    chaining_dereference         go to state 904
    chaining_instance_call       go to state 905
    variable_property            go to state 906


State 783

  258 function_call_parameter: '&' w_variable .

    $default  reduce using rule 258 (function_call_parameter)


State 784

  259 function_call_parameter: "... (T_ELLIPSIS)" expr .
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 259 (function_call_parameter)


State 785

  255 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' . function_call_parameter

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '&'                                           shift, and go to state 639
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    "... (T_ELLIPSIS)"                            shift, and go to state 640
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    function_call_parameter            go to state 907
    new_expr                           go to state 100
    expr_without_variable              go to state 644
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 646
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 786

  252 function_call_parameter_list: '(' non_empty_function_call_parameter_list ')' .

    $default  reduce using rule 252 (function_call_parameter_list)


State 787

  253 function_call_parameter_list: '(' yield_expr ')' .

    $default  reduce using rule 253 (function_call_parameter_list)


State 788

   39 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 39 (constant_declaration)


State 789

  462 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 129

    namespace_name  go to state 908


State 790

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  463 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 463 (fully_qualified_class_name)


State 791

  193 implements_list: "implements (T_IMPLEMENTS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    interface_list              go to state 909
    fully_qualified_class_name  go to state 794


State 792

  180 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@51 implements_list . '{' class_statement_list '}'

    '{'  shift, and go to state 910


State 793

  191 interface_extends_list: "extends (T_EXTENDS)" interface_list .
  195 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 911

    $default  reduce using rule 191 (interface_extends_list)


State 794

  194 interface_list: fully_qualified_class_name .

    $default  reduce using rule 194 (interface_list)


State 795

  182 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@52 interface_extends_list '{' . class_statement_list '}'

    $default  reduce using rule 270 (class_statement_list)

    class_statement_list  go to state 912


State 796

  178 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@50 '(' . parameter_list ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 129
    "array (T_ARRAY)"          shift, and go to state 797
    "callable (T_CALLABLE)"    shift, and go to state 798
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    ')'       reduce using rule 242 (parameter_list)
    $default  reduce using rule 247 (optional_class_type)

    namespace_name              go to state 650
    parameter_list              go to state 913
    non_empty_parameter_list    go to state 800
    parameter                   go to state 801
    optional_class_type         go to state 802
    fully_qualified_class_name  go to state 803


State 797

  248 optional_class_type: "array (T_ARRAY)" .

    $default  reduce using rule 248 (optional_class_type)


State 798

  249 optional_class_type: "callable (T_CALLABLE)" .

    $default  reduce using rule 249 (optional_class_type)


State 799

  421 expr_without_variable: function is_reference @76 '(' parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 914


State 800

  241 parameter_list: non_empty_parameter_list .
  244 non_empty_parameter_list: non_empty_parameter_list . ',' parameter

    ','  shift, and go to state 915

    $default  reduce using rule 241 (parameter_list)


State 801

  243 non_empty_parameter_list: parameter .

    $default  reduce using rule 243 (non_empty_parameter_list)


State 802

  245 parameter: optional_class_type . is_reference is_variadic "variable (T_VARIABLE)"
  246          | optional_class_type . is_reference is_variadic "variable (T_VARIABLE)" '=' static_scalar

    '&'  shift, and go to state 271

    $default  reduce using rule 173 (is_reference)

    is_reference  go to state 916


State 803

  250 optional_class_type: fully_qualified_class_name .

    $default  reduce using rule 250 (optional_class_type)


State 804

  586 array_function_dereference: function_call $@92 '[' dim_offset ']' .

    $default  reduce using rule 586 (array_function_dereference)


State 805

  609 variable_name: '{' expr '}' .

    $default  reduce using rule 609 (variable_name)


State 806

  450 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@82 function_call_parameter_list .

    $default  reduce using rule 450 (function_call)


State 807

  448 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @81 function_call_parameter_list .

    $default  reduce using rule 448 (function_call)


State 808

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  402                      | expr '?' ':' $@74 expr .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 402 (expr_without_variable)


State 809

  400 expr_without_variable: expr '?' $@72 expr ':' . $@73 expr

    $default  reduce using rule 399 ($@73)

    $@73  go to state 917


State 810

  343 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference . $@66 ctor_arguments

    $default  reduce using rule 342 ($@66)

    $@66  go to state 918


State 811

  454 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@84 function_call_parameter_list .

    $default  reduce using rule 454 (function_call)


State 812

  452 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@83 function_call_parameter_list .

    $default  reduce using rule 452 (function_call)


State 813

  604 object_property: variable_without_objects $@93 .

    $default  reduce using rule 604 (object_property)


State 814

  566 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@88 object_property $@89 . method_or_not variable_properties

    '('       reduce using rule 574 (@91)
    $default  reduce using rule 578 (method_or_not)

    array_method_dereference  go to state 919
    method                    go to state 920
    @91                       go to state 921
    method_or_not             go to state 922


State 815

  605 object_dim_list: object_dim_list '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 923
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 816

  606 object_dim_list: object_dim_list '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 924
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 817

  624 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    w_variable                         go to state 925
    variable                           go to state 335
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 818

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  620 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 620 (non_empty_array_pair_list)


State 819

  468 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@86 object_property $@87 . dynamic_class_name_variable_properties

    $default  reduce using rule 471 (dynamic_class_name_variable_properties)

    dynamic_class_name_variable_properties  go to state 926


State 820

   57 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 . new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 229 (new_elseif_list)

    new_elseif_list  go to state 927


State 821

   54 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 elseif_list . else_single
  223 elseif_list: elseif_list . "elseif (T_ELSEIF)" parenthesis_expr $@55 statement

    "elseif (T_ELSEIF)"  shift, and go to state 928
    "else (T_ELSE)"      shift, and go to state 929

    "elseif (T_ELSEIF)"  [reduce using rule 232 (else_single)]
    "else (T_ELSE)"      [reduce using rule 232 (else_single)]
    $default             reduce using rule 232 (else_single)

    else_single  go to state 930


State 822

   63 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 parenthesis_expr . ';'

    ';'  shift, and go to state 931


State 823

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  220 while_statement: ':' inner_statement_list . "endwhile (T_ENDWHILE)" ';'

    "endwhile (T_ENDWHILE)"  shift, and go to state 932

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 824

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr . ';' $@14 for_expr ')' $@15 for_statement

    ';'  shift, and go to state 933


State 825

  323 non_empty_for_expr: non_empty_for_expr ',' $@61 expr .
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 323 (non_empty_for_expr)


State 826

   89 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable . foreach_optional_arg ')' $@20 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 624

    $default  reduce using rule 196 (foreach_optional_arg)

    foreach_optional_arg  go to state 934


State 827

   86 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable . foreach_optional_arg ')' $@18 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 624

    $default  reduce using rule 196 (foreach_optional_arg)

    foreach_optional_arg  go to state 935


State 828

  206 declare_list: "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 206 (declare_list)


State 829

  207 declare_list: declare_list ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 936


State 830

  205 declare_statement: ':' . inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 937


State 831

  204 declare_statement: statement .

    $default  reduce using rule 204 (declare_statement)


State 832

   91 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list ')' declare_statement .

    $default  reduce using rule 91 (unticked_statement)


State 833

  211 switch_case_list: ':' ';' case_list . "endswitch (T_ENDSWITCH)" ';'
  214 case_list: case_list . "case (T_CASE)" expr case_separator $@53 inner_statement_list
  216          | case_list . "default (T_DEFAULT)" case_separator $@54 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 938
    "case (T_CASE)"            shift, and go to state 835
    "default (T_DEFAULT)"      shift, and go to state 836


State 834

  210 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 939


State 835

  214 case_list: case_list "case (T_CASE)" . expr case_separator $@53 inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 940
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 836

  216 case_list: case_list "default (T_DEFAULT)" . case_separator $@54 inner_statement_list

    ':'  shift, and go to state 941
    ';'  shift, and go to state 942

    case_separator  go to state 943


State 837

  209 switch_case_list: '{' ';' case_list . '}'
  214 case_list: case_list . "case (T_CASE)" expr case_separator $@53 inner_statement_list
  216          | case_list . "default (T_DEFAULT)" case_separator $@54 inner_statement_list

    "case (T_CASE)"        shift, and go to state 835
    "default (T_DEFAULT)"  shift, and go to state 836
    '}'                    shift, and go to state 944


State 838

  208 switch_case_list: '{' case_list '}' .

    $default  reduce using rule 208 (switch_case_list)


State 839

  555 non_empty_static_array_pair_list: static_scalar_value "=> (T_DOUBLE_ARROW)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 945
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 840

  501 static_scalar_value: '[' static_array_pair_list ']' .

    $default  reduce using rule 501 (static_scalar_value)


State 841

  552 possible_comma: ',' .
  553 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' . static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value
  554                                 | non_empty_static_array_pair_list ',' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    $default  reduce using rule 552 (possible_comma)

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 946
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 842

  550 static_array_pair_list: non_empty_static_array_pair_list possible_comma .

    $default  reduce using rule 550 (static_array_pair_list)


State 843

  500 static_scalar_value: "array (T_ARRAY)" '(' static_array_pair_list . ')'

    ')'  shift, and go to state 947


State 844

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  459 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  498 static_scalar_value: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 459 (class_name)
    $default                       reduce using rule 498 (static_scalar_value)


State 845

  537 static_operation: '(' static_scalar_value ')' .

    $default  reduce using rule 537 (static_operation)


State 846

  493 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 493 (static_class_constant)


State 847

  657 static_class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)" .

    $default  reduce using rule 657 (static_class_name_scalar)


State 848

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  522                 | static_scalar_value "or (T_LOGICAL_OR)" static_scalar_value .
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "xor (T_LOGICAL_XOR)"         shift, and go to state 716
    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 522 (static_operation)


State 849

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  520                 | static_scalar_value "xor (T_LOGICAL_XOR)" static_scalar_value .
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 520 (static_operation)


State 850

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  521                 | static_scalar_value "and (T_LOGICAL_AND)" static_scalar_value .
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 521 (static_operation)


State 851

  533 static_operation: static_scalar_value '?' ':' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 948
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 852

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  534                 | static_scalar_value '?' static_scalar_value . ':' static_scalar_value

    "or (T_LOGICAL_OR)"           shift, and go to state 715
    "xor (T_LOGICAL_XOR)"         shift, and go to state 716
    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    ':'                           shift, and go to state 949
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741


State 853

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  524                 | static_scalar_value "|| (T_BOOLEAN_OR)" static_scalar_value .
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 524 (static_operation)


State 854

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  523                 | static_scalar_value "&& (T_BOOLEAN_AND)" static_scalar_value .
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 523 (static_operation)


State 855

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  514                 | static_scalar_value '|' static_scalar_value .
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 514 (static_operation)


State 856

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  516                 | static_scalar_value '^' static_scalar_value .
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 516 (static_operation)


State 857

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  515                 | static_scalar_value '&' static_scalar_value .
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 515 (static_operation)


State 858

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value "!== (T_IS_NOT_IDENTICAL)" static_scalar_value .
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 526 (static_operation)


State 859

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  525                 | static_scalar_value "=== (T_IS_IDENTICAL)" static_scalar_value .
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 525 (static_operation)


State 860

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  528                 | static_scalar_value "!= (T_IS_NOT_EQUAL)" static_scalar_value .
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 528 (static_operation)


State 861

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  527                 | static_scalar_value "== (T_IS_EQUAL)" static_scalar_value .
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 527 (static_operation)


State 862

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  529                 | static_scalar_value '<' static_scalar_value .
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"   shift, and go to state 732
    "<< (T_SL)"   shift, and go to state 733
    '+'           shift, and go to state 734
    '-'           shift, and go to state 735
    '.'           shift, and go to state 736
    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 529 (static_operation)


State 863

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  530                 | static_scalar_value '>' static_scalar_value .
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"   shift, and go to state 732
    "<< (T_SL)"   shift, and go to state 733
    '+'           shift, and go to state 734
    '-'           shift, and go to state 735
    '.'           shift, and go to state 736
    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 530 (static_operation)


State 864

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value .
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"   shift, and go to state 732
    "<< (T_SL)"   shift, and go to state 733
    '+'           shift, and go to state 734
    '-'           shift, and go to state 735
    '.'           shift, and go to state 736
    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 532 (static_operation)


State 865

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  531                 | static_scalar_value "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value .
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"   shift, and go to state 732
    "<< (T_SL)"   shift, and go to state 733
    '+'           shift, and go to state 734
    '-'           shift, and go to state 735
    '.'           shift, and go to state 736
    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 531 (static_operation)


State 866

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  518                 | static_scalar_value ">> (T_SR)" static_scalar_value .
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '+'           shift, and go to state 734
    '-'           shift, and go to state 735
    '.'           shift, and go to state 736
    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 518 (static_operation)


State 867

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  517                 | static_scalar_value "<< (T_SL)" static_scalar_value .
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '+'           shift, and go to state 734
    '-'           shift, and go to state 735
    '.'           shift, and go to state 736
    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 517 (static_operation)


State 868

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  506                 | static_scalar_value '+' static_scalar_value .
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 506 (static_operation)


State 869

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  507                 | static_scalar_value '-' static_scalar_value .
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 507 (static_operation)


State 870

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  519                 | static_scalar_value '.' static_scalar_value .
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '*'           shift, and go to state 737
    '/'           shift, and go to state 738
    '%'           shift, and go to state 739
    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 519 (static_operation)


State 871

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  508                 | static_scalar_value '*' static_scalar_value .
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 508 (static_operation)


State 872

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  510                 | static_scalar_value '/' static_scalar_value .
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 510 (static_operation)


State 873

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  511                 | static_scalar_value '%' static_scalar_value .
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 511 (static_operation)


State 874

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  509                 | static_scalar_value "** (T_POW)" static_scalar_value .
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 740
    '['           shift, and go to state 741

    $default  reduce using rule 509 (static_operation)


State 875

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  505                 | static_scalar_value '[' static_scalar_value . ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "or (T_LOGICAL_OR)"           shift, and go to state 715
    "xor (T_LOGICAL_XOR)"         shift, and go to state 716
    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741
    ']'                           shift, and go to state 950


State 876

  157 catch_statement: "catch (T_CATCH)" . '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list '}' $@46 additional_catches

    '('  shift, and go to state 951


State 877

   95 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement . $@23 finally_statement

    $default  reduce using rule 94 ($@23)

    $@23  go to state 952


State 878

   32 use_function_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 32 (use_function_declaration)


State 879

   38 use_const_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 38 (use_const_declaration)


State 880

  266 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 266 (static_var_list)


State 881

  423 expr_without_variable: "static (T_STATIC)" function is_reference @77 '(' parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 953


State 882

  652 isset_variables: isset_variables ',' $@96 isset_variable .

    $default  reduce using rule 652 (isset_variables)


State 883

  616 assignment_list_element: "list (T_LIST)" '(' $@94 . assignment_list ')'

    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "list (T_LIST)"            shift, and go to state 597
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    $default  reduce using rule 617 (assignment_list_element)

    namespace_name                     go to state 157
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 598
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    assignment_list                    go to state 954
    assignment_list_element            go to state 600


State 884

  612 assignment_list: assignment_list ',' assignment_list_element .

    $default  reduce using rule 612 (assignment_list)


State 885

  339 expr_without_variable: "list (T_LIST)" '(' $@65 assignment_list ')' '=' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 955
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 886

  634 encaps_var: "variable (T_VARIABLE)" '[' $@95 encaps_var_offset ']' .

    $default  reduce using rule 634 (encaps_var)


State 887

  637 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' . '}'

    '}'  shift, and go to state 956


State 888

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 top_statement_list '}' .

    $default  reduce using rule 13 (top_statement)


State 889

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block . "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 958
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 890

  114 tpl_inner_tpl_attr_anony: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 114 (tpl_inner_tpl_attr_anony)


State 891

  116 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_name '=' $@27 expr .
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 116 (tpl_inner_tpl_attr_list)


State 892

  118 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_list tpl_inner_tpl_attr_name '=' $@28 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 960
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 893

  104 tpl_modifier_list: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '|' "identifier (T_STRING)" $@24 tpl_modifier_param_list .
  109 tpl_modifier_param_list: tpl_modifier_param_list . ':' $@26 expr

    ':'  shift, and go to state 961

    $default  reduce using rule 104 (tpl_modifier_list)


State 894

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" . expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 962
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 895

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 . for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 320 (for_expr)

    namespace_name                     go to state 88
    for_expr                           go to state 963
    non_empty_for_expr                 go to state 357
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 358
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 896

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr . "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"            shift, and go to state 276
    "xor (T_LOGICAL_XOR)"          shift, and go to state 277
    "and (T_LOGICAL_AND)"          shift, and go to state 278
    '?'                            shift, and go to state 279
    "|| (T_BOOLEAN_OR)"            shift, and go to state 280
    "&& (T_BOOLEAN_AND)"           shift, and go to state 281
    '^'                            shift, and go to state 282
    '&'                            shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"     shift, and go to state 284
    "=== (T_IS_IDENTICAL)"         shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"          shift, and go to state 286
    "== (T_IS_EQUAL)"              shift, and go to state 287
    '<'                            shift, and go to state 288
    '>'                            shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"   shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"   shift, and go to state 291
    ">> (T_SR)"                    shift, and go to state 292
    "<< (T_SL)"                    shift, and go to state 293
    '+'                            shift, and go to state 294
    '-'                            shift, and go to state 295
    '.'                            shift, and go to state 296
    '*'                            shift, and go to state 297
    '/'                            shift, and go to state 298
    '%'                            shift, and go to state 299
    "instanceof (T_INSTANCEOF)"    shift, and go to state 300
    "** (T_POW)"                   shift, and go to state 301
    "tpl right delim (T_END_TPL)"  shift, and go to state 964


State 897

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 . foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    '&'                        shift, and go to state 432
    "identifier (T_STRING)"    shift, and go to state 129
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 154
    "namespace (T_NAMESPACE)"  shift, and go to state 155
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 156
    '$'                        shift, and go to state 85

    namespace_name                     go to state 157
    foreach_variable                   go to state 965
    function_call                      go to state 106
    class_name                         go to state 158
    variable                           go to state 435
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 161
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124


State 898

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg . "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 966


State 899

  106 tpl_modifier_list: tpl_modifier_list '|' "identifier (T_STRING)" $@25 tpl_modifier_param_list .
  109 tpl_modifier_param_list: tpl_modifier_param_list . ':' $@26 expr

    ':'  shift, and go to state 961

    $default  reduce using rule 106 (tpl_modifier_list)


State 900

   48 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 967


State 901

  328 chaining_dereference: '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 968
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 902

  571 variable_property: "-> (T_OBJECT_OPERATOR)" . object_property $@90 method_or_not

    "identifier (T_STRING)"  shift, and go to state 528
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 469
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 676
    reference_variable         go to state 471
    compound_variable          go to state 123
    object_property            go to state 969
    object_dim_list            go to state 678
    variable_name              go to state 679
    simple_indirect_reference  go to state 473


State 903

  325 chaining_method_or_property: chaining_method_or_property . variable_property
  332 chaining_instance_call: chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 902

    $default  reduce using rule 332 (chaining_instance_call)

    variable_property  go to state 970


State 904

  327 chaining_dereference: chaining_dereference . '[' dim_offset ']'
  330 chaining_instance_call: chaining_dereference . $@62 chaining_method_or_property
  331                       | chaining_dereference .

    '['  shift, and go to state 971

    "-> (T_OBJECT_OPERATOR)"  reduce using rule 329 ($@62)
    $default                  reduce using rule 331 (chaining_instance_call)

    $@62  go to state 972


State 905

  335 instance_call: $@63 chaining_instance_call .

    $default  reduce using rule 335 (instance_call)


State 906

  326 chaining_method_or_property: variable_property .

    $default  reduce using rule 326 (chaining_method_or_property)


State 907

  255 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' function_call_parameter .

    $default  reduce using rule 255 (non_empty_function_call_parameter_list)


State 908

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  462 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 262

    $default  reduce using rule 462 (fully_qualified_class_name)


State 909

  193 implements_list: "implements (T_IMPLEMENTS)" interface_list .
  195 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 911

    $default  reduce using rule 193 (implements_list)


State 910

  180 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@51 implements_list '{' . class_statement_list '}'

    $default  reduce using rule 270 (class_statement_list)

    class_statement_list  go to state 973


State 911

  195 interface_list: interface_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    fully_qualified_class_name  go to state 974


State 912

  182 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@52 interface_extends_list '{' class_statement_list . '}'
  269 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 975
    "use (T_USE)"              shift, and go to state 976
    "public (T_PUBLIC)"        shift, and go to state 977
    "protected (T_PROTECTED)"  shift, and go to state 978
    "private (T_PRIVATE)"      shift, and go to state 979
    "final (T_FINAL)"          shift, and go to state 980
    "abstract (T_ABSTRACT)"    shift, and go to state 981
    "static (T_STATIC)"        shift, and go to state 982
    "var (T_VAR)"              shift, and go to state 983
    '}'                        shift, and go to state 984

    $default  reduce using rule 302 (method_modifiers)

    class_statement             go to state 985
    trait_use_statement         go to state 986
    variable_modifiers          go to state 987
    method_modifiers            go to state 988
    non_empty_member_modifiers  go to state 989
    member_modifier             go to state 990
    class_constant_declaration  go to state 991


State 913

  178 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@50 '(' parameter_list . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 992


State 914

  421 expr_without_variable: function is_reference @76 '(' parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 993

    $default  reduce using rule 435 (lexical_vars)

    lexical_vars  go to state 994


State 915

  244 non_empty_parameter_list: non_empty_parameter_list ',' . parameter

    "identifier (T_STRING)"    shift, and go to state 129
    "array (T_ARRAY)"          shift, and go to state 797
    "callable (T_CALLABLE)"    shift, and go to state 798
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    $default  reduce using rule 247 (optional_class_type)

    namespace_name              go to state 650
    parameter                   go to state 995
    optional_class_type         go to state 802
    fully_qualified_class_name  go to state 803


State 916

  245 parameter: optional_class_type is_reference . is_variadic "variable (T_VARIABLE)"
  246          | optional_class_type is_reference . is_variadic "variable (T_VARIABLE)" '=' static_scalar

    "... (T_ELLIPSIS)"  shift, and go to state 996

    $default  reduce using rule 175 (is_variadic)

    is_variadic  go to state 997


State 917

  400 expr_without_variable: expr '?' $@72 expr ':' $@73 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 998
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 918

  343 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference $@66 . ctor_arguments

    '('  shift, and go to state 456

    $default  reduce using rule 479 (ctor_arguments)

    function_call_parameter_list  go to state 535
    ctor_arguments                go to state 999


State 919

  572 array_method_dereference: array_method_dereference . '[' dim_offset ']'
  577 method_or_not: array_method_dereference .

    '['  shift, and go to state 1000

    $default  reduce using rule 577 (method_or_not)


State 920

  573 array_method_dereference: method . '[' dim_offset ']'
  576 method_or_not: method .

    '['  shift, and go to state 1001

    $default  reduce using rule 576 (method_or_not)


State 921

  575 method: @91 . function_call_parameter_list

    '('  shift, and go to state 456

    function_call_parameter_list  go to state 1002


State 922

  566 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@88 object_property $@89 method_or_not . variable_properties

    $default  reduce using rule 569 (variable_properties)

    variable_properties  go to state 1003


State 923

  605 object_dim_list: object_dim_list '[' dim_offset . ']'

    ']'  shift, and go to state 1004


State 924

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr
  606 object_dim_list: object_dim_list '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    '}'                           shift, and go to state 1005


State 925

  624 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 624 (non_empty_array_pair_list)


State 926

  468 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@86 object_property $@87 dynamic_class_name_variable_properties .
  470 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties . dynamic_class_name_variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 1006

    $default  reduce using rule 468 (dynamic_class_name_reference)

    dynamic_class_name_variable_property  go to state 1007


State 927

   57 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list . new_else_single "endif (T_ENDIF)" ';'
  231 new_elseif_list: new_elseif_list . "elseif (T_ELSEIF)" parenthesis_expr ':' $@58 inner_statement_list

    "elseif (T_ELSEIF)"  shift, and go to state 1008
    "else (T_ELSE)"      shift, and go to state 1009

    $default  reduce using rule 237 (new_else_single)

    new_else_single  go to state 1010


State 928

  223 elseif_list: elseif_list "elseif (T_ELSEIF)" . parenthesis_expr $@55 statement

    '('  shift, and go to state 181

    parenthesis_expr  go to state 1011


State 929

  233 else_single: "else (T_ELSE)" . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 83
    '{'                                           shift, and go to state 84
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    statement                          go to state 1012
    unticked_statement                 go to state 92
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 102
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 111
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 930

   54 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 elseif_list else_single .

    $default  reduce using rule 54 (unticked_statement)


State 931

   63 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 parenthesis_expr ';' .

    $default  reduce using rule 63 (unticked_statement)


State 932

  220 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" . ';'

    ';'  shift, and go to state 1013


State 933

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' . $@14 for_expr ')' $@15 for_statement

    $default  reduce using rule 65 ($@14)

    $@14  go to state 1014


State 934

   89 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg . ')' $@20 foreach_statement

    ')'  shift, and go to state 1015


State 935

   86 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg . ')' $@18 foreach_statement

    ')'  shift, and go to state 1016


State 936

  207 declare_list: declare_list ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 1017
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 937

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  205 declare_statement: ':' inner_statement_list . "enddeclare (T_ENDDECLARE)" ';'

    "enddeclare (T_ENDDECLARE)"  shift, and go to state 1018

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 938

  211 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 1019


State 939

  210 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 210 (switch_case_list)


State 940

  214 case_list: case_list "case (T_CASE)" expr . case_separator $@53 inner_statement_list
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    ':'                           shift, and go to state 941
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    ';'                           shift, and go to state 942

    case_separator  go to state 1020


State 941

  217 case_separator: ':' .

    $default  reduce using rule 217 (case_separator)


State 942

  218 case_separator: ';' .

    $default  reduce using rule 218 (case_separator)


State 943

  216 case_list: case_list "default (T_DEFAULT)" case_separator . $@54 inner_statement_list

    $default  reduce using rule 215 ($@54)

    $@54  go to state 1021


State 944

  209 switch_case_list: '{' ';' case_list '}' .

    $default  reduce using rule 209 (switch_case_list)


State 945

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  555 non_empty_static_array_pair_list: static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value .

    "or (T_LOGICAL_OR)"           shift, and go to state 715
    "xor (T_LOGICAL_XOR)"         shift, and go to state 716
    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 555 (non_empty_static_array_pair_list)


State 946

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  553 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar_value . "=> (T_DOUBLE_ARROW)" static_scalar_value
  554                                 | non_empty_static_array_pair_list ',' static_scalar_value .

    "or (T_LOGICAL_OR)"           shift, and go to state 715
    "xor (T_LOGICAL_XOR)"         shift, and go to state 716
    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 1022

    $default  reduce using rule 554 (non_empty_static_array_pair_list)


State 947

  500 static_scalar_value: "array (T_ARRAY)" '(' static_array_pair_list ')' .

    $default  reduce using rule 500 (static_scalar_value)


State 948

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  533                 | static_scalar_value '?' ':' static_scalar_value .
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 533 (static_operation)


State 949

  534 static_operation: static_scalar_value '?' static_scalar_value ':' . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 1023
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 950

  505 static_operation: static_scalar_value '[' static_scalar_value ']' .

    $default  reduce using rule 505 (static_operation)


State 951

  157 catch_statement: "catch (T_CATCH)" '(' . $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list '}' $@46 additional_catches

    $default  reduce using rule 153 ($@43)

    $@43  go to state 1024


State 952

   95 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement $@23 . finally_statement

    "finally (T_FINALLY)"  shift, and go to state 1025

    $default  reduce using rule 158 (finally_statement)

    finally_statement  go to state 1026


State 953

  423 expr_without_variable: "static (T_STATIC)" function is_reference @77 '(' parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 993

    $default  reduce using rule 435 (lexical_vars)

    lexical_vars  go to state 1027


State 954

  612 assignment_list: assignment_list . ',' assignment_list_element
  616 assignment_list_element: "list (T_LIST)" '(' $@94 assignment_list . ')'

    ','  shift, and go to state 757
    ')'  shift, and go to state 1028


State 955

  339 expr_without_variable: "list (T_LIST)" '(' $@65 assignment_list ')' '=' expr .
  362                      | expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 339 (expr_without_variable)


State 956

  637 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}' .

    $default  reduce using rule 637 (encaps_var)


State 957

   99 tpl_block: tpl_block T_INLINE_HTML .

    $default  reduce using rule 99 (tpl_block)


State 958

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  141              | "tpl left delim (T_START_TPL)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" . $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 140 ($@35)

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    $@35                               go to state 1029
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 959

   98 tpl_block: tpl_block tpl_statement .

    $default  reduce using rule 98 (tpl_block)


State 960

  118 tpl_inner_tpl_attr_list: tpl_inner_tpl_attr_list tpl_inner_tpl_attr_name '=' $@28 expr .
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 118 (tpl_inner_tpl_attr_list)


State 961

  109 tpl_modifier_param_list: tpl_modifier_param_list ':' . $@26 expr

    $default  reduce using rule 108 ($@26)

    $@26  go to state 1030


State 962

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr . ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301
    ')'                           shift, and go to state 1031


State 963

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr . ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    ';'  shift, and go to state 1032


State 964

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" . $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 149 ($@41)

    $@41  go to state 1033


State 965

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable . foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 624

    $default  reduce using rule 196 (foreach_optional_arg)

    foreach_optional_arg  go to state 1034


State 966

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" . @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 136 (@32)

    @32  go to state 1035


State 967

   48 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 48 (inner_statement)


State 968

  328 chaining_dereference: '[' dim_offset . ']'

    ']'  shift, and go to state 1036


State 969

  571 variable_property: "-> (T_OBJECT_OPERATOR)" object_property . $@90 method_or_not

    $default  reduce using rule 570 ($@90)

    $@90  go to state 1037


State 970

  325 chaining_method_or_property: chaining_method_or_property variable_property .

    $default  reduce using rule 325 (chaining_method_or_property)


State 971

  327 chaining_dereference: chaining_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 1038
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 972

  330 chaining_instance_call: chaining_dereference $@62 . chaining_method_or_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 902

    chaining_method_or_property  go to state 1039
    variable_property            go to state 906


State 973

  180 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@51 implements_list '{' class_statement_list . '}'
  269 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 975
    "use (T_USE)"              shift, and go to state 976
    "public (T_PUBLIC)"        shift, and go to state 977
    "protected (T_PROTECTED)"  shift, and go to state 978
    "private (T_PRIVATE)"      shift, and go to state 979
    "final (T_FINAL)"          shift, and go to state 980
    "abstract (T_ABSTRACT)"    shift, and go to state 981
    "static (T_STATIC)"        shift, and go to state 982
    "var (T_VAR)"              shift, and go to state 983
    '}'                        shift, and go to state 1040

    $default  reduce using rule 302 (method_modifiers)

    class_statement             go to state 985
    trait_use_statement         go to state 986
    variable_modifiers          go to state 987
    method_modifiers            go to state 988
    non_empty_member_modifiers  go to state 989
    member_modifier             go to state 990
    class_constant_declaration  go to state 991


State 974

  195 interface_list: interface_list ',' fully_qualified_class_name .

    $default  reduce using rule 195 (interface_list)


State 975

  317 class_constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 1041


State 976

  277 trait_use_statement: "use (T_USE)" . trait_list trait_adaptations

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    trait_list                  go to state 1042
    fully_qualified_class_name  go to state 1043


State 977

  306 member_modifier: "public (T_PUBLIC)" .

    $default  reduce using rule 306 (member_modifier)


State 978

  307 member_modifier: "protected (T_PROTECTED)" .

    $default  reduce using rule 307 (member_modifier)


State 979

  308 member_modifier: "private (T_PRIVATE)" .

    $default  reduce using rule 308 (member_modifier)


State 980

  311 member_modifier: "final (T_FINAL)" .

    $default  reduce using rule 311 (member_modifier)


State 981

  310 member_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 310 (member_modifier)


State 982

  309 member_modifier: "static (T_STATIC)" .

    $default  reduce using rule 309 (member_modifier)


State 983

  301 variable_modifiers: "var (T_VAR)" .

    $default  reduce using rule 301 (variable_modifiers)


State 984

  182 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@52 interface_extends_list '{' class_statement_list '}' .

    $default  reduce using rule 182 (unticked_class_declaration_statement)


State 985

  269 class_statement_list: class_statement_list class_statement .

    $default  reduce using rule 269 (class_statement_list)


State 986

  274 class_statement: trait_use_statement .

    $default  reduce using rule 274 (class_statement)


State 987

  272 class_statement: variable_modifiers . $@59 class_variable_declaration ';'

    $default  reduce using rule 271 ($@59)

    $@59  go to state 1044


State 988

  276 class_statement: method_modifiers . function is_reference "identifier (T_STRING)" $@60 '(' parameter_list ')' method_body

    "function (T_FUNCTION)"  shift, and go to state 48

    function  go to state 1045


State 989

  300 variable_modifiers: non_empty_member_modifiers .
  303 method_modifiers: non_empty_member_modifiers .
  305 non_empty_member_modifiers: non_empty_member_modifiers . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 977
    "protected (T_PROTECTED)"  shift, and go to state 978
    "private (T_PRIVATE)"      shift, and go to state 979
    "final (T_FINAL)"          shift, and go to state 980
    "abstract (T_ABSTRACT)"    shift, and go to state 981
    "static (T_STATIC)"        shift, and go to state 982

    "function (T_FUNCTION)"  reduce using rule 303 (method_modifiers)
    $default                 reduce using rule 300 (variable_modifiers)

    member_modifier  go to state 1046


State 990

  304 non_empty_member_modifiers: member_modifier .

    $default  reduce using rule 304 (non_empty_member_modifiers)


State 991

  273 class_statement: class_constant_declaration . ';'
  316 class_constant_declaration: class_constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 1047
    ';'  shift, and go to state 1048


State 992

  178 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@50 '(' parameter_list ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 1049


State 993

  436 lexical_vars: "use (T_USE)" . '(' lexical_var_list ')'

    '('  shift, and go to state 1050


State 994

  421 expr_without_variable: function is_reference @76 '(' parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 1051


State 995

  244 non_empty_parameter_list: non_empty_parameter_list ',' parameter .

    $default  reduce using rule 244 (non_empty_parameter_list)


State 996

  176 is_variadic: "... (T_ELLIPSIS)" .

    $default  reduce using rule 176 (is_variadic)


State 997

  245 parameter: optional_class_type is_reference is_variadic . "variable (T_VARIABLE)"
  246          | optional_class_type is_reference is_variadic . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 1052


State 998

  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  400                      | expr '?' $@72 expr ':' $@73 expr .
  402                      | expr . '?' ':' $@74 expr

    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 400 (expr_without_variable)


State 999

  343 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference $@66 ctor_arguments .

    $default  reduce using rule 343 (expr_without_variable)


State 1000

  572 array_method_dereference: array_method_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 1053
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1001

  573 array_method_dereference: method '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 600 (dim_offset)

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 350
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    dim_offset                         go to state 1054
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1002

  575 method: @91 function_call_parameter_list .

    $default  reduce using rule 575 (method)


State 1003

  566 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@88 object_property $@89 method_or_not variable_properties .
  568 variable_properties: variable_properties . variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 902

    $default  reduce using rule 566 (variable)

    variable_property  go to state 1055


State 1004

  605 object_dim_list: object_dim_list '[' dim_offset ']' .

    $default  reduce using rule 605 (object_dim_list)


State 1005

  606 object_dim_list: object_dim_list '{' expr '}' .

    $default  reduce using rule 606 (object_dim_list)


State 1006

  472 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" . object_property

    "identifier (T_STRING)"  shift, and go to state 528
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 469
    '$'                      shift, and go to state 85

    variable_without_objects   go to state 676
    reference_variable         go to state 471
    compound_variable          go to state 123
    object_property            go to state 1056
    object_dim_list            go to state 678
    variable_name              go to state 679
    simple_indirect_reference  go to state 473


State 1007

  470 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property .

    $default  reduce using rule 470 (dynamic_class_name_variable_properties)


State 1008

  231 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" . parenthesis_expr ':' $@58 inner_statement_list

    '('  shift, and go to state 181

    parenthesis_expr  go to state 1057


State 1009

  238 new_else_single: "else (T_ELSE)" . ':' inner_statement_list

    ':'  shift, and go to state 1058


State 1010

   57 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single . "endif (T_ENDIF)" ';'

    "endif (T_ENDIF)"  shift, and go to state 1059


State 1011

  223 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr . $@55 statement

    $default  reduce using rule 222 ($@55)

    $@55  go to state 1060


State 1012

  233 else_single: "else (T_ELSE)" statement .

    $default  reduce using rule 233 (else_single)


State 1013

  220 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" ';' .

    $default  reduce using rule 220 (while_statement)


State 1014

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 . for_expr ')' $@15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 320 (for_expr)

    namespace_name                     go to state 88
    for_expr                           go to state 1061
    non_empty_for_expr                 go to state 357
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 358
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1015

   89 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' . $@20 foreach_statement

    $default  reduce using rule 88 ($@20)

    $@20  go to state 1062


State 1016

   86 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' . $@18 foreach_statement

    $default  reduce using rule 85 ($@18)

    $@18  go to state 1063


State 1017

  207 declare_list: declare_list ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 207 (declare_list)


State 1018

  205 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" . ';'

    ';'  shift, and go to state 1064


State 1019

  211 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 211 (switch_case_list)


State 1020

  214 case_list: case_list "case (T_CASE)" expr case_separator . $@53 inner_statement_list

    $default  reduce using rule 213 ($@53)

    $@53  go to state 1065


State 1021

  216 case_list: case_list "default (T_DEFAULT)" case_separator $@54 . inner_statement_list

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1066


State 1022

  553 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar_value "=> (T_DOUBLE_ARROW)" . static_scalar_value

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar_value       go to state 1067
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 1023

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  534                 | static_scalar_value '?' static_scalar_value ':' static_scalar_value .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 534 (static_operation)


State 1024

  157 catch_statement: "catch (T_CATCH)" '(' $@43 . fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list '}' $@46 additional_catches

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    fully_qualified_class_name  go to state 1068


State 1025

  160 finally_statement: "finally (T_FINALLY)" . $@47 '{' inner_statement_list '}'

    $default  reduce using rule 159 ($@47)

    $@47  go to state 1069


State 1026

   95 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement $@23 finally_statement .

    $default  reduce using rule 95 (unticked_statement)


State 1027

  423 expr_without_variable: "static (T_STATIC)" function is_reference @77 '(' parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 1070


State 1028

  616 assignment_list_element: "list (T_LIST)" '(' $@94 assignment_list ')' .

    $default  reduce using rule 616 (assignment_list_element)


State 1029

  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 . tpl_elseif_list tpl_else_single tpl_endif

    $default  reduce using rule 224 (tpl_elseif_list)

    tpl_elseif_list  go to state 1071


State 1030

  109 tpl_modifier_param_list: tpl_modifier_param_list ':' $@26 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 1072
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1031

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' . "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1073


State 1032

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' . $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 143 ($@37)

    $@37  go to state 1074


State 1033

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 . tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 1075


State 1034

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg . ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    ')'  shift, and go to state 1076


State 1035

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 . tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 1077


State 1036

  328 chaining_dereference: '[' dim_offset ']' .

    $default  reduce using rule 328 (chaining_dereference)


State 1037

  571 variable_property: "-> (T_OBJECT_OPERATOR)" object_property $@90 . method_or_not

    '('       reduce using rule 574 (@91)
    $default  reduce using rule 578 (method_or_not)

    array_method_dereference  go to state 919
    method                    go to state 920
    @91                       go to state 921
    method_or_not             go to state 1078


State 1038

  327 chaining_dereference: chaining_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 1079


State 1039

  325 chaining_method_or_property: chaining_method_or_property . variable_property
  330 chaining_instance_call: chaining_dereference $@62 chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 902

    $default  reduce using rule 330 (chaining_instance_call)

    variable_property  go to state 970


State 1040

  180 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@51 implements_list '{' class_statement_list '}' .

    $default  reduce using rule 180 (unticked_class_declaration_statement)


State 1041

  317 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 1080


State 1042

  277 trait_use_statement: "use (T_USE)" trait_list . trait_adaptations
  279 trait_list: trait_list . ',' fully_qualified_class_name

    ','  shift, and go to state 1081
    ';'  shift, and go to state 1082
    '{'  shift, and go to state 1083

    trait_adaptations  go to state 1084


State 1043

  278 trait_list: fully_qualified_class_name .

    $default  reduce using rule 278 (trait_list)


State 1044

  272 class_statement: variable_modifiers $@59 . class_variable_declaration ';'

    "variable (T_VARIABLE)"  shift, and go to state 1085

    class_variable_declaration  go to state 1086


State 1045

  276 class_statement: method_modifiers function . is_reference "identifier (T_STRING)" $@60 '(' parameter_list ')' method_body

    '&'  shift, and go to state 271

    $default  reduce using rule 173 (is_reference)

    is_reference  go to state 1087


State 1046

  305 non_empty_member_modifiers: non_empty_member_modifiers member_modifier .

    $default  reduce using rule 305 (non_empty_member_modifiers)


State 1047

  316 class_constant_declaration: class_constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 1088


State 1048

  273 class_statement: class_constant_declaration ';' .

    $default  reduce using rule 273 (class_statement)


State 1049

  178 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@50 '(' parameter_list ')' '{' . inner_statement_list '}'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1089


State 1050

  436 lexical_vars: "use (T_USE)" '(' . lexical_var_list ')'

    '&'                      shift, and go to state 1090
    "variable (T_VARIABLE)"  shift, and go to state 1091

    lexical_var_list  go to state 1092


State 1051

  421 expr_without_variable: function is_reference @76 '(' parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1093


State 1052

  245 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)" .
  246          | optional_class_type is_reference is_variadic "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 1094

    $default  reduce using rule 245 (parameter)


State 1053

  572 array_method_dereference: array_method_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 1095


State 1054

  573 array_method_dereference: method '[' dim_offset . ']'

    ']'  shift, and go to state 1096


State 1055

  568 variable_properties: variable_properties variable_property .

    $default  reduce using rule 568 (variable_properties)


State 1056

  472 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property .

    $default  reduce using rule 472 (dynamic_class_name_variable_property)


State 1057

  231 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr . ':' $@58 inner_statement_list

    ':'  shift, and go to state 1097


State 1058

  238 new_else_single: "else (T_ELSE)" ':' . inner_statement_list

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1098


State 1059

   57 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 1099


State 1060

  223 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr $@55 . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 83
    '{'                                           shift, and go to state 84
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    statement                          go to state 1100
    unticked_statement                 go to state 92
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 102
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 111
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1061

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr . ')' $@15 for_statement

    ')'  shift, and go to state 1101


State 1062

   89 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 1102
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 83
    '{'                                           shift, and go to state 84
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    statement                          go to state 1103
    unticked_statement                 go to state 92
    foreach_statement                  go to state 1104
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 102
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 111
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1063

   86 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 1102
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 83
    '{'                                           shift, and go to state 84
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    statement                          go to state 1103
    unticked_statement                 go to state 92
    foreach_statement                  go to state 1105
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 102
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 111
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1064

  205 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';' .

    $default  reduce using rule 205 (declare_statement)


State 1065

  214 case_list: case_list "case (T_CASE)" expr case_separator $@53 . inner_statement_list

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1106


State 1066

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  216 case_list: case_list "default (T_DEFAULT)" case_separator $@54 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 216 (case_list)
    "case (T_CASE)"            reduce using rule 216 (case_list)
    "default (T_DEFAULT)"      reduce using rule 216 (case_list)
    '}'                        reduce using rule 216 (case_list)
    $default                   reduce using rule 41 ($@4)

    $@4  go to state 444


State 1067

  505 static_operation: static_scalar_value . '[' static_scalar_value ']'
  506                 | static_scalar_value . '+' static_scalar_value
  507                 | static_scalar_value . '-' static_scalar_value
  508                 | static_scalar_value . '*' static_scalar_value
  509                 | static_scalar_value . "** (T_POW)" static_scalar_value
  510                 | static_scalar_value . '/' static_scalar_value
  511                 | static_scalar_value . '%' static_scalar_value
  514                 | static_scalar_value . '|' static_scalar_value
  515                 | static_scalar_value . '&' static_scalar_value
  516                 | static_scalar_value . '^' static_scalar_value
  517                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  518                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  519                 | static_scalar_value . '.' static_scalar_value
  520                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  521                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  522                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  523                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  524                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  525                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  526                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  527                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  528                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  529                 | static_scalar_value . '<' static_scalar_value
  530                 | static_scalar_value . '>' static_scalar_value
  531                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  532                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  533                 | static_scalar_value . '?' ':' static_scalar_value
  534                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  553 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value .

    "or (T_LOGICAL_OR)"           shift, and go to state 715
    "xor (T_LOGICAL_XOR)"         shift, and go to state 716
    "and (T_LOGICAL_AND)"         shift, and go to state 717
    '?'                           shift, and go to state 718
    "|| (T_BOOLEAN_OR)"           shift, and go to state 719
    "&& (T_BOOLEAN_AND)"          shift, and go to state 720
    '|'                           shift, and go to state 721
    '^'                           shift, and go to state 722
    '&'                           shift, and go to state 723
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 724
    "=== (T_IS_IDENTICAL)"        shift, and go to state 725
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 726
    "== (T_IS_EQUAL)"             shift, and go to state 727
    '<'                           shift, and go to state 728
    '>'                           shift, and go to state 729
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 730
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 731
    ">> (T_SR)"                   shift, and go to state 732
    "<< (T_SL)"                   shift, and go to state 733
    '+'                           shift, and go to state 734
    '-'                           shift, and go to state 735
    '.'                           shift, and go to state 736
    '*'                           shift, and go to state 737
    '/'                           shift, and go to state 738
    '%'                           shift, and go to state 739
    "** (T_POW)"                  shift, and go to state 740
    '['                           shift, and go to state 741

    $default  reduce using rule 553 (non_empty_static_array_pair_list)


State 1068

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name . $@44 "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list '}' $@46 additional_catches

    $default  reduce using rule 154 ($@44)

    $@44  go to state 1107


State 1069

  160 finally_statement: "finally (T_FINALLY)" $@47 . '{' inner_statement_list '}'

    '{'  shift, and go to state 1108


State 1070

  423 expr_without_variable: "static (T_STATIC)" function is_reference @77 '(' parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1109


State 1071

  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list . tpl_else_single tpl_endif
  226 tpl_elseif_list: tpl_elseif_list . "elseif (T_ELSEIF)" expr "tpl right delim (T_END_TPL)" $@56 tpl_block "tpl left delim (T_START_TPL)"
  228                | tpl_elseif_list . "else (T_ELSE)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@57 tpl_block "tpl left delim (T_START_TPL)"

    "elseif (T_ELSEIF)"  shift, and go to state 1110
    "else (T_ELSE)"      shift, and go to state 1111

    $default  reduce using rule 234 (tpl_else_single)

    tpl_else_single  go to state 1112


State 1072

  109 tpl_modifier_param_list: tpl_modifier_param_list ':' $@26 expr .
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 276
    "xor (T_LOGICAL_XOR)"         shift, and go to state 277
    "and (T_LOGICAL_AND)"         shift, and go to state 278
    '?'                           shift, and go to state 279
    "|| (T_BOOLEAN_OR)"           shift, and go to state 280
    "&& (T_BOOLEAN_AND)"          shift, and go to state 281
    '^'                           shift, and go to state 282
    '&'                           shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 284
    "=== (T_IS_IDENTICAL)"        shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 286
    "== (T_IS_EQUAL)"             shift, and go to state 287
    '<'                           shift, and go to state 288
    '>'                           shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 291
    ">> (T_SR)"                   shift, and go to state 292
    "<< (T_SL)"                   shift, and go to state 293
    '+'                           shift, and go to state 294
    '-'                           shift, and go to state 295
    '.'                           shift, and go to state 296
    '*'                           shift, and go to state 297
    '/'                           shift, and go to state 298
    '%'                           shift, and go to state 299
    "instanceof (T_INSTANCEOF)"   shift, and go to state 300
    "** (T_POW)"                  shift, and go to state 301

    $default  reduce using rule 109 (tpl_modifier_param_list)


State 1073

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" . $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 146 ($@39)

    $@39  go to state 1113


State 1074

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 . for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 320 (for_expr)

    namespace_name                     go to state 88
    for_expr                           go to state 1114
    non_empty_for_expr                 go to state 357
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 358
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1075

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block . "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 1115
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 1076

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' . "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1116


State 1077

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block . "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 1117
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 1078

  571 variable_property: "-> (T_OBJECT_OPERATOR)" object_property $@90 method_or_not .

    $default  reduce using rule 571 (variable_property)


State 1079

  327 chaining_dereference: chaining_dereference '[' dim_offset ']' .

    $default  reduce using rule 327 (chaining_dereference)


State 1080

  317 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 1118
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 1081

  279 trait_list: trait_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    fully_qualified_class_name  go to state 1119


State 1082

  280 trait_adaptations: ';' .

    $default  reduce using rule 280 (trait_adaptations)


State 1083

  281 trait_adaptations: '{' . trait_adaptation_list '}'

    "identifier (T_STRING)"    shift, and go to state 1120
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    $default  reduce using rule 282 (trait_adaptation_list)

    namespace_name                          go to state 650
    trait_adaptation_list                   go to state 1121
    non_empty_trait_adaptation_list         go to state 1122
    trait_adaptation_statement              go to state 1123
    trait_precedence                        go to state 1124
    trait_method_reference                  go to state 1125
    trait_method_reference_fully_qualified  go to state 1126
    trait_alias                             go to state 1127
    fully_qualified_class_name              go to state 1128


State 1084

  277 trait_use_statement: "use (T_USE)" trait_list trait_adaptations .

    $default  reduce using rule 277 (trait_use_statement)


State 1085

  314 class_variable_declaration: "variable (T_VARIABLE)" .
  315                           | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 1129

    $default  reduce using rule 314 (class_variable_declaration)


State 1086

  272 class_statement: variable_modifiers $@59 class_variable_declaration . ';'
  312 class_variable_declaration: class_variable_declaration . ',' "variable (T_VARIABLE)"
  313                           | class_variable_declaration . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 1130
    ';'  shift, and go to state 1131


State 1087

  276 class_statement: method_modifiers function is_reference . "identifier (T_STRING)" $@60 '(' parameter_list ')' method_body

    "identifier (T_STRING)"  shift, and go to state 1132


State 1088

  316 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 1133


State 1089

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  178 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@50 '(' parameter_list ')' '{' inner_statement_list . '}'

    '}'  shift, and go to state 1134

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 1090

  440 lexical_var_list: '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 1135


State 1091

  439 lexical_var_list: "variable (T_VARIABLE)" .

    $default  reduce using rule 439 (lexical_var_list)


State 1092

  436 lexical_vars: "use (T_USE)" '(' lexical_var_list . ')'
  437 lexical_var_list: lexical_var_list . ',' "variable (T_VARIABLE)"
  438                 | lexical_var_list . ',' '&' "variable (T_VARIABLE)"

    ','  shift, and go to state 1136
    ')'  shift, and go to state 1137


State 1093

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  421 expr_without_variable: function is_reference @76 '(' parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 1138

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 1094

  246 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 1139
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 1095

  572 array_method_dereference: array_method_dereference '[' dim_offset ']' .

    $default  reduce using rule 572 (array_method_dereference)


State 1096

  573 array_method_dereference: method '[' dim_offset ']' .

    $default  reduce using rule 573 (array_method_dereference)


State 1097

  231 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' . $@58 inner_statement_list

    $default  reduce using rule 230 ($@58)

    $@58  go to state 1140


State 1098

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  238 new_else_single: "else (T_ELSE)" ':' inner_statement_list .

    "endif (T_ENDIF)"  reduce using rule 238 (new_else_single)
    $default           reduce using rule 41 ($@4)

    $@4  go to state 444


State 1099

   57 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';' .

    $default  reduce using rule 57 (unticked_statement)


State 1100

  223 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr $@55 statement .

    $default  reduce using rule 223 (elseif_list)


State 1101

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' . $@15 for_statement

    $default  reduce using rule 66 ($@15)

    $@15  go to state 1141


State 1102

  203 foreach_statement: ':' . inner_statement_list "endforeach (T_ENDFOREACH)" ';'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1142


State 1103

  202 foreach_statement: statement .

    $default  reduce using rule 202 (foreach_statement)


State 1104

   89 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement .

    $default  reduce using rule 89 (unticked_statement)


State 1105

   86 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement .

    $default  reduce using rule 86 (unticked_statement)


State 1106

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  214 case_list: case_list "case (T_CASE)" expr case_separator $@53 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 214 (case_list)
    "case (T_CASE)"            reduce using rule 214 (case_list)
    "default (T_DEFAULT)"      reduce using rule 214 (case_list)
    '}'                        reduce using rule 214 (case_list)
    $default                   reduce using rule 41 ($@4)

    $@4  go to state 444


State 1107

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 . "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list '}' $@46 additional_catches

    "variable (T_VARIABLE)"  shift, and go to state 1143


State 1108

  160 finally_statement: "finally (T_FINALLY)" $@47 '{' . inner_statement_list '}'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1144


State 1109

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  423 expr_without_variable: "static (T_STATIC)" function is_reference @77 '(' parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 1145

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 1110

  226 tpl_elseif_list: tpl_elseif_list "elseif (T_ELSEIF)" . expr "tpl right delim (T_END_TPL)" $@56 tpl_block "tpl left delim (T_START_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 1146
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1111

  228 tpl_elseif_list: tpl_elseif_list "else (T_ELSE)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@57 tpl_block "tpl left delim (T_START_TPL)"
  235 tpl_else_single: "else (T_ELSE)" . "tpl right delim (T_END_TPL)" tpl_block "tpl left delim (T_START_TPL)"

    "if (T_IF)"                    shift, and go to state 1147
    "tpl right delim (T_END_TPL)"  shift, and go to state 1148


State 1112

  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single . tpl_endif

    '/'  shift, and go to state 1149

    tpl_endif  go to state 1150


State 1113

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 . tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 1151


State 1114

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr . ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    ')'  shift, and go to state 1152


State 1115

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" . $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 150 ($@42)

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    $@42                               go to state 1153
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1116

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" . $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 133 ($@30)

    $@30  go to state 1154


State 1117

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" . $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 137 ($@33)

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    $@33                               go to state 1155
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1118

  317 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 317 (class_constant_declaration)


State 1119

  279 trait_list: trait_list ',' fully_qualified_class_name .

    $default  reduce using rule 279 (trait_list)


State 1120

    5 namespace_name: "identifier (T_STRING)" .
  291 trait_method_reference: "identifier (T_STRING)" .

    "as (T_AS)"  reduce using rule 291 (trait_method_reference)
    $default     reduce using rule 5 (namespace_name)


State 1121

  281 trait_adaptations: '{' trait_adaptation_list . '}'

    '}'  shift, and go to state 1156


State 1122

  283 trait_adaptation_list: non_empty_trait_adaptation_list .
  285 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list . trait_adaptation_statement

    "identifier (T_STRING)"    shift, and go to state 1120
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    $default  reduce using rule 283 (trait_adaptation_list)

    namespace_name                          go to state 650
    trait_adaptation_statement              go to state 1157
    trait_precedence                        go to state 1124
    trait_method_reference                  go to state 1125
    trait_method_reference_fully_qualified  go to state 1126
    trait_alias                             go to state 1127
    fully_qualified_class_name              go to state 1128


State 1123

  284 non_empty_trait_adaptation_list: trait_adaptation_statement .

    $default  reduce using rule 284 (non_empty_trait_adaptation_list)


State 1124

  286 trait_adaptation_statement: trait_precedence . ';'

    ';'  shift, and go to state 1158


State 1125

  294 trait_alias: trait_method_reference . "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  295            | trait_method_reference . "as (T_AS)" member_modifier

    "as (T_AS)"  shift, and go to state 1159


State 1126

  288 trait_precedence: trait_method_reference_fully_qualified . "insteadof (T_INSTEADOF)" trait_reference_list
  292 trait_method_reference: trait_method_reference_fully_qualified .

    "insteadof (T_INSTEADOF)"  shift, and go to state 1160

    $default  reduce using rule 292 (trait_method_reference)


State 1127

  287 trait_adaptation_statement: trait_alias . ';'

    ';'  shift, and go to state 1161


State 1128

  293 trait_method_reference_fully_qualified: fully_qualified_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 1162


State 1129

  315 class_variable_declaration: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 1163
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 1130

  312 class_variable_declaration: class_variable_declaration ',' . "variable (T_VARIABLE)"
  313                           | class_variable_declaration ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 1164


State 1131

  272 class_statement: variable_modifiers $@59 class_variable_declaration ';' .

    $default  reduce using rule 272 (class_statement)


State 1132

  276 class_statement: method_modifiers function is_reference "identifier (T_STRING)" . $@60 '(' parameter_list ')' method_body

    $default  reduce using rule 275 ($@60)

    $@60  go to state 1165


State 1133

  316 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 1166
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 1134

  178 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@50 '(' parameter_list ')' '{' inner_statement_list '}' .

    $default  reduce using rule 178 (unticked_function_declaration_statement)


State 1135

  440 lexical_var_list: '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 440 (lexical_var_list)


State 1136

  437 lexical_var_list: lexical_var_list ',' . "variable (T_VARIABLE)"
  438                 | lexical_var_list ',' . '&' "variable (T_VARIABLE)"

    '&'                      shift, and go to state 1167
    "variable (T_VARIABLE)"  shift, and go to state 1168


State 1137

  436 lexical_vars: "use (T_USE)" '(' lexical_var_list ')' .

    $default  reduce using rule 436 (lexical_vars)


State 1138

  421 expr_without_variable: function is_reference @76 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 421 (expr_without_variable)


State 1139

  246 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 246 (parameter)


State 1140

  231 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' $@58 . inner_statement_list

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1169


State 1141

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 . for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 1170
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    ';'                                           shift, and go to state 83
    '{'                                           shift, and go to state 84
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    statement                          go to state 1171
    unticked_statement                 go to state 92
    for_statement                      go to state 1172
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    yield_expr                         go to state 102
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 111
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1142

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  203 foreach_statement: ':' inner_statement_list . "endforeach (T_ENDFOREACH)" ';'

    "endforeach (T_ENDFOREACH)"  shift, and go to state 1173

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 1143

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" . ')' $@45 '{' inner_statement_list '}' $@46 additional_catches

    ')'  shift, and go to state 1174


State 1144

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  160 finally_statement: "finally (T_FINALLY)" $@47 '{' inner_statement_list . '}'

    '}'  shift, and go to state 1175

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 1145

  423 expr_without_variable: "static (T_STATIC)" function is_reference @77 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 423 (expr_without_variable)


State 1146

  226 tpl_elseif_list: tpl_elseif_list "elseif (T_ELSEIF)" expr . "tpl right delim (T_END_TPL)" $@56 tpl_block "tpl left delim (T_START_TPL)"
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"            shift, and go to state 276
    "xor (T_LOGICAL_XOR)"          shift, and go to state 277
    "and (T_LOGICAL_AND)"          shift, and go to state 278
    '?'                            shift, and go to state 279
    "|| (T_BOOLEAN_OR)"            shift, and go to state 280
    "&& (T_BOOLEAN_AND)"           shift, and go to state 281
    '^'                            shift, and go to state 282
    '&'                            shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"     shift, and go to state 284
    "=== (T_IS_IDENTICAL)"         shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"          shift, and go to state 286
    "== (T_IS_EQUAL)"              shift, and go to state 287
    '<'                            shift, and go to state 288
    '>'                            shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"   shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"   shift, and go to state 291
    ">> (T_SR)"                    shift, and go to state 292
    "<< (T_SL)"                    shift, and go to state 293
    '+'                            shift, and go to state 294
    '-'                            shift, and go to state 295
    '.'                            shift, and go to state 296
    '*'                            shift, and go to state 297
    '/'                            shift, and go to state 298
    '%'                            shift, and go to state 299
    "instanceof (T_INSTANCEOF)"    shift, and go to state 300
    "** (T_POW)"                   shift, and go to state 301
    "tpl right delim (T_END_TPL)"  shift, and go to state 1176


State 1147

  228 tpl_elseif_list: tpl_elseif_list "else (T_ELSE)" "if (T_IF)" . expr "tpl right delim (T_END_TPL)" $@57 tpl_block "tpl left delim (T_START_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    new_expr                           go to state 100
    expr_without_variable              go to state 101
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 1177
    parenthesis_expr                   go to state 112
    r_variable                         go to state 113
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1148

  235 tpl_else_single: "else (T_ELSE)" "tpl right delim (T_END_TPL)" . tpl_block "tpl left delim (T_START_TPL)"

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 1178


State 1149

  236 tpl_endif: '/' . "if (T_IF)" "tpl right delim (T_END_TPL)"

    "if (T_IF)"  shift, and go to state 1179


State 1150

  141 tpl_statement: "tpl left delim (T_START_TPL)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif .

    $default  reduce using rule 141 (tpl_statement)


State 1151

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block . "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 1180
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 1152

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' . "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1181


State 1153

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 . tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "else (T_ELSE)"  shift, and go to state 1182

    $default  reduce using rule 239 (tpl_loopelse)

    tpl_loopelse  go to state 1183


State 1154

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 . tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 1184


State 1155

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 . tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    "else (T_ELSE)"  shift, and go to state 1182

    $default  reduce using rule 239 (tpl_loopelse)

    tpl_loopelse  go to state 1185


State 1156

  281 trait_adaptations: '{' trait_adaptation_list '}' .

    $default  reduce using rule 281 (trait_adaptations)


State 1157

  285 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list trait_adaptation_statement .

    $default  reduce using rule 285 (non_empty_trait_adaptation_list)


State 1158

  286 trait_adaptation_statement: trait_precedence ';' .

    $default  reduce using rule 286 (trait_adaptation_statement)


State 1159

  294 trait_alias: trait_method_reference "as (T_AS)" . trait_modifiers "identifier (T_STRING)"
  295            | trait_method_reference "as (T_AS)" . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 977
    "protected (T_PROTECTED)"  shift, and go to state 978
    "private (T_PRIVATE)"      shift, and go to state 979
    "final (T_FINAL)"          shift, and go to state 980
    "abstract (T_ABSTRACT)"    shift, and go to state 981
    "static (T_STATIC)"        shift, and go to state 982

    $default  reduce using rule 296 (trait_modifiers)

    trait_modifiers  go to state 1186
    member_modifier  go to state 1187


State 1160

  288 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" . trait_reference_list

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    trait_reference_list        go to state 1188
    fully_qualified_class_name  go to state 1189


State 1161

  287 trait_adaptation_statement: trait_alias ';' .

    $default  reduce using rule 287 (trait_adaptation_statement)


State 1162

  293 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 1190


State 1163

  315 class_variable_declaration: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 315 (class_variable_declaration)


State 1164

  312 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" .
  313                           | class_variable_declaration ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 1191

    $default  reduce using rule 312 (class_variable_declaration)


State 1165

  276 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@60 . '(' parameter_list ')' method_body

    '('  shift, and go to state 1192


State 1166

  316 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 316 (class_constant_declaration)


State 1167

  438 lexical_var_list: lexical_var_list ',' '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 1193


State 1168

  437 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)" .

    $default  reduce using rule 437 (lexical_var_list)


State 1169

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  231 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' $@58 inner_statement_list .

    "elseif (T_ELSEIF)"  reduce using rule 231 (new_elseif_list)
    "else (T_ELSE)"      reduce using rule 231 (new_elseif_list)
    "endif (T_ENDIF)"    reduce using rule 231 (new_elseif_list)
    $default             reduce using rule 41 ($@4)

    $@4  go to state 444


State 1170

  201 for_statement: ':' . inner_statement_list "endfor (T_ENDFOR)" ';'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1194


State 1171

  200 for_statement: statement .

    $default  reduce using rule 200 (for_statement)


State 1172

   67 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement .

    $default  reduce using rule 67 (unticked_statement)


State 1173

  203 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" . ';'

    ';'  shift, and go to state 1195


State 1174

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' . $@45 '{' inner_statement_list '}' $@46 additional_catches

    $default  reduce using rule 155 ($@45)

    $@45  go to state 1196


State 1175

  160 finally_statement: "finally (T_FINALLY)" $@47 '{' inner_statement_list '}' .

    $default  reduce using rule 160 (finally_statement)


State 1176

  226 tpl_elseif_list: tpl_elseif_list "elseif (T_ELSEIF)" expr "tpl right delim (T_END_TPL)" . $@56 tpl_block "tpl left delim (T_START_TPL)"

    $default  reduce using rule 225 ($@56)

    $@56  go to state 1197


State 1177

  228 tpl_elseif_list: tpl_elseif_list "else (T_ELSE)" "if (T_IF)" expr . "tpl right delim (T_END_TPL)" $@57 tpl_block "tpl left delim (T_START_TPL)"
  362 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@67 expr
  364                      | expr . "&& (T_BOOLEAN_AND)" $@68 expr
  366                      | expr . "or (T_LOGICAL_OR)" $@69 expr
  368                      | expr . "and (T_LOGICAL_AND)" $@70 expr
  369                      | expr . "xor (T_LOGICAL_XOR)" expr
  370                      | expr . '&' expr
  371                      | expr . '^' expr
  372                      | expr . '.' expr
  373                      | expr . '+' expr
  374                      | expr . '-' expr
  375                      | expr . '*' expr
  376                      | expr . "** (T_POW)" expr
  377                      | expr . '/' expr
  378                      | expr . '%' expr
  379                      | expr . "<< (T_SL)" expr
  380                      | expr . ">> (T_SR)" expr
  385                      | expr . "=== (T_IS_IDENTICAL)" expr
  386                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  387                      | expr . "== (T_IS_EQUAL)" expr
  388                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  389                      | expr . '<' expr
  390                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  391                      | expr . '>' expr
  392                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  393                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  400                      | expr . '?' $@72 expr ':' $@73 expr
  402                      | expr . '?' ':' $@74 expr

    "or (T_LOGICAL_OR)"            shift, and go to state 276
    "xor (T_LOGICAL_XOR)"          shift, and go to state 277
    "and (T_LOGICAL_AND)"          shift, and go to state 278
    '?'                            shift, and go to state 279
    "|| (T_BOOLEAN_OR)"            shift, and go to state 280
    "&& (T_BOOLEAN_AND)"           shift, and go to state 281
    '^'                            shift, and go to state 282
    '&'                            shift, and go to state 283
    "!== (T_IS_NOT_IDENTICAL)"     shift, and go to state 284
    "=== (T_IS_IDENTICAL)"         shift, and go to state 285
    "!= (T_IS_NOT_EQUAL)"          shift, and go to state 286
    "== (T_IS_EQUAL)"              shift, and go to state 287
    '<'                            shift, and go to state 288
    '>'                            shift, and go to state 289
    ">= (T_IS_GREATER_OR_EQUAL)"   shift, and go to state 290
    "<= (T_IS_SMALLER_OR_EQUAL)"   shift, and go to state 291
    ">> (T_SR)"                    shift, and go to state 292
    "<< (T_SL)"                    shift, and go to state 293
    '+'                            shift, and go to state 294
    '-'                            shift, and go to state 295
    '.'                            shift, and go to state 296
    '*'                            shift, and go to state 297
    '/'                            shift, and go to state 298
    '%'                            shift, and go to state 299
    "instanceof (T_INSTANCEOF)"    shift, and go to state 300
    "** (T_POW)"                   shift, and go to state 301
    "tpl right delim (T_END_TPL)"  shift, and go to state 1198


State 1178

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  235 tpl_else_single: "else (T_ELSE)" "tpl right delim (T_END_TPL)" tpl_block . "tpl left delim (T_START_TPL)"

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 1199
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 1179

  236 tpl_endif: '/' "if (T_IF)" . "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1200


State 1180

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" . $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 147 ($@40)

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    $@40                               go to state 1201
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1181

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" . $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 144 ($@38)

    $@38  go to state 1202


State 1182

  240 tpl_loopelse: "else (T_ELSE)" . "tpl right delim (T_END_TPL)" tpl_block "tpl left delim (T_START_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1203


State 1183

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse . '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    '/'  shift, and go to state 1204


State 1184

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block . "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 1205
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 1185

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse . '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    '/'  shift, and go to state 1206


State 1186

  294 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 1207


State 1187

  295 trait_alias: trait_method_reference "as (T_AS)" member_modifier .
  297 trait_modifiers: member_modifier .

    "identifier (T_STRING)"  reduce using rule 297 (trait_modifiers)
    $default                 reduce using rule 295 (trait_alias)


State 1188

  288 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list .
  290 trait_reference_list: trait_reference_list . ',' fully_qualified_class_name

    ','  shift, and go to state 1208

    $default  reduce using rule 288 (trait_precedence)


State 1189

  289 trait_reference_list: fully_qualified_class_name .

    $default  reduce using rule 289 (trait_reference_list)


State 1190

  293 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 293 (trait_method_reference_fully_qualified)


State 1191

  313 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 554
    '-'                                           shift, and go to state 555
    '!'                                           shift, and go to state 556
    '~'                                           shift, and go to state 557
    '['                                           shift, and go to state 558
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 129
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 559
    "static (T_STATIC)"                           shift, and go to state 154
    "array (T_ARRAY)"                             shift, and go to state 560
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 561
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 423
    "namespace (T_NAMESPACE)"                     shift, and go to state 562
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 563
    '('                                           shift, and go to state 564

    namespace_name            go to state 565
    class_name                go to state 566
    common_scalar             go to state 567
    static_class_constant     go to state 568
    static_scalar             go to state 1209
    static_scalar_value       go to state 570
    static_operation          go to state 571
    static_class_name_scalar  go to state 572


State 1192

  276 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@60 '(' . parameter_list ')' method_body

    "identifier (T_STRING)"    shift, and go to state 129
    "array (T_ARRAY)"          shift, and go to state 797
    "callable (T_CALLABLE)"    shift, and go to state 798
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    ')'       reduce using rule 242 (parameter_list)
    $default  reduce using rule 247 (optional_class_type)

    namespace_name              go to state 650
    parameter_list              go to state 1210
    non_empty_parameter_list    go to state 800
    parameter                   go to state 801
    optional_class_type         go to state 802
    fully_qualified_class_name  go to state 803


State 1193

  438 lexical_var_list: lexical_var_list ',' '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 438 (lexical_var_list)


State 1194

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  201 for_statement: ':' inner_statement_list . "endfor (T_ENDFOR)" ';'

    "endfor (T_ENDFOR)"  shift, and go to state 1211

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 1195

  203 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';' .

    $default  reduce using rule 203 (foreach_statement)


State 1196

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 . '{' inner_statement_list '}' $@46 additional_catches

    '{'  shift, and go to state 1212


State 1197

  226 tpl_elseif_list: tpl_elseif_list "elseif (T_ELSEIF)" expr "tpl right delim (T_END_TPL)" $@56 . tpl_block "tpl left delim (T_START_TPL)"

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 1213


State 1198

  228 tpl_elseif_list: tpl_elseif_list "else (T_ELSE)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" . $@57 tpl_block "tpl left delim (T_START_TPL)"

    $default  reduce using rule 227 ($@57)

    $@57  go to state 1214


State 1199

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  235 tpl_else_single: "else (T_ELSE)" "tpl right delim (T_END_TPL)" tpl_block "tpl left delim (T_START_TPL)" .

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 235 (tpl_else_single)

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1200

  236 tpl_endif: '/' "if (T_IF)" "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 236 (tpl_endif)


State 1201

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 . tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "else (T_ELSE)"  shift, and go to state 1182

    $default  reduce using rule 239 (tpl_loopelse)

    tpl_loopelse  go to state 1215


State 1202

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 . tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 1216


State 1203

  240 tpl_loopelse: "else (T_ELSE)" "tpl right delim (T_END_TPL)" . tpl_block "tpl left delim (T_START_TPL)"

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 1217


State 1204

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' . "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "for (T_FOR)"  shift, and go to state 1218


State 1205

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" . $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 134 ($@31)

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    $@31                               go to state 1219
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1206

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' . "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    "foreach (T_FOREACH)"  shift, and go to state 1220


State 1207

  294 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)" .

    $default  reduce using rule 294 (trait_alias)


State 1208

  290 trait_reference_list: trait_reference_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    fully_qualified_class_name  go to state 1221


State 1209

  313 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 313 (class_variable_declaration)


State 1210

  276 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@60 '(' parameter_list . ')' method_body

    ')'  shift, and go to state 1222


State 1211

  201 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" . ';'

    ';'  shift, and go to state 1223


State 1212

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 '{' . inner_statement_list '}' $@46 additional_catches

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1224


State 1213

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  226 tpl_elseif_list: tpl_elseif_list "elseif (T_ELSEIF)" expr "tpl right delim (T_END_TPL)" $@56 tpl_block . "tpl left delim (T_START_TPL)"

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 1225
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 1214

  228 tpl_elseif_list: tpl_elseif_list "else (T_ELSE)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@57 . tpl_block "tpl left delim (T_START_TPL)"

    $default  reduce using rule 100 (tpl_block)

    tpl_block  go to state 1226


State 1215

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse . '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    '/'  shift, and go to state 1227


State 1216

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block . "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 1228
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 1217

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  240 tpl_loopelse: "else (T_ELSE)" "tpl right delim (T_END_TPL)" tpl_block . "tpl left delim (T_START_TPL)"

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 1229
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 1218

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" . "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1230


State 1219

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 . tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    "else (T_ELSE)"  shift, and go to state 1182

    $default  reduce using rule 239 (tpl_loopelse)

    tpl_loopelse  go to state 1231


State 1220

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" . "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1232


State 1221

  290 trait_reference_list: trait_reference_list ',' fully_qualified_class_name .

    $default  reduce using rule 290 (trait_reference_list)


State 1222

  276 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@60 '(' parameter_list ')' . method_body

    ';'  shift, and go to state 1233
    '{'  shift, and go to state 1234

    method_body  go to state 1235


State 1223

  201 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" ';' .

    $default  reduce using rule 201 (for_statement)


State 1224

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list . '}' $@46 additional_catches

    '}'  shift, and go to state 1236

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 1225

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  226 tpl_elseif_list: tpl_elseif_list "elseif (T_ELSEIF)" expr "tpl right delim (T_END_TPL)" $@56 tpl_block "tpl left delim (T_START_TPL)" .

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 226 (tpl_elseif_list)

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1226

   98 tpl_block: tpl_block . tpl_statement
   99          | tpl_block . T_INLINE_HTML
  228 tpl_elseif_list: tpl_elseif_list "else (T_ELSE)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@57 tpl_block . "tpl left delim (T_START_TPL)"

    T_INLINE_HTML                                           shift, and go to state 957
    "tpl left delim (T_START_TPL)"                          shift, and go to state 1237
    "tpl left delim with script (T_START_TPL_WITH_SCRIPT)"  shift, and go to state 79
    "{t (T_START_TPL_TRANSLATE)"                            shift, and go to state 80
    "{include (T_TPL_INCLUDE)"                              shift, and go to state 81

    tpl_statement  go to state 959


State 1227

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' . "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "for (T_FOR)"  shift, and go to state 1238


State 1228

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  145              | "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" . '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '/'                                           shift, and go to state 1239
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1229

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  240 tpl_loopelse: "else (T_ELSE)" "tpl right delim (T_END_TPL)" tpl_block "tpl left delim (T_START_TPL)" .

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 240 (tpl_loopelse)

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1230

  151 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 151 (tpl_statement)


State 1231

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse . '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    '/'  shift, and go to state 1240


State 1232

  138 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 138 (tpl_statement)


State 1233

  298 method_body: ';' .

    $default  reduce using rule 298 (method_body)


State 1234

  299 method_body: '{' . inner_statement_list '}'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1241


State 1235

  276 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@60 '(' parameter_list ')' method_body .

    $default  reduce using rule 276 (class_statement)


State 1236

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list '}' . $@46 additional_catches

    $default  reduce using rule 156 ($@46)

    $@46  go to state 1242


State 1237

  124 tpl_statement: "tpl left delim (T_START_TPL)" . tpl_modifier_list "tpl right delim (T_END_TPL)"
  125              | "tpl left delim (T_START_TPL)" . expr_without_variable "tpl right delim (T_END_TPL)"
  126              | "tpl left delim (T_START_TPL)" . expr_without_variable ';' "tpl right delim (T_END_TPL)"
  131              | "tpl left delim (T_START_TPL)" . "identifier (T_STRING)" tpl_inner_tpl_attr_list "tpl right delim (T_END_TPL)"
  135              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  138              | "tpl left delim (T_START_TPL)" . "foreach (T_FOREACH)" expr "as (T_AS)" foreach_variable foreach_optional_arg "tpl right delim (T_END_TPL)" @32 tpl_block "tpl left delim (T_START_TPL)" $@33 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"
  141              | "tpl left delim (T_START_TPL)" . "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@34 tpl_block "tpl left delim (T_START_TPL)" $@35 tpl_elseif_list tpl_else_single tpl_endif
  145              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  148              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  151              | "tpl left delim (T_START_TPL)" . "for (T_FOR)" foreach_variable foreach_optional_arg "in (T_IN)" expr "tpl right delim (T_END_TPL)" $@41 tpl_block "tpl left delim (T_START_TPL)" $@42 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)"
  228 tpl_elseif_list: tpl_elseif_list "else (T_ELSE)" "if (T_IF)" expr "tpl right delim (T_END_TPL)" $@57 tpl_block "tpl left delim (T_START_TPL)" .

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 128
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 237
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 238
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 239
    "for (T_FOR)"                                 shift, and go to state 240
    "foreach (T_FOREACH)"                         shift, and go to state 241
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 130
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 131
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 82
    '$'                                           shift, and go to state 85
    '`'                                           shift, and go to state 86
    '"'                                           shift, and go to state 87

    $default  reduce using rule 228 (tpl_elseif_list)

    namespace_name                     go to state 88
    tpl_modifier_list                  go to state 242
    new_expr                           go to state 100
    expr_without_variable              go to state 243
    combined_scalar_offset             go to state 103
    combined_scalar                    go to state 104
    function                           go to state 132
    function_call                      go to state 106
    class_name                         go to state 107
    common_scalar                      go to state 108
    general_constant                   go to state 109
    scalar                             go to state 110
    expr                               go to state 201
    parenthesis_expr                   go to state 112
    r_variable                         go to state 244
    rw_variable                        go to state 114
    variable                           go to state 115
    variable_without_objects           go to state 116
    static_member                      go to state 117
    variable_class_name                go to state 118
    array_function_dereference         go to state 119
    base_variable_with_function_calls  go to state 120
    base_variable                      go to state 121
    reference_variable                 go to state 122
    compound_variable                  go to state 123
    simple_indirect_reference          go to state 124
    internal_functions_in_yacc         go to state 125
    class_constant                     go to state 126
    class_name_scalar                  go to state 127


State 1238

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" . "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1243


State 1239

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' . "for (T_FOR)" "tpl right delim (T_END_TPL)"

    "for (T_FOR)"  shift, and go to state 1244


State 1240

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' . "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)"

    "foreach (T_FOREACH)"  shift, and go to state 1245


State 1241

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  299 method_body: '{' inner_statement_list . '}'

    '}'  shift, and go to state 1246

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 1242

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list '}' $@46 . additional_catches

    "catch (T_CATCH)"  shift, and go to state 1247

    $default  reduce using rule 162 (additional_catches)

    additional_catches            go to state 1248
    non_empty_additional_catches  go to state 1249
    additional_catch              go to state 1250


State 1243

  148 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' foreach_variable foreach_optional_arg "in (T_IN)" expr ')' "tpl right delim (T_END_TPL)" $@39 tpl_block "tpl left delim (T_START_TPL)" $@40 tpl_loopelse '/' "for (T_FOR)" "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 148 (tpl_statement)


State 1244

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" . "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1251


State 1245

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" . "tpl right delim (T_END_TPL)"

    "tpl right delim (T_END_TPL)"  shift, and go to state 1252


State 1246

  299 method_body: '{' inner_statement_list '}' .

    $default  reduce using rule 299 (method_body)


State 1247

  167 additional_catch: "catch (T_CATCH)" . '(' fully_qualified_class_name @48 "variable (T_VARIABLE)" ')' $@49 '{' inner_statement_list '}'

    '('  shift, and go to state 1253


State 1248

  157 catch_statement: "catch (T_CATCH)" '(' $@43 fully_qualified_class_name $@44 "variable (T_VARIABLE)" ')' $@45 '{' inner_statement_list '}' $@46 additional_catches .

    $default  reduce using rule 157 (catch_statement)


State 1249

  161 additional_catches: non_empty_additional_catches .
  164 non_empty_additional_catches: non_empty_additional_catches . additional_catch

    "catch (T_CATCH)"  shift, and go to state 1247

    $default  reduce using rule 161 (additional_catches)

    additional_catch  go to state 1254


State 1250

  163 non_empty_additional_catches: additional_catch .

    $default  reduce using rule 163 (non_empty_additional_catches)


State 1251

  145 tpl_statement: "tpl left delim (T_START_TPL)" "for (T_FOR)" '(' for_expr ';' $@36 for_expr ';' $@37 for_expr ')' "tpl right delim (T_END_TPL)" $@38 tpl_block "tpl left delim (T_START_TPL)" '/' "for (T_FOR)" "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 145 (tpl_statement)


State 1252

  135 tpl_statement: "tpl left delim (T_START_TPL)" "foreach (T_FOREACH)" '(' expr "as (T_AS)" @29 foreach_variable foreach_optional_arg ')' "tpl right delim (T_END_TPL)" $@30 tpl_block "tpl left delim (T_START_TPL)" $@31 tpl_loopelse '/' "foreach (T_FOREACH)" "tpl right delim (T_END_TPL)" .

    $default  reduce using rule 135 (tpl_statement)


State 1253

  167 additional_catch: "catch (T_CATCH)" '(' . fully_qualified_class_name @48 "variable (T_VARIABLE)" ')' $@49 '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 129
    "namespace (T_NAMESPACE)"  shift, and go to state 648
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 649

    namespace_name              go to state 650
    fully_qualified_class_name  go to state 1255


State 1254

  164 non_empty_additional_catches: non_empty_additional_catches additional_catch .

    $default  reduce using rule 164 (non_empty_additional_catches)


State 1255

  167 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name . @48 "variable (T_VARIABLE)" ')' $@49 '{' inner_statement_list '}'

    $default  reduce using rule 165 (@48)

    @48  go to state 1256


State 1256

  167 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @48 . "variable (T_VARIABLE)" ')' $@49 '{' inner_statement_list '}'

    "variable (T_VARIABLE)"  shift, and go to state 1257


State 1257

  167 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @48 "variable (T_VARIABLE)" . ')' $@49 '{' inner_statement_list '}'

    ')'  shift, and go to state 1258


State 1258

  167 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @48 "variable (T_VARIABLE)" ')' . $@49 '{' inner_statement_list '}'

    $default  reduce using rule 166 ($@49)

    $@49  go to state 1259


State 1259

  167 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @48 "variable (T_VARIABLE)" ')' $@49 . '{' inner_statement_list '}'

    '{'  shift, and go to state 1260


State 1260

  167 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @48 "variable (T_VARIABLE)" ')' $@49 '{' . inner_statement_list '}'

    $default  reduce using rule 43 (inner_statement_list)

    inner_statement_list  go to state 1261


State 1261

   42 inner_statement_list: inner_statement_list . $@4 inner_statement
  167 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @48 "variable (T_VARIABLE)" ')' $@49 '{' inner_statement_list . '}'

    '}'  shift, and go to state 1262

    $default  reduce using rule 41 ($@4)

    $@4  go to state 444


State 1262

  167 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @48 "variable (T_VARIABLE)" ')' $@49 '{' inner_statement_list '}' .

    $default  reduce using rule 167 (additional_catch)
